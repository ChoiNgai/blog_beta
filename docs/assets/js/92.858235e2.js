(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{488:function(e,t,v){"use strict";v.r(t);var a=v(30),_=Object(a.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"kudu"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#kudu"}},[e._v("#")]),e._v(" Kudu")]),e._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/ChoiNgai/ImageServer/img/20211126232514.png",alt:"kudu"}})]),e._v(" "),v("h2",{attrs:{id:"概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[e._v("#")]),e._v(" 概念")]),e._v(" "),v("p",[e._v("Kudu专为需要对快速（快速变化的）数据进行快速分析的用例而设计。Kudu旨在利用下一代硬件和内存处理技术，显着降低了Apache Impala（正在孵化）和Apache Spark（最初是其他执行引擎）的查询延迟。")]),e._v(" "),v("p",[e._v("Apache Kudu是一个为了Hadoop系统环境而打造的"),v("strong",[e._v("列存储管理器")]),e._v("，与一般的Hadoop生态环境中的其他应用一样，具有能在通用硬件上运行、水平扩展性佳和支持高可用性操作等功能。")]),e._v(" "),v("p",[e._v("在Kudu出现之前，Hadoop生态环境中的储存主要依赖HDFS和HBase，追求高吞吐批处理的用例中使用HDFS，追求低延时随机读取用例下用HBase，而Kudu正好能兼顾这两者。处于折中的一款存储器。")]),e._v(" "),v("h2",{attrs:{id:"kudu的主要优点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#kudu的主要优点"}},[e._v("#")]),e._v(" Kudu的主要优点：")]),e._v(" "),v("ul",[v("li",[e._v("快速处理OLAP（Online Analytical Processing）任务")]),e._v(" "),v("li",[e._v("集成MapReduce、Spark和其他Hadoop环境组件")]),e._v(" "),v("li",[e._v("与Impala高度集成，使得这成为一种高效访问交互HDFS的方法")]),e._v(" "),v("li",[e._v("强大而灵活的统一性模型")]),e._v(" "),v("li",[e._v("在执行同时连续随机访问时表现优异")]),e._v(" "),v("li",[e._v("通过Cloudera Manager可以轻松管理控制")]),e._v(" "),v("li",[e._v("高可用性，tablet server和master利用Raft Consensus算法保证节点的可用")]),e._v(" "),v("li",[e._v("支持update、delete操作，这在众多OLAP引擎中是一大亮点")])]),e._v(" "),v("h2",{attrs:{id:"常见的应用场景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常见的应用场景"}},[e._v("#")]),e._v(" 常见的应用场景：")]),e._v(" "),v("ul",[v("li",[e._v("刚刚到达的数据就马上要被终端用户使用访问到")]),e._v(" "),v("li",[e._v("同时支持在大量历史数据中做访问查询和某些特定实体中需要非常快响应的颗粒查询")]),e._v(" "),v("li",[e._v("基于历史数据使用预测模型来做实时的决定和刷新")]),e._v(" "),v("li",[e._v("要求几乎实时的流输入处理")])]),e._v(" "),v("p",[e._v("kudu的主键是聚簇索引，存储也是通过"),v("code",[e._v("LSM树")]),e._v("（Log-Structured Merge Tree）来实现的。KUDU 的最小存储单元是 "),v("code",[e._v("RowSets")]),e._v("，KUDU 中存在两种 RowSets："),v("code",[e._v("MemRowSets")]),e._v("、"),v("code",[e._v("DiskRowSets")]),e._v("，数据先写内存中的 "),v("code",[e._v("MemRowSet")]),e._v("，"),v("code",[e._v("MemRowSet")]),e._v(" 满了后刷到磁盘成为一个 "),v("code",[e._v("DiskRowSet")]),e._v("，"),v("code",[e._v("DiskRowSet")]),e._v(" 一经写入，就无法修改了。")]),e._v(" "),v("p",[e._v("kudu的写过程:")]),e._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/ChoiNgai/ImageServer/img/20211126232525.jpg",alt:"kudu写"}})]),e._v(" "),v("p",[e._v("kudu的更新过程:")]),e._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/ChoiNgai/ImageServer/img/20211126232531.jpg",alt:"kudu更新"}})]),e._v(" "),v("p",[e._v("kudu的读过程:")]),e._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/ChoiNgai/ImageServer/img/20211126232539.jpg",alt:"kudu读"}})])])}),[],!1,null,null,null);t.default=_.exports}}]);
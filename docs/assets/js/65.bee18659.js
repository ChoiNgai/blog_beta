(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{460:function(v,_,t){"use strict";t.r(_);var e=t(30),s=Object(e.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"计算机网络复习"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#计算机网络复习"}},[v._v("#")]),v._v(" 计算机网络复习")]),v._v(" "),t("p",[v._v("笔记by"),t("strong",[v._v("陈双祥")]),v._v("（老哥原话：背背tcp upd http https）")]),v._v(" "),t("h3",{attrs:{id:"网络层"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#网络层"}},[v._v("#")]),v._v(" 网络层")]),v._v(" "),t("p",[v._v("网络层向上提供了一种尽力而为服务，将各种确保交付等功能交给了上层实现。")]),v._v(" "),t("p",[v._v("网络层的主要功能："),t("strong",[v._v("转发")]),v._v("、"),t("strong",[v._v("路由选择")]),v._v("，它需要做到尽量快的将数据从入口转发到出口。")]),v._v(" "),t("h4",{attrs:{id:"最长前缀匹配规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#最长前缀匹配规则"}},[v._v("#")]),v._v(" 最长前缀匹配规则")]),v._v(" "),t("p",[v._v("路由器中有一个转发表，它的表项分别包含了"),t("strong",[v._v("子网前缀")]),v._v("以及去向该子网的"),t("strong",[v._v("链路接口")])]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("前缀匹配")]),v._v(" "),t("th",[v._v("链路接口")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("11001000 00010111 00010")]),v._v(" "),t("td",[v._v("0")])]),v._v(" "),t("tr",[t("td",[v._v("11001000 00010111 00011000")]),v._v(" "),t("td",[v._v("1")])]),v._v(" "),t("tr",[t("td",[v._v("11001000 00010111 00011")]),v._v(" "),t("td",[v._v("2")])]),v._v(" "),t("tr",[t("td",[v._v("其他")]),v._v(" "),t("td",[v._v("3")])])])]),v._v(" "),t("p",[v._v("当路由器收到需要转发的报文段，它会根据其目的地址进行最长前缀匹配，找到能与该目的地址匹配前缀最长的表项，然后把数据转发到对应的链路接口。")]),v._v(" "),t("p",[v._v("也就是说，网络层的寻址是一种"),t("strong",[v._v("层次化")]),v._v("的，路由器只负责将报文段发送给这个目的地址所在的子网，一层一层进行传递。")]),v._v(" "),t("h4",{attrs:{id:"ipv4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ipv4"}},[v._v("#")]),v._v(" IPv4")]),v._v(" "),t("h5",{attrs:{id:"编址"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编址"}},[v._v("#")]),v._v(" 编址")]),v._v(" "),t("p",[v._v("IPv4 协议的地址共 4 个字节，以十进制表示，主机、路由器的每个接口都会有自己的 IP 地址。")]),v._v(" "),t("p",[v._v("编址有两种方式："),t("strong",[v._v("CIDR 编址")]),v._v(" ，子网划分和 "),t("strong",[v._v("分类编址")]),v._v("。")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("分类编址")]),v._v(" "),t("p",[v._v("将组织分为了 A、B、C 三类，它们的前半部分分别是 8、16、24 位，也就是 A 类有 24 位的可用 IP，B 类有 16 位可用 IP，C 类则有 8 位。这样编址的最大问题就是有对资源的浪费问题（有时候 B 类太大了，C 类又太小了）")])]),v._v(" "),t("li",[t("h5",{attrs:{id:"子网划分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#子网划分"}},[v._v("#")]),v._v(" 子网划分")]),v._v(" "),t("p",[t("strong",[v._v("通过在主机号字段中拿一部分作为子网号")]),v._v("，把两级 IP 地址划分为"),t("strong",[v._v("三级 IP 地址。")])]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("IP 地址 ::= {< 网络号 >, < 子网号 >, < 主机号 >}\n")])])]),t("p",[v._v("要使用子网，必须配置子网掩码。一个 B 类地址的默认子网掩码为 255.255.0.0，如果 B 类地址的子网占两个比特，那么子网掩码为 11111111 11111111 11000000 00000000，也就是 255.255.192.0。")]),v._v(" "),t("p",[v._v("注意，外部网络看不到子网的存在。")])]),v._v(" "),t("li",[t("p",[v._v("CIDR")]),v._v(" "),t("p",[v._v("无分类编址 CIDR 消除了传统 A 类、B 类和 C 类地址以及划分子网的概念，使用"),t("strong",[v._v("网络前缀和主机号")]),v._v("来对 IP 地址进行编码，网络前缀的长度可以根据需要变化。")]),v._v(" "),t("p",[t("code",[v._v("IP 地址 ::= {< 网络前缀号 >, < 主机号 >}")])]),v._v(" "),t("p",[v._v("CIDR 的写法上采用在 IP 地址后面加上网络前缀长度的方法，例如 128.14.35.7/20 表示前 20 位为网络前缀。")]),v._v(" "),t("p",[v._v("CIDR 的地址掩码可以继续称为"),t("strong",[v._v("子网掩码")]),v._v("，子网掩码首 1（连续1） 长度为网络前缀的长度。")])])]),v._v(" "),t("h5",{attrs:{id:"分片"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分片"}},[v._v("#")]),v._v(" 分片")]),v._v(" "),t("p",[v._v("由于某些链路能承载的数据大小有限，因此 IPv4 支持了对数据报进行分片，再将其交给链路层。当目的主机接受完所有的片后，就会将这些片重新组合拼接位原始数据报。")]),v._v(" "),t("p",[v._v("IPv4 通过如下对分片进行了支持。")]),v._v(" "),t("ul",[t("li",[v._v("标识字段表示同一数据报")]),v._v(" "),t("li",[v._v("标志字段（"),t("code",[v._v("保留位")]),v._v("，"),t("code",[v._v("不分片位")]),v._v("：若要分片发送icmp报文，"),t("code",[v._v("更多片位")]),v._v(")")]),v._v(" "),t("li",[v._v("片偏移字段")])]),v._v(" "),t("p",[v._v("由于分片比较消耗性能，并且网络层的主要目的就是尽快的对数据报进行了转发，因此 "),t("strong",[v._v("IPv6 取消了对分片的支持，将分片的功能交给了上层去实现，仅仅通过 ICMP 报文段通知上层")]),v._v("。")]),v._v(" "),t("h5",{attrs:{id:"寿命"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#寿命"}},[v._v("#")]),v._v(" 寿命")]),v._v(" "),t("p",[v._v("由于数据报存在在网络中循环的风险，因此 IPv4 包含了一个"),t("strong",[v._v("寿命")]),v._v("字段，每当一个路由器这个数据报，寿命就会减 1，当寿命为 0 时，数据报就会被丢弃，从而解决了数据报的无限循环问题。")]),v._v(" "),t("h4",{attrs:{id:"dhcp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dhcp"}},[v._v("#")]),v._v(" DHCP")]),v._v(" "),t("p",[v._v("子网对 IP 地址的分配是需要主机手动进行配置的，这非常麻烦，因此可以通过 DHCP 协议解决，DHCP 协议可以实现 IP 地址的动态分配。")]),v._v(" "),t("p",[v._v("DHCP 是一个"),t("strong",[v._v("应用层协议")]),v._v("，它"),t("strong",[v._v("基于 UDP")]),v._v("，主机可以通过 DHCP 自动获取一个 IP 地址，它使用了 68 端口进行发送，67 端口进行接收。")]),v._v(" "),t("p",[v._v("DHCP 的步骤如下：")]),v._v(" "),t("ol",[t("li",[v._v("新到达的机器发送一个"),t("strong",[v._v("DHCP 发现报文段")]),v._v("，它基于 UDP 采用了广播目的地址 255.255.255.255，并且填入本机源地址 0.0.0.0，并且其端口号为 68。链路层会将这个帧广播到所有这个机器所在子网中的所有机器中。")]),v._v(" "),t("li",[v._v("DHCP 服务器收到了 DHCP 发现报文段，会通过 DHCP 提供报文段向客户响应。由于不知道客户的目的地址，因此也是通过广播的形式，并且源地址中填入了自己的地址。")]),v._v(" "),t("li",[v._v("子网中不止存在一台 DHCP 服务器，因此该机器会收到多个 DHCP 发现报文段。它选择其中一个后，会向该服务器发送一个 DHCP 请求报文段。")]),v._v(" "),t("li",[v._v("DHCP 服务器收到请求报文段后，会通过 DHCP ACK 报文段向该机器进行回应，证实所需要的参数，此时该机器就成功地分配到了一个自己的 IP 地址。")])]),v._v(" "),t("p",[v._v("存在一种 DHCP 饥饿攻击，它类似 SYN 洪泛攻击，攻击方通过仿冒 MAC 不断向 DHCP 服务器请求 IP 地址，使得子网的 IP 资源耗尽，无法正常进行 IP 分配。")]),v._v(" "),t("h4",{attrs:{id:"icmp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#icmp"}},[v._v("#")]),v._v(" ICMP")]),v._v(" "),t("p",[v._v("ICMP 协议用于在主机、路由器之间沟通网络层信息，它典型的用途就是差错报告（如网络不可达等），它"),t("strong",[v._v("基于 IP 协议实现")]),v._v("，但仍然属于网络层的协议。")]),v._v(" "),t("p",[v._v("ICMP 报文段由"),t("strong",[v._v("类型")]),v._v("、"),t("strong",[v._v("编码")]),v._v("两部分共同构成。主机收到了指明上层为 ICMP 的 IP 报文段后，就会拆解 ICMP 报文段的部分，根据类型和编码确定其传递的信息并处理。")]),v._v(" "),t("h5",{attrs:{id:"ping-程序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ping-程序"}},[v._v("#")]),v._v(" ping 程序")]),v._v(" "),t("p",[v._v("ping 程序基于 ICMP 实现，它通过"),t("strong",[v._v("回显请求报文段")]),v._v("发送到指定主机，对应主机收到后就会返回一个"),t("strong",[v._v("回显回答报文段")]),v._v("从而实现 ping 的功能。")]),v._v(" "),t("h5",{attrs:{id:"traceroute-程序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#traceroute-程序"}},[v._v("#")]),v._v(" traceroute 程序")]),v._v(" "),t("p",[v._v("traceroute 通过 ICMP 配合 IPv4 的寿命字段实现，它通过发送从 1 开始不断递增的报文段，当第 n 个报文段到达第 n 个路由器时，路由器就会通过 ICMP 返回一个寿命过期的报文段，从该报文段中就可以解析出第 n 个路由器的 IP 地址。并且通过对每个报文段进行计时，就可以获取到往返时延。")]),v._v(" "),t("h4",{attrs:{id:"nat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nat"}},[v._v("#")]),v._v(" NAT")]),v._v(" "),t("p",[v._v("NAT 的核心思路就是一群设备共用同一个 IP 地址，"),t("strong",[v._v("通过端口号来对不同设备进行区分")]),v._v("。它依赖于具有 NAT 功能的路由器，NAT 路由器负责将 Internet 中的信息根据到达的端口号进行转发，它自己的 IP 由 DHCP 获得，同时这个路由器内部也运行着一个 DHCP 服务器用来为路由器控制下的设备提供内部 IP。")]),v._v(" "),t("p",[v._v("它内部维护了一张 "),t("strong",[v._v("NAT 转换表")]),v._v("，包含了 WAN 端（外部）和 LAN 端（内部）的端口号及地址：")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("WAN端")]),v._v(" "),t("th",[v._v("LAN端")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("138.76.29.7:5001")]),v._v(" "),t("td",[v._v("10.0.0.1:3345")])]),v._v(" "),t("tr",[t("td",[v._v("......")]),v._v(" "),t("td",[v._v("......")])])])]),v._v(" "),t("p",[v._v("这张 NAT 转换表表示了从外网中的端口号到 NAT 网络中设备的映射，NAT 路由器负责在网络请求的过程中对报文段的 IP 地址和端口号进行替换，并且将报文段进行转发，从而让 NAT 网络中的设备就像是真的在 Internet 中一样。")]),v._v(" "),t("p",[v._v("NAT 可以有效的解决 IPv4 地址缺乏问题，它通过端口号对可用的地址进行扩充，从而使得即使 IPv4 地址耗尽，仍然能有新的设备加入网络。")]),v._v(" "),t("p",[v._v("但是它存在着如下的问题：")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("NAT 的设计不是很合理")]),v._v("。端口号本应当是用于为进程编址的，但 NAT 却将端口号也作为了主机编址的一部分。")]),v._v(" "),t("li",[t("strong",[v._v("NAT 会影响网络速率")]),v._v("。由于数据的传输过程中还需要 NAT 设备对数据包进行修改，这会降低数据传输的效率。")]),v._v(" "),t("li",[t("strong",[v._v("有的协议无法通过 NAT 进行传输")]),v._v("。")])]),v._v(" "),t("h4",{attrs:{id:"ipv6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ipv6"}},[v._v("#")]),v._v(" IPv6")]),v._v(" "),t("p",[v._v("IPv6 协议对编址的位数进行了扩充，有 128 位，同时还对 IPv4 存在的不足进行了优化。")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("地址容量更大")]),v._v("：IPv6 的地址有 128 位，并且引入了"),t("strong",[v._v("任播地址")]),v._v("，这种地址可以实现数据报交给一组机器中的任意一个。")]),v._v(" "),t("li",[t("strong",[v._v("舍弃了分片/重组功能")]),v._v("：IPv6 不允许在中间的路由器进行分片，如果遇到了链路无法承载的数据报，则通过 ICMP 通知发送方的端系统，由端系统进行数据的分片并重新发送数据。也就是说"),t("strong",[v._v("分片/组装的工作交给了端系统")]),v._v("。")]),v._v(" "),t("li",[t("strong",[v._v("首部固定长度")]),v._v("：IPv6 舍弃了许多 IPv4 中的字段，它的首部具有 40 字节的"),t("strong",[v._v("固定长度")]),v._v("，可以使得对 IP 数据报的处理更快。")]),v._v(" "),t("li",[t("strong",[v._v("流标签与优先级")]),v._v("：IPv6 引入了"),t("strong",[v._v("流")]),v._v("的概念，例如音频、视频的传输就可以当作一个流，并且引入了流量类型字段用于区分不同类型的流，可以通过流量类型而对某些流量赋予更高的优先级。")])]),v._v(" "),t("h5",{attrs:{id:"ipv4-到-ipv6-的迁移"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ipv4-到-ipv6-的迁移"}},[v._v("#")]),v._v(" IPv4 到 IPv6 的迁移")]),v._v(" "),t("p",[v._v("全球统一迁移显然是不现实的，目前主要的 IPv4 向 IPv6 迁移的解决方案有如下几种：")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("双栈")]),v._v("：使用同时具有 IPv4、IPv6 的完整功能的节点，当 IPv4 结点互操作时，使用 IPv4，当 IPv6 结点互操作时，使用 IPv6。要确定另一个节点的类型可以通过 DNS 来解决，根据请求的节点类型返回对应的 IP 地址。这样双方只要有一个是只支持 IPv4 的，则需要使用 IPv4 协议来进行。")]),v._v(" "),t("li",[t("strong",[v._v("建隧道")]),v._v("：在只支持 IPv4 的节点上通过 IPv4 数据报来传递 IPv6 数据报，将 IPv6 数据报视为 IPv4 数据报的一部分。")])]),v._v(" "),t("h4",{attrs:{id:"路由选择算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#路由选择算法"}},[v._v("#")]),v._v(" 路由选择算法")]),v._v(" "),t("p",[v._v("路由选择算法主要有距离向量（DV）和链路状态（LS）两种。")]),v._v(" "),t("h5",{attrs:{id:"距离向量-dv-算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#距离向量-dv-算法"}},[v._v("#")]),v._v(" 距离向量（DV）算法")]),v._v(" "),t("p",[v._v("是一种迭代、分布式的算法，**每个节点只从其邻居 **处接收信息，并进行计算。")]),v._v(" "),t("p",[v._v("每个节点会不断向它的邻居发送自己的距离向量副本。")]),v._v(" "),t("p",[v._v("每当节点从邻居处收到新的距离向量或者它到邻居的费用发生改变时，则会通过下面的方程更新自己的距离向量：")]),v._v(" "),t("p",[t("code",[v._v("d(x, y) = minv(c(x, v) + d(v, y))\t// 对N中每个结点")])]),v._v(" "),t("p",[v._v("之后如果该距离向量发生了改变，则会将这个距离向量通知给所有的邻居。")]),v._v(" "),t("p",[v._v("在 DV 算法中，好消息（费用降低）是传递的非常快的，只需要很少的几次交流整个网络就会回归静止。")]),v._v(" "),t("p",[v._v("而对于坏消息（费用提高）来说，它传递的是非常慢的。因为费用的提高会造成一种"),t("strong",[v._v("选择环路")]),v._v("问题，两个节点由于不清楚整体局势，都认为通过对方发送数据是一条最低费用路径，因此导致消息在两个节点中来回传递。")]),v._v(" "),t("h5",{attrs:{id:"链路状态-ls-算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#链路状态-ls-算法"}},[v._v("#")]),v._v(" 链路状态（LS）算法")]),v._v(" "),t("p",[v._v("链路状态算法中，"),t("strong",[v._v("网络拓扑以及所有链路的费用对每个节点都是已知的")]),v._v("，这往往通过一种"),t("strong",[v._v("链路状态广播")]),v._v("实现。")]),v._v(" "),t("p",[v._v("它内部所使用的路由选择算法为 "),t("strong",[v._v("Dijkstra 算法")]),v._v("，其最坏的时间复杂度为 O(n^2)。")]),v._v(" "),t("h4",{attrs:{id:"路由选择协议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#路由选择协议"}},[v._v("#")]),v._v(" 路由选择协议")]),v._v(" "),t("h5",{attrs:{id:"rip-dv-as内"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rip-dv-as内"}},[v._v("#")]),v._v(" RIP（DV，AS内）")]),v._v(" "),t("p",[v._v("RIP 是一种基于距离向量（DV）算法实现的协议，是一种自治系统内部的路由选择协议，它用跳数来作为费用测度，"),t("strong",[v._v("每条链路的费用都被认为是 1")]),v._v("。")]),v._v(" "),t("p",[v._v("它使用 "),t("strong",[v._v("RIP 响应报文段")]),v._v("来实现邻居之间的信息交换，每台路由器都维护了一张 RIP 表，它包括了这个路由器的距离向量和这个路由器的转发表：")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("目的子网")]),v._v(" "),t("th",[v._v("下一台路由器")]),v._v(" "),t("th",[v._v("到目的地的跳数")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("w")]),v._v(" "),t("td",[v._v("A")]),v._v(" "),t("td",[v._v("2")])]),v._v(" "),t("tr",[t("td",[v._v("y")]),v._v(" "),t("td",[v._v("B")]),v._v(" "),t("td",[v._v("2")])]),v._v(" "),t("tr",[t("td",[v._v("z")]),v._v(" "),t("td",[v._v("B")]),v._v(" "),t("td",[v._v("7")])]),v._v(" "),t("tr",[t("td",[v._v("x")]),v._v(" "),t("td",[v._v("-")]),v._v(" "),t("td",[v._v("1")])]),v._v(" "),t("tr",[t("td",[v._v("...")]),v._v(" "),t("td",[v._v("...")]),v._v(" "),t("td",[v._v("...")])])])]),v._v(" "),t("p",[v._v("RIP 路由器大概每 30 秒会进行一次交互通告，如果一台路由器超过 180 秒没有从邻居处收到报文段，则该邻居不再认为是可达的，此时该路由器会修改本地路由选择表，然后向相邻路由器发送通告来传播该消息。")]),v._v(" "),t("p",[v._v("RIP 协议还支持通过发送 "),t("strong",[v._v("RIP 请求报文段")]),v._v("来获取它的邻居到达目的地的费用。")]),v._v(" "),t("p",[v._v("RIP 协议是"),t("strong",[v._v("基于 UDP 实现")]),v._v("的，因此它是一个应用层的报文段，往往由操作系统实现。")]),v._v(" "),t("h5",{attrs:{id:"ospf-ls-as内"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ospf-ls-as内"}},[v._v("#")]),v._v(" OSPF（LS，AS内）")]),v._v(" "),t("p",[v._v("OSPF 协议基于链路状态（LS）算法实现，它的"),t("strong",[v._v("各条链路的费用由网络管理员配置")]),v._v("。")]),v._v(" "),t("p",[v._v("OSPF 路由器会"),t("strong",[v._v("向该 AS 内所有其他路由器广播路由选择信息")]),v._v("，而不只是向邻居传递。当链路状态改变时，路由器就会将链路状态信息进行广播。即使没有变化，它也会定时进行一次链路状态广播。")]),v._v(" "),t("p",[t("strong",[v._v("OSPF 协议基于 IP 协议实现")]),v._v("，它还支持通过向邻居发送 HELLO 报文段实现对链路的检查，以及对网络范围内的链路状态的获取。")]),v._v(" "),t("p",[v._v("OSPF 还可以将自治系统分为多个区域，每个区域运行自己的 OSPF 算法，区域之间由"),t("strong",[v._v("区域边界路由器")]),v._v("负责对外进行路由选择。同时会在这些区域内存在一个主干区域，这个区域负责为不同区域之间的流量提供路由选择。")]),v._v(" "),t("p",[v._v("AS 内的区域间路由选择分组首先路由到一个区域边界路由器，再通过主干路由到位于目的区域的区域边界路由器，最后路由到目的地。")]),v._v(" "),t("h5",{attrs:{id:"bgp-as外"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bgp-as外"}},[v._v("#")]),v._v(" BGP（AS外）")]),v._v(" "),t("p",[v._v("BGP 协议用于支持 AS 外的路由选择，其中，跨越两个 AS 的会话叫做外部 BGP（eBGP），而同一个 AS 内的会话称为（iBGP）。")]),v._v(" "),t("p",[v._v("BGP 协议可以让 AS 知道通过它相邻的 AS 能到达哪些子网。")]),v._v(" "),t("p",[v._v("网关之间的 eBGP 会话，会发送当前 AS 可达到前缀列表，当网关路由器收到前缀列表后，会通过 iBGP 会话将这些前缀向 AS 内的各个路由器进行转发，每台路由器收到前缀列表后，都会将其加入转发表。")]),v._v(" "),t("h3",{attrs:{id:"链路层"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#链路层"}},[v._v("#")]),v._v(" 链路层")]),v._v(" "),t("h4",{attrs:{id:"mac-地址"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mac-地址"}},[v._v("#")]),v._v(" MAC 地址")]),v._v(" "),t("p",[v._v("MAC 地址（LAN 地址）是一种与地域无关，每个网络适配器生产时就决定的地址，它有 6个字节，一般用十六进制表示。")]),v._v(" "),t("p",[v._v("适配器发送一个帧时，它会将目的 MAC 地址填入发送的帧，并将其传输到"),t("strong",[v._v("局域网")]),v._v("，局域网内的所有适配器都会收到这个帧，但如果这个帧的目的 MAC 地址不是自己，并且不是广播帧的地址（FF-FF-FF-FF-FF-FF），则会将这个帧丢弃，否则它会向上层协议传递。")]),v._v(" "),t("h4",{attrs:{id:"arp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arp"}},[v._v("#")]),v._v(" ARP")]),v._v(" "),t("p",[v._v("要发送一个 IP 数据报，我们首先是需要知道其 IP 地址，但同时在链路层也需要知道它的 MAC 地址。ARP 协议就是一种用于实现 IP 地址到 MAC 地址转换的协议，它是一个跨越了网络层和链路层的协议，它内部维护了一个 "),t("strong",[v._v("ARP 表")]),v._v("，每个表项都包含了 "),t("strong",[v._v("IP 地址")]),v._v("、"),t("strong",[v._v("MAC 地址")]),v._v("以及"),t("strong",[v._v("过期时间")]),v._v("三项，表达了一个 IP 地址到 MAC 地址的映射，并且当到达过期时间时，对应表项会被移除。")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("IP 地址")]),v._v(" "),t("th",[v._v("MAC 地址")]),v._v(" "),t("th",[v._v("TTL")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("222.222.222.221")]),v._v(" "),t("td",[v._v("88-B2-2F-54-1A-0F")]),v._v(" "),t("td",[v._v("13:45:00")])]),v._v(" "),t("tr",[t("td",[v._v("222.222.222.223")]),v._v(" "),t("td",[v._v("5C-66-AB-90-75-B1")]),v._v(" "),t("td",[v._v("13:52:00")])])])]),v._v(" "),t("p",[v._v("在进行对 IP 到 MAC 的转换时：")]),v._v(" "),t("ul",[t("li",[v._v("首先会尝试在 ARP 找中找到对应的映射，并解析为对应的 MAC 地址。")]),v._v(" "),t("li",[v._v("若 ARP 表中不存在对应的映射，发送方会构造一个 "),t("strong",[v._v("ARP 查询帧")]),v._v("，在目的 MAC 地址中填入广播地址（FF-FF-FF-FF-FF-FF）并将其传输到局域网")]),v._v(" "),t("li",[v._v("局域网中的其他适配器都能收到这个查询报文段，如果他们发现目的 IP 地址与自己的不符，则会丢弃该帧。")]),v._v(" "),t("li",[v._v("如果目的 IP 地址相匹配，则会给查询主机发送一个附带了映射信息的 ARP 响应帧（由于已经有发送方的源 MAC 地址，不需要再通过广播的方式）")]),v._v(" "),t("li",[v._v("查询主机收到映射后，会更新其 ARP 表。")])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/a2547555298/imags/raw/master/006tNbRwgy1ga0pwtx2lkj30xt07vt9g.jpg",alt:"image-20191218113227536"}})]),v._v(" "),t("h3",{attrs:{id:"有了-mac-地址为什么还需要-ip-地址"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#有了-mac-地址为什么还需要-ip-地址"}},[v._v("#")]),v._v(" 有了 MAC 地址为什么还需要 IP 地址？")]),v._v(" "),t("p",[v._v("核心原因在于："),t("strong",[v._v("网络层寻址是分层次的，而链路层寻址则是扁平的")]),v._v("。")]),v._v(" "),t("p",[v._v("首先，我们都知道，MAC 地址是网络适配器生产的时候就已经决定的，与地域无关。也就是说我们无法通过 MAC 地址去确定它所处的局域网，从而让路由器确定该如何转发。如果我们想要让一个报文段能够通过 MAC 地址实现对整个全球互联网中的其他机器进行数据传输，那么我们必须要知道每个 MAC 地址所对应的局域网，也就是说每台路由器中都需要记录下世界上所有的 MAC 地址所对应的位置，这显然不现实。")]),v._v(" "),t("p",[v._v("而 IP 地址则是由最上级开始一级一级划分子网从而派发的，它具有地域性，同一个子网下的设备的 IP 地址前缀是相同的，通过这个前缀的匹配，我们可以确定 IP 地址所对应的子网，而路由器也只需要记录对应子网对应的接口即可。")]),v._v(" "),t("p",[v._v("我们可以将 MAC 地址当作我们的身份证，而 IP 地址则可以当作我们的一个地址。显然快递员（路由器）是无法通过我们的身份证号来找到我们具体的位置并将快递（报文段）交给我们的，除非他们知道世界上每一个身份证号对应的地址。而他们则可以通过地址由发送地一级一级转发，根据地址来确定我们的具体位置并交给我们。")]),v._v(" "),t("h4",{attrs:{id:"链路层交换机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#链路层交换机"}},[v._v("#")]),v._v(" 链路层交换机")]),v._v(" "),t("p",[v._v("链路层交换机的作用是对链路层的帧进行接收并转发到出链路。")]),v._v(" "),t("p",[v._v("交换机内维护了一个"),t("strong",[v._v("交换机表")]),v._v("，表项中包含了 MAC 地址以及该 MAC 地址对应的接口，同时还包含了到达时间。")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("地址")]),v._v(" "),t("th",[v._v("接口")]),v._v(" "),t("th",[v._v("时间")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("62-FE-F7-11-89-A3")]),v._v(" "),t("td",[v._v("1")]),v._v(" "),t("td",[v._v("9:32")])]),v._v(" "),t("tr",[t("td",[v._v("7C-BA-B2-B4-91-10")]),v._v(" "),t("td",[v._v("3")]),v._v(" "),t("td",[v._v("9:36")])]),v._v(" "),t("tr",[t("td",[v._v("...")]),v._v(" "),t("td",[v._v("...")]),v._v(" "),t("td",[v._v("...")])])])]),v._v(" "),t("p",[v._v("它的交换机表默认状态下为空，每当交换机收到一个新的帧的时候，它都会在交换机表中记录下这个帧的"),t("strong",[v._v("源地址")]),v._v("、"),t("strong",[v._v("到达的接口")]),v._v("以及"),t("strong",[v._v("当前的时间")]),v._v("，因为能从这个接口到达就意味着可以从这个接口将数据转发到对应的源网络适配器。")]),v._v(" "),t("h4",{attrs:{id:"交换机与路由器的对比"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#交换机与路由器的对比"}},[v._v("#")]),v._v(" 交换机与路由器的对比")]),v._v(" "),t("p",[v._v("交换机与路由器非常相似，它们都是存储转发分组交换机，但路由器是基于网络层地址（IP）进行转发，而交换机是基于链路层地址（MAC）进行转发。")]),v._v(" "),t("p",[v._v("交换机具有如下的特点")]),v._v(" "),t("ul",[t("li",[v._v("优点\n"),t("ul",[t("li",[v._v("即插即用")]),v._v(" "),t("li",[v._v("较高的分组过滤和转发速率")])])]),v._v(" "),t("li",[v._v("缺点\n"),t("ul",[t("li",[v._v("主机和路由器中需要有大量的 ARP 表")]),v._v(" "),t("li",[v._v("对广播风暴问题不提供任何保护措施")])])])]),v._v(" "),t("p",[v._v("而路由器则具有以下的特点：")]),v._v(" "),t("ul",[t("li",[v._v("优点\n"),t("ul",[t("li",[v._v("允许以丰富的拓扑结构构建因特网")]),v._v(" "),t("li",[v._v("有着更健壮的流量隔离方式和对广播风暴的控制。")])])]),v._v(" "),t("li",[v._v("缺点\n"),t("ul",[t("li",[v._v("并非即插即用，需要人为对路由器和主机进行配置（DHCP 可以解决）")]),v._v(" "),t("li",[v._v("分组的处理速率相对更慢")])])])]),v._v(" "),t("h3",{attrs:{id:"http"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[v._v("#")]),v._v(" HTTP")]),v._v(" "),t("p",[v._v("Http是基于TCP/IP协议的应用层超文本传输协议，主要规定了客户端和服务器的通信格式，默认使用80端口。")]),v._v(" "),t("h4",{attrs:{id:"特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[v._v("#")]),v._v(" 特点")]),v._v(" "),t("ol",[t("li",[t("strong",[v._v("灵活可拓展")]),v._v("，~~因为语法上只规定了基本格式，用空格分隔单词，换行分隔字段。~~以及传输形式多样，可以是文本，图片，视频等任意数据")]),v._v(" "),t("li",[t("strong",[v._v("请求应答模型")]),v._v("，客户端发出请求，服务端进行响应")]),v._v(" "),t("li",[t("strong",[v._v("无状态")]),v._v("，每次请求都与上一次请求状态无关")]),v._v(" "),t("li",[t("strong",[v._v("可靠传输")]),v._v("，HTTP是基于TCP的，因为TCP是可靠传输协议")])]),v._v(" "),t("p",[v._v("缺点")]),v._v(" "),t("ol",[t("li",[v._v("不安全")])]),v._v(" "),t("h4",{attrs:{id:"各版本差异"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#各版本差异"}},[v._v("#")]),v._v(" 各版本差异")]),v._v(" "),t("h5",{attrs:{id:"http-0-9"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http-0-9"}},[v._v("#")]),v._v(" HTTP 0.9")]),v._v(" "),t("ul",[t("li",[v._v("只支持GET命令传输简单文本")])]),v._v(" "),t("h5",{attrs:{id:"http-1-0"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http-1-0"}},[v._v("#")]),v._v(" HTTP 1.0")]),v._v(" "),t("ol",[t("li",[v._v("新增POST，HEAD命令")]),v._v(" "),t("li",[t("strong",[v._v("任何类型的内容都可以发送")])]),v._v(" "),t("li",[v._v("请求和回应格式改变，除了数据部分，必须加上头信息描述一些元数据")]),v._v(" "),t("li",[v._v("短连接，HTTP/1.0每进行一次HTTP通信，都需要经历建立TCP连接、传输HTTP数据和断开TCP连接三个阶段")]),v._v(" "),t("li",[v._v("每台计算机只能绑定一个域名，所以请求消息中的 URL 并没有传递主机名（hostname）")])]),v._v(" "),t("h5",{attrs:{id:"http-1-1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http-1-1"}},[v._v("#")]),v._v(" HTTP 1.1")]),v._v(" "),t("p",[v._v("HTTP 1.1是目前最为主流的HTTP 协议版本")]),v._v(" "),t("ol",[t("li",[t("strong",[v._v("持久化连接")]),v._v("，即TCP连接默认不关闭，可以被多个请求复用，不用声明Connection: keep-alive")]),v._v(" "),t("li",[v._v("新增PUT,DELETE,OPTION,PATCH方法")]),v._v(" "),t("li",[v._v("引入"),t("strong",[v._v("管道机制")]),v._v("，将多个HTTP请求整批提交，不用等待服务端的响应")]),v._v(" "),t("li",[v._v("支持"),t("strong",[v._v("断点续传")]),v._v("，通过请求头中的Range实现。")]),v._v(" "),t("li",[v._v("使用了"),t("strong",[v._v("虚拟网络")]),v._v("，在一台物理服务器上可以存在多个虚拟主机（域名），并且它们共享一个IP地址。")])]),v._v(" "),t("p",[v._v("缺点")]),v._v(" "),t("ol",[t("li",[t("p",[t("strong",[v._v("队头阻塞")]),v._v("仍然存在。管道机制虽然可以整批发送请求，不过服务器依然需要根据请求顺序来回复浏览器的请求。可以通过并发连接缓解，因为HTTP协议和浏览器对连接数量的限制，还可以通过域名分片使多个域名指向同一个服务器提高连接数。但并不能从根本上解决问题，耗费资源。")]),v._v(" "),t("blockquote",[t("p",[t("strong",[v._v("队头阻塞")]),v._v("：对于每一个HTTP请求而言，这些任务是会被放入一个任务队列中串行执行的，一旦队首任务请求太慢时，就会阻塞后面的请求处理，这就是"),t("code",[v._v("HTTP队头阻塞")]),v._v("问题。")])])]),v._v(" "),t("li",[t("p",[v._v("Header不会压缩，网络流量浪费")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("单向请求：")]),v._v(" 只能单向请求，客户端请求什么，服务器返回什么；")])])]),v._v(" "),t("h5",{attrs:{id:"http2-0"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http2-0"}},[v._v("#")]),v._v(" HTTP2.0")]),v._v(" "),t("ol",[t("li",[v._v("二进制分帧")]),v._v(" "),t("li",[v._v("头部压缩")]),v._v(" "),t("li",[v._v("多路复用")]),v._v(" "),t("li",[v._v("服务器推送")]),v._v(" "),t("li",[v._v("请求优先级")])]),v._v(" "),t("p",[t("strong",[v._v("二进制分帧")])]),v._v(" "),t("p",[v._v("HTTP采用二进制传输数据，而非HTTP1.x的文本格式，二进制解析起来更高效。")]),v._v(" "),t("p",[v._v("**在HTTP2.0中帧是数据传输的最小单位，以二进制代替明文传输，原本的报文消息被划分为更小的帧。**帧分为两种Headers Frame和Data Frame。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/a2547555298/imags/raw/master/1658dc4b44118517.png",alt:"image"}})]),v._v(" "),t("p",[t("strong",[v._v("多路复用")])]),v._v(" "),t("p",[v._v("多路复用指一个域名上的请求"),t("strong",[v._v("共用一个TCP连接")]),v._v(",在TCP连接上每发起一个请求，就会建立一个"),t("strong",[v._v("数据流")]),v._v("。")]),v._v(" "),t("p",[v._v("请求/响应会分成多个帧在"),t("strong",[v._v("stream")]),v._v("上传输，每个帧都有对应的stram Id，在收到帧的时候会根据strem id拼"),t("strong",[v._v("成完整的HTTP报文。"),t("strong",[v._v("因此可以让多个请求可以")]),v._v("同时进行")]),v._v("，提高数据传输效率。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/a2547555298/imags/raw/master/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8.png",alt:"img"}})]),v._v(" "),t("p",[t("strong",[v._v("实现机制")])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/a2547555298/imags/raw/master/50cd9acb229f4e3b85523dcd600d1544~tplv-k3u1fbpfcp-zoom-1.image",alt:"img"}})]),v._v(" "),t("p",[v._v("添加了一个"),t("strong",[v._v("二进制分帧层")]),v._v("，将消息传到二进制分帧层进行分帧和拼接。通过引用二进制分帧层，HTTP层语义依然是一样的，改变的只是传输方式。")]),v._v(" "),t("p",[t("strong",[v._v("头部压缩")])]),v._v(" "),t("p",[v._v("HTTP1.x的多个请求和响应中header中的字段有很多重复的，例如"),t("code",[v._v("method:get")]),v._v("、"),t("code",[v._v("status:200")]),v._v("等等。这些字段消耗不必要的资源，因此HTTP2.0使用Hpack进行压缩")]),v._v(" "),t("p",[t("strong",[v._v("Hpack")])]),v._v(" "),t("p",[v._v("维护索引表，传输过程使用索引表示消息，让Header字段得到极大的精简和复用")]),v._v(" "),t("ul",[t("li",[v._v("消息发送和接受端共同维护一份静态表和一份动态表")]),v._v(" "),t("li",[v._v("每次发送时，发送方根据"),t("strong",[v._v("字典内容")]),v._v("和"),t("strong",[v._v("哈夫曼编码")]),v._v("压缩消息头部")]),v._v(" "),t("li",[v._v("接受方根据字典解码，并且根据指令判断是否要更新动态表")])]),v._v(" "),t("p",[t("strong",[v._v("静态表")]),v._v("：只包含常见的"),t("strong",[v._v("头部名称")]),v._v("以及"),t("strong",[v._v("头部名称和值的组合")])]),v._v(" "),t("p",[t("strong",[v._v("动态表")]),v._v("：动态表最初是一个空表，当每次解压头部的时候，根据指令动态维护")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/a2547555298/imags/raw/master/Hpack.png",alt:"img"}})]),v._v(" "),t("p",[t("a",{attrs:{href:"https://segmentfault.com/a/1190000017011816",target:"_blank",rel:"noopener noreferrer"}},[v._v("详解http-2头部压缩算法"),t("OutboundLink")],1)]),v._v(" "),t("p",[t("strong",[v._v("服务器推送")])]),v._v(" "),t("p",[v._v("浏览器发送一个请求，服务器主动向浏览器推送与这个请求相关的资源，这样浏览器就不用发起后续请求。")]),v._v(" "),t("blockquote",[t("p",[v._v("HTTP/2.0 中由于支持了服务器推送，因此当用户请求了 HTML 时，服务器可以将这个 HTML 文件及可能会用到的静态资源一并推送给客户端。")])]),v._v(" "),t("p",[t("strong",[v._v("请求优先级")])]),v._v(" "),t("p",[v._v("可以设置stram的优先级，"),t("strong",[v._v("让服务端先处理重要资源，优化用户体验。")])]),v._v(" "),t("p",[t("strong",[v._v("缺点")]),v._v("："),t("code",[v._v("HTTP 2")]),v._v("中，多个请求在一个 TCP 中的，出现了丢包时，"),t("code",[v._v("HTTP 2")]),v._v("的表现反倒不如"),t("code",[v._v("HTTP 1.1")]),v._v("了。因为 TCP 为了保证可靠传输，有个特别的“丢包重传”机制，丢失的包必须要"),t("strong",[v._v("等待")]),v._v("重新传输确认，"),t("code",[v._v("HTTP 2")]),v._v("出现丢包时，整个 TCP 都要开始等待重传，那么就会阻塞该 TCP 连接中的所有请求。而对于 "),t("code",[v._v("HTTP 1.1")]),v._v(" 来说，可以开启多个 TCP 连接，出现这种情况反倒只会影响其中一个连接，剩余的 TCP 连接还可以正常传输数据")]),v._v(" "),t("p",[t("a",{attrs:{href:"https://juejin.cn/post/6855470356657307662#heading-2",target:"_blank",rel:"noopener noreferrer"}},[v._v("HTTP1、HTTP2、HTTP3"),t("OutboundLink")],1)]),v._v(" "),t("p",[t("a",{attrs:{href:"https://juejin.cn/post/6844903667569541133#refetch",target:"_blank",rel:"noopener noreferrer"}},[v._v("HTTP2 详解"),t("OutboundLink")],1)]),v._v(" "),t("p",[t("a",{attrs:{href:"https://juejin.cn/post/6844903667569541133#heading-8",target:"_blank",rel:"noopener noreferrer"}},[v._v("HTTP2 详解"),t("OutboundLink")],1)]),v._v(" "),t("h4",{attrs:{id:"报文结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#报文结构"}},[v._v("#")]),v._v(" 报文结构")]),v._v(" "),t("p",[v._v("分为请求报文及响应报文，分别如下：")]),v._v(" "),t("p",[t("strong",[v._v("请求报文：")])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/a2547555298/imags/raw/master/006tNbRwgy1ga6fwmszi0j30it08kmxj.jpg",alt:""}})]),v._v(" "),t("p",[t("strong",[v._v("响应报文：")])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/a2547555298/imags/raw/master/%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87.png",alt:""}})]),v._v(" "),t("p",[t("strong",[v._v("URL")]),v._v("统一资源定位符的简称，Uniform Resource Locator，常常被称为网址，是因特网上标准的资源地址。")]),v._v(" "),t("p",[t("strong",[v._v("组成")])]),v._v(" "),t("p",[v._v("通用的格式：scheme://host[:port]/path/…/?query#anchor")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("名称")]),v._v(" "),t("th",[v._v("功能")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("scheme")]),v._v(" "),t("td",[v._v("访问服务器以获取资源时要使用哪种协议，比如：http，https 和 FTP 等")])]),v._v(" "),t("tr",[t("td",[v._v("host")]),v._v(" "),t("td",[v._v("HTTP 服务器的 IP 地址或者域名")])]),v._v(" "),t("tr",[t("td",[v._v("port")]),v._v(" "),t("td",[v._v("HTTP 服务器的默认端口是 80，HTTPS默认端口是443，这种情况下端口号可以省略，如果使用了别的端口，必须指明。不同的端口，你可以认为是不同的应用程序。")])]),v._v(" "),t("tr",[t("td",[v._v("path")]),v._v(" "),t("td",[v._v("访问资源的路径")])]),v._v(" "),t("tr",[t("td",[v._v("query-string")]),v._v(" "),t("td",[v._v("发给 http 服务器的数据")])]),v._v(" "),t("tr",[t("td",[v._v("anchor")]),v._v(" "),t("td",[v._v("锚点")])])])]),v._v(" "),t("p",[v._v("https://www.baidu.com/s?tn=baidu&bar=&wd=TianTian")]),v._v(" "),t("p",[t("strong",[v._v("URL 编码")])]),v._v(" "),t("ul",[t("li",[v._v("URL 只能使用 "),t("a",{attrs:{href:"https://www.w3school.com.cn/tags/html_ref_ascii.asp",target:"_blank",rel:"noopener noreferrer"}},[v._v("ASCII 字符集"),t("OutboundLink")],1),v._v("来通过因特网进行发送。")]),v._v(" "),t("li",[v._v("由于 URL 常常会包含 ASCII 集合之外的字符，URL 必须转换为有效的 ASCII 格式。")]),v._v(" "),t("li",[v._v('URL 编码使用 "%" 其后跟随两位的十六进制数来替换非 ASCII 字符。')]),v._v(" "),t("li",[v._v("URL 不能包含空格。URL 编码通常使用 + 来替换空格。")])]),v._v(" "),t("p",[v._v("举个例子👇")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("天天`转换为有效的ASCII格式就是`%CC%EC%CC%EC\n")])])]),t("h4",{attrs:{id:"header"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#header"}},[v._v("#")]),v._v(" header")]),v._v(" "),t("ul",[t("li",[t("p",[t("strong",[v._v("通用首部字段（General Header Fields）")])]),v._v(" "),t("p",[v._v("请求报文和响应报文两方都会使用的首部。")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"left"}},[v._v("首部字段名")]),v._v(" "),t("th",[v._v("作用")]),v._v(" "),t("th",{staticStyle:{"text-align":"center"}},[v._v("说明")])])]),v._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"left"}},[v._v("Cache-Control")]),v._v(" "),t("td",[v._v("控制缓存的行为")]),v._v(" "),t("td",{staticStyle:{"text-align":"center"}})]),v._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[v._v("Connection")]),v._v(" "),t("td",[v._v("连接的管理")]),v._v(" "),t("td",{staticStyle:{"text-align":"center"}},[v._v("keep-alive表示要求服务器不要关闭TCP连接，close表示明确要求关闭连接，1.1开始默认值是keep-alive")])]),v._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[v._v("Transfer-Encoding")]),v._v(" "),t("td",[v._v("指定报文主体的传输编码方式")]),v._v(" "),t("td",{staticStyle:{"text-align":"center"}},[v._v("chunked表示采用分块传输编码，有该字段则无需使用Content-Length字段。")])]),v._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[v._v("Upgrade")]),v._v(" "),t("td",[v._v("升级为其他协议")]),v._v(" "),t("td",{staticStyle:{"text-align":"center"}})])])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("请求首部报文（Request Headers Fields）")])]),v._v(" "),t("p",[v._v("从客户端向服务端发送请求报文时使用的首部。补充了请求的附加内容，客户端信息，响应内容相关优先级等信息。")]),v._v(" "),t("h3",{attrs:{id:"请求首部字段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#请求首部字段"}},[v._v("#")]),v._v(" 请求首部字段")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("首部字段名")]),v._v(" "),t("th",[v._v("说明")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("Accept")]),v._v(" "),t("td",[v._v("客户端可以识别的内容类型列表")])]),v._v(" "),t("tr",[t("td",[v._v("Accept-Encoding")]),v._v(" "),t("td",[v._v("优先的内容编码")])]),v._v(" "),t("tr",[t("td",[v._v("Expect")]),v._v(" "),t("td",[v._v("期待服务器的特定行为")])]),v._v(" "),t("tr",[t("td",[v._v("Host")]),v._v(" "),t("td",[v._v("请求资源所在服务器")])]),v._v(" "),t("tr",[t("td",[v._v("If-Modified-Since")]),v._v(" "),t("td",[v._v("比较资源的更新时间")])]),v._v(" "),t("tr",[t("td",[v._v("If-None-Match")]),v._v(" "),t("td",[v._v("比较实体标记")])]),v._v(" "),t("tr",[t("td",[v._v("Range")]),v._v(" "),t("td",[v._v("实体的字节范围请求")])]),v._v(" "),t("tr",[t("td",[v._v("User-Agent")]),v._v(" "),t("td",[v._v("HTTP客户端程序的信息")])])])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("响应首部字段（Response Header Fields）")])]),v._v(" "),t("p",[v._v("从服务器端向客户端返回响应报文时使用的首部。补充了响应的附加内容，也会要求客户端附加额外的内容信息。")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("实体首部字段（Entity Header Fields）")])]),v._v(" "),t("p",[v._v("针对请求报文和响应报文的实体部分使用的首部。补充了资源内容更新时间等与实体相关的信息。")]),v._v(" "),t("p",[v._v("请求头和响应头的部分字段：")])]),v._v(" "),t("li",[t("p",[v._v("Host：指定服务器域名，可用来区分访问一个服务器上的不同服务")])]),v._v(" "),t("li",[t("p",[v._v("User-Agent：用户代理，是服务器能识别客户端的操作系统（Android、IOS、WEB）及相关的信息。作用是帮助服务器区分客户端，并且针对不同客户端让用户看到不同数据，做不同操作。")])]),v._v(" "),t("li",[t("p",[v._v("Content-Type：服务器告诉客户端数据的格式，常见的值有text/plain，image/jpeg，image/png，video/mp4，application/json，application/zip。这些数据类型总称为MIME TYPE。")])]),v._v(" "),t("li",[t("p",[v._v("Content-Encoding：服务器数据压缩方式")])]),v._v(" "),t("li",[t("p",[v._v("Content-Length：声明数据的长度，请求和回应头部都可以使用该字段。")])])]),v._v(" "),t("p",[t("strong",[v._v("数据传输")])]),v._v(" "),t("p",[v._v("分为**「定长数据」** 与 "),t("strong",[v._v("「不定长数据」")])]),v._v(" "),t("p",[v._v("对于定长的数据包而言，发送端在发送数据的过程中，需要设置"),t("code",[v._v("Content-Length")]),v._v(",来指明发送数据的长度。")]),v._v(" "),t("ul",[t("li",[v._v("Content-Length如果存在并且有效的话，则必须和消息内容的传输长度完全一致，也就是说，如果过短就会截断，过长的话，就会导致超时。")]),v._v(" "),t("li",[v._v("如果采用短链接的话，直接可以通过服务器关闭连接来确定消息的传输长度。")]),v._v(" "),t("li",[v._v("在HTTP/1.1版本中，如果是Keep-alive的话，chunked优先级高于"),t("code",[v._v("Content-Length")]),v._v(",若是非Keep-alive，Content-Length可有可无。")])]),v._v(" "),t("p",[t("strong",[v._v("不定长数据")])]),v._v(" "),t("p",[v._v("现在采用最多的就是HTTP/1.1版本，来完成传输数据，在保存Keep-alive状态下，当数据是不定长的时候，我们需要设置新的头部字段👇")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("Transfer-Encoding: chunked\n")])])]),t("p",[v._v("通过chunked机制，可以完成对不定长数据的处理，当然了，你需要知道的是")]),v._v(" "),t("ul",[t("li",[v._v("如果头部信息中有"),t("code",[v._v("Transfer-Encoding")]),v._v(",优先采用Transfer-Encoding里面的方法来找到对应的长度。")]),v._v(" "),t("li",[v._v("如果设置了Transfer-Encoding，那么Content-Length将被忽视。")]),v._v(" "),t("li",[v._v("使用长连接的话，会持续的推送动态内容。")])]),v._v(" "),t("h4",{attrs:{id:"常见状态码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见状态码"}},[v._v("#")]),v._v(" 常见状态码")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("状态码")]),v._v(" "),t("th",[v._v("类别")]),v._v(" "),t("th",[v._v("描述")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("1XX")]),v._v(" "),t("td",[v._v("信息性状态码")]),v._v(" "),t("td",[v._v("接收的请求正在处理")])]),v._v(" "),t("tr",[t("td",[v._v("2XX")]),v._v(" "),t("td",[v._v("成功状态码")]),v._v(" "),t("td",[v._v("请求正常处理完毕")])]),v._v(" "),t("tr",[t("td",[v._v("3XX")]),v._v(" "),t("td",[v._v("重定向状态码")]),v._v(" "),t("td",[v._v("需要进行附加操作以完成请求")])]),v._v(" "),t("tr",[t("td",[v._v("4XX")]),v._v(" "),t("td",[v._v("客户端错误状态码")]),v._v(" "),t("td",[v._v("服务器无法处理请求")])]),v._v(" "),t("tr",[t("td",[v._v("5XX")]),v._v(" "),t("td",[v._v("服务端错误状态码")]),v._v(" "),t("td",[v._v("服务器处理请求出错")])])])]),v._v(" "),t("p",[t("strong",[v._v("2xx成功：")])]),v._v(" "),t("ul",[t("li",[t("code",[v._v("204 No content")]),v._v(" 表示请求成功，但没有资源可返回")]),v._v(" "),t("li",[t("code",[v._v("206 Partial Content")]),v._v(" 该状态码表示客户端进行了范围请求，服务器成功执行，响应中包含了"),t("code",[v._v("Content-Length")]),v._v("指定的实体内容。")])]),v._v(" "),t("p",[t("strong",[v._v("3xx重定向：")])]),v._v(" "),t("ul",[t("li",[t("code",[v._v("301 Moved Permantenly")]),v._v("：表示永久性重定向，也就是这个资源被分配了新的 URI，以后需要使用这个资源所指的 URI，此时需要通过 "),t("code",[v._v("Location")]),v._v(" 中拿到的 URI 重新请求。")]),v._v(" "),t("li",[t("code",[v._v("302 Found")]),v._v("：表示临时性重定向，希望用户在本次中使用 "),t("code",[v._v("Location")]),v._v(" 指定的 URI 使用。")]),v._v(" "),t("li",[t("code",[v._v("304 Not Modified")]),v._v("：表示资源没有被修改（与重定向无关）。"),t("s",[v._v("需要配合 "),t("code",[v._v("If-Match")]),v._v("，"),t("code",[v._v("If-ModifiedSince")]),v._v("，"),t("code",[v._v("If-None-Match")]),v._v("，"),t("code",[v._v("If-Range")]),v._v("，"),t("code",[v._v("If-Unmodified-Since")]),v._v(" 等 Header 使用。")])])]),v._v(" "),t("p",[t("strong",[t("em",[v._v("4XX 客户端错误")]),v._v("：")])]),v._v(" "),t("ul",[t("li",[t("code",[v._v("400 Bad Request")]),v._v("：说明请求报文存在语法错误，需修改请求的内容后再次发送。")]),v._v(" "),t("li",[t("code",[v._v("401 Unauthorized")]),v._v("：表示发送的请求需要有通过 HTTP 认证的信息，响应的 Header 中会包含一个 "),t("code",[v._v("WWW-Authenticate")]),v._v(" Header 用来质询用户信息。（例如浏览器有时候弹出的认证对话框）")]),v._v(" "),t("li",[t("code",[v._v("403 Forbidden")]),v._v("：表示服务器拒绝了客户端对该资源的访问")]),v._v(" "),t("li",[t("code",[v._v("404 Not Found")]),v._v(" ：我们最常见的一个 4XX 了，表示服务器上找不到对应的资源。")])]),v._v(" "),t("p",[t("strong",[t("em",[v._v("5XX 服务器错误")]),v._v("：")])]),v._v(" "),t("ul",[t("li",[t("code",[v._v("500 Internal Server Error")]),v._v("：表示服务端执行请求时出现了错误。")]),v._v(" "),t("li",[t("code",[v._v("503 Service Unavailable")]),v._v("：表示服务器暂时处于超负载或维护状态，可能会包含 "),t("code",[v._v("RetryAfter")]),v._v(" 这个 Header 来告诉客户端何时能够进行访问。")])]),v._v(" "),t("h4",{attrs:{id:"请求方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#请求方法"}},[v._v("#")]),v._v(" 请求方法")]),v._v(" "),t("ul",[t("li",[v._v("GET：请求指定的页面信息，并返回实体主体。")]),v._v(" "),t("li",[v._v("HEAD：请求获取由Request-URI所标识的资源的响应消息报头")]),v._v(" "),t("li",[v._v("POST：向指定资源提交数据"),t("strong",[v._v("进行处理请求")]),v._v("（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改。")]),v._v(" "),t("li",[v._v("PUT： 请求服务器存储一个资源，并用Request-URI作为其标识（修改数据）")]),v._v(" "),t("li",[v._v("DELETE： 请求服务器删除对应所标识的资源")]),v._v(" "),t("li",[v._v("TRACE： 请求服务器回送收到的请求信息，主要用于测试或诊断")]),v._v(" "),t("li",[v._v("OPTIONS： 列出可对资源实行的请求方法，用来跨域请求。可以查看服务器的性能。")]),v._v(" "),t("li",[v._v("CONNECT：1.1 协议中预留给能够将连接改为管道方式的代理服务器")]),v._v(" "),t("li",[v._v("PATCH：对 PUT 方法的补充，用来对已知资源进行局部更新 。")])]),v._v(" "),t("p",[t("strong",[v._v("从输入网址到获得页面的过程？")])]),v._v(" "),t("ul",[t("li",[v._v("浏览器查询 DNS，获取域名对应的IP地址；")]),v._v(" "),t("li",[v._v("浏览器获得域名对应的IP地址以后，浏览器向服务器请求建立链接，发起三次握手；")]),v._v(" "),t("li",[v._v("TCP/IP链接建立起来后，浏览器向服务器发送HTTP请求；")]),v._v(" "),t("li",[v._v("服务器接收到这个请求，并根据路径参数映射到特定的请求处理器进行处理，并将处理结果及相应的视图返回给浏览器；")]),v._v(" "),t("li",[v._v("浏览器解析并渲染视图，若遇到对js文件、css文件及图片等静态资源的引用，则重复上述步骤并向服务器请求这些资源；")]),v._v(" "),t("li",[v._v("浏览器根据其请求到的资源、数据渲染页面，最终向用户呈现一个完整的页面。")])]),v._v(" "),t("h4",{attrs:{id:"常见问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见问题"}},[v._v("#")]),v._v(" 常见问题")]),v._v(" "),t("h5",{attrs:{id:"get和post"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#get和post"}},[v._v("#")]),v._v(" get和post")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/a2547555298/imags/raw/master/get%E5%92%8Cpost%E5%8C%BA%E5%88%AB.png",alt:"w3school"}})]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("通常")]),v._v("GET用来获取数据，post用来提交数据")]),v._v(" "),t("li",[v._v("GET参数长度在浏览器和服务器有限制，通常不超过2k字节，post无限制")]),v._v(" "),t("li",[v._v("对参数数据类型GET只接受ASCII字符，而POST没有限制。")]),v._v(" "),t("li",[v._v("GET请求参数会保留在浏览器历史记录中。")]),v._v(" "),t("li",[v._v("GET是幂等的，幂等就是指同一个请求执行多次和仅执行一次的效果完全相等。")]),v._v(" "),t("li",[v._v("GET参数通过URL传递，POST放在Request body中。")]),v._v(" "),t("li",[v._v("GET的回退是无害的，post会被重新提交")])]),v._v(" "),t("p",[t("strong",[v._v("get和post没有本质的区别")]),v._v("，只是"),t("strong",[v._v("报文格式")]),v._v("的不同。get和post是http协议中的两种方法，而http协议是基于TCP/IP的应用层协议，无论是get还是post都是在用一个传输层协议上传输，没有区别。")]),v._v(" "),t("p",[v._v("报文格式上：")]),v._v(" "),t("ul",[t("li",[v._v("不带参数时，仅第一行方法名不同，一个是GET，一个是POST。")]),v._v(" "),t("li",[v._v("带参数时，在约定中，GET方法的参数应该放在url中，POST方法的参数应该放在body中。")])]),v._v(" "),t("h5",{attrs:{id:"代理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代理"}},[v._v("#")]),v._v(" 代理")]),v._v(" "),t("p",[t("strong",[v._v("正向代理")])]),v._v(" "),t("p",[v._v("常说的代理就是指正向代理，正向代理的过程，它隐藏了真实的请求客户端，服务端不知道真实的客户端是谁，客户端请求的服务都被代理服务器代替来请求。")]),v._v(" "),t("p",[t("strong",[v._v("反向代理")])]),v._v(" "),t("p",[v._v("这种代理模式下，它隐藏了真实的服务端，当我们向一个网站发起请求的时候，背后可能有成千上万台服务器为我们服务，具体是哪一台，我们不清楚，我们只需要知道反向代理服务器是谁就行，而且反向代理服务器会帮我们把请求转发到真实的服务器那里去，一般而言反向代理服务器一般用来实现负载平衡。")]),v._v(" "),t("h5",{attrs:{id:"负载平衡"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#负载平衡"}},[v._v("#")]),v._v(" 负载平衡")]),v._v(" "),t("ul",[t("li",[v._v("一种是使用反向代理的方式，用户的请求都发送到反向代理服务上，然后由反向代理服务器来转发请求到真实的服务器上，以此来实现集群的负载平衡。")]),v._v(" "),t("li",[v._v("另一种是 DNS 的方式，DNS 可以用于在冗余的服务器上实现负载平衡。因为现在一般的大型网站使用多台服务器提供服务，因此一个域名可能会对应多个服务器地址。当用户向网站域名请求的时候，DNS 服务器返回这个域名所对应的服务器 IP 地址的集合，但在每个回答中，会循环这些 IP 地址的顺序，用户一般会选择排在前面的地址发送请求。以此将用户的请求均衡的分配到各个不同的服务器上，这样来实现负载均衡。这种方式有一个缺点就是，由于 DNS 服务器中存在缓存，所以有可能一个服务器出现故障后，域名解析仍然返回的是那个 IP 地址，就会造成访问的问题。")])]),v._v(" "),t("h4",{attrs:{id:"中间人攻击"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#中间人攻击"}},[v._v("#")]),v._v(" 中间人攻击")]),v._v(" "),t("p",[t("strong",[v._v("中间人攻击是一种间接的入侵攻击")]),v._v("，这种攻击模式是将一台计算机"),t("strong",[v._v("虚拟放置在网络连接中的两台通信计算机之间")]),v._v("，这台计算机就称为“中间人”。")]),v._v(" "),t("p",[v._v("黑客利用这台“中间人”计算机"),t("strong",[v._v("模拟")]),v._v("相互通信的一端或者两端，使“中间人”能够与原通信计算机建立活动连接并允许其"),t("strong",[v._v("读取或修改")]),v._v("通信两端所传递的信息。")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("DNS欺骗")]),v._v(" "),t("p",[v._v("攻击者往往可以通过入侵DNS服务器，或是篡改用户本地hosts文件，然后把查询的IP地址设为攻击者的IP地址，从而截获到用户发出的请求。截获请求以后，根据不同目的，攻击者既可以引导用户访问一个"),t("strong",[v._v("假网站")]),v._v("。也可以把用户请求依旧转发给目标服务器，仅仅实现"),t("strong",[v._v("监听的目的")]),v._v("。")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("APR欺骗")])]),v._v(" "),t("p",[v._v("DNS欺骗是在广域网中的拦截用户请求，那么APR欺骗就是在局域网中的拦截用户请求。ARP（Address Resolution Protocol）地址解析协议，是一种将IP地址转化成物理地址的协议。")]),v._v(" "),t("p",[v._v("攻击者利用了APR协议的漏洞，通过局域网内部的一台主机（IP并不是123），冒充主机B，向主机A发送自己的MAC地址。主机A接到消息以后，无法识别消息是真的来自主机B，还是来自一个冒名顶替者，只能照样把接受到的新MAC地址存入ARP缓存表，取代原先的记录。")]),v._v(" "),t("p",[v._v("下一次，当主机A想要向主机B发送请求的时候，会先查询自己的ARP缓存表，查出主机B的MAC地址是def（本来应该是abc），结果把请求发给了主机D。从而让攻击者拦截到了请求信息。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/a2547555298/imags/raw/master/19c953ab5c764bd2be3eaf18195f6e97_th.png",alt:"img"}})])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("代理服务器")])])])]),v._v(" "),t("p",[t("strong",[v._v("解决方法：")])]),v._v(" "),t("ul",[t("li",[v._v("使用DNSSEC机制")]),v._v(" "),t("li",[v._v("使用防火墙和杀毒软件")]),v._v(" "),t("li",[v._v("使用HTTPS协议")])]),v._v(" "),t("h3",{attrs:{id:"https"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#https"}},[v._v("#")]),v._v(" HTTPS")]),v._v(" "),t("p",[v._v("HTTPS指 HTTP over SSL，HTTPS并"),t("strong",[v._v("不是个新的应用层协议")]),v._v("。只是在"),t("strong",[v._v("HTTP")]),v._v("和"),t("strong",[v._v("TCP")]),v._v("间加了一层"),t("strong",[v._v("SSL")]),v._v("，同过SSL进行"),t("strong",[v._v("加密，身份验证，完整性校验")]),v._v("功能，从而解决HTTP存在的"),t("strong",[v._v("窃听，伪装，篡改")]),v._v("等问题。")]),v._v(" "),t("p",[t("strong",[v._v("SSL")]),v._v("(Secure Socket Layer，安全套接字层)")]),v._v(" "),t("p",[t("strong",[v._v("TLS")]),v._v("(Transport Layer Security，传输层安全)："),t("strong",[v._v("其前身是 SSL，SSL升级版")])]),v._v(" "),t("p",[t("strong",[v._v("窃听问题")]),v._v("：HTTPS的加密采用了对称与非对称加密的"),t("strong",[v._v("混合加密")]),v._v("，来保证报文的安全性，不会被中间人窃听。通过对称加密对报文进行加密，而对称加密密钥由非对称加密传输，从而保证安全性")]),v._v(" "),t("p",[t("strong",[v._v("身份验证："),t("strong",[v._v("为了保证公钥来自目标服务端，需要通过")]),v._v("CA机构颁发的数字证书进行认证")]),v._v("。数字证书中包含"),t("strong",[v._v("服务端公钥信息和数字签名")]),v._v("，并用CA机构的私钥进行加密。在操作系统，浏览器中通常自带CA机构的公钥，只需要通过这些公钥进行解密，即可得到服务端公钥")]),v._v(" "),t("p",[t("strong",[v._v("完整性校验：")]),v._v(" 文本用Hash函数生成消息摘要，用CA私钥加密生成数字签名，与原文一起发送给接受者。接收者收到消息后用同样的Hash函数产生摘要，将这两个摘要进行对比，即可验证数据完整性，防止篡改。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/a2547555298/imags/raw/master/HTTPS%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86",alt:"图片"}})]),v._v(" "),t("p",[t("strong",[v._v("证书")]),v._v("包含以下信息：申请者公钥、申请者的组织信息和个人信息、签发机构 CA的信息、有效时间、证书序列号等信息的明文，同时包含一个签名。其中签名的产生算法：首先，使用散列函数计算公开的明文信息的信息摘要，然后，采用 CA的私钥对信息摘要进行加密，密文即签名;")]),v._v(" "),t("p",[v._v("工作过程")]),v._v(" "),t("ol",[t("li",[v._v("获取公钥：客户端向服务端发起HTTPS请求，端口为443.服务端返回CA机构颁发的数字证书")]),v._v(" "),t("li",[v._v("身份验证：客户端收到数字证书通过CA机构公钥进行解密，从而进行身份验证并获取公钥")]),v._v(" "),t("li",[v._v("生成对称密钥：客户端验证公钥安全后，生成一串随机数作为对称密钥")]),v._v(" "),t("li",[v._v("加密发送对称密钥：客户端用服务端公钥对对称密钥进行加密，发送给服务端")]),v._v(" "),t("li",[v._v("返回数据：服务端用客户端生成的对称密钥对数据进行加密，发送给客户端")]),v._v(" "),t("li",[v._v("解析数据：客户端收到数据后，进行对称解密")])]),v._v(" "),t("p",[t("strong",[v._v("HTTP 与 HTTPS 的区别")])]),v._v(" "),t("ul",[t("li",[v._v("HTTPS加密传输比HTTP更加安全")]),v._v(" "),t("li",[v._v("HTTPS需要用到SSL证书，而HTTP不用;")]),v._v(" "),t("li",[v._v("HTTPS标准端口443，HTTP标准端口80;")]),v._v(" "),t("li",[v._v("Http协议建立连接的过程比Https协议快。因为Https除了Tcp三次握手，还要经过SSL握手。连接建立之后数据传输速度，二者无明显区别。")])]),v._v(" "),t("p",[t("strong",[v._v("既然 HTTPS 具有安全可靠的特性，为何没有被广泛应用呢？")])]),v._v(" "),t("ol",[t("li",[v._v("HTTPS虽然提高了HTTP请求安全性，但同时加密，解密，证书的验证带来了效率影响")]),v._v(" "),t("li",[v._v("很多服务器对安全性要求没这么敏感")]),v._v(" "),t("li",[v._v("CA机构提供的数字证书需要花钱购买")])]),v._v(" "),t("h4",{attrs:{id:"ssl握手过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ssl握手过程"}},[v._v("#")]),v._v(" SSL握手过程")]),v._v(" "),t("img",{staticStyle:{zoom:"200%"},attrs:{src:"https://gitee.com/a2547555298/imags/raw/master/ssl%E6%8F%A1%E6%89%8B%E8%BF%87%E7%A8%8B.png",alt:"图片"}}),v._v(" "),t("ul",[t("li",[t("p",[t("strong",[v._v("Client Hello")]),v._v("\t客户端给出协议版本号、一个客户端随机数A（Client random）以及客户端支持的加密方式")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("Server Hello")]),v._v("    服务端确认双方使用的加密方式，并给出数字证书、一个服务器生成的随机数B（Server random）")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("Client Key Exchange")]),v._v(" 客户端确认数字证书有效，生成一个新的随机数C（Premaster secret），使用证书中的公钥对C加密，发送给服务端")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("Server Finish")]),v._v("  服务端在接收到客户端传过来的Premaster secret加密数据之后，使用私钥对这段加密数据进行解密，并对数据进行验证，也会使用跟客户端同样的方式生成"),t("strong",[v._v("会话密钥")]),v._v("，一切准备好之后，会给客户端发送一个ChangeCipherSpec（加密算法协议），告知客户端已经切换到协商过的加密套件状态，准备使用加密套件和session secret（"),t("strong",[v._v("会话密钥")]),v._v("）加密数据了。之后，服务端也会使用session secret加密后一段Finish消息发送给客户端，以验证之前通过握手建立起来的加解密通道是否成功。")]),v._v(" "),t("p",[v._v("根据之前的握手信息，如果客户端和服务端都能对Finish信息进行正常加解密且消息正确的被验证，则说明握手通道已经建立成功，接下来，双方可以使用上面产生的session secret对数据进行加密传输了。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/a2547555298/imags/raw/master/image-20210405212654930.png",alt:"image-20210405212654930"}})])])]),v._v(" "),t("blockquote",[t("p",[v._v("客户端和服务器根据约定的加密方法，使用三个随机数ABC，生成对话秘钥，之后的通信都用这个对话秘钥进行加密。")]),v._v(" "),t("p",[v._v("TLS 详解 https://juejin.cn/post/6844903667577929742")])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/a2547555298/imags/raw/master/ssl.png",alt:"image"}})]),v._v(" "),t("p",[t("strong",[v._v("RSA算法")])]),v._v(" "),t("p",[t("strong",[v._v("DH算法的握手")])]),v._v(" "),t("p",[v._v("DH也是一种非对称加密算法")]),v._v(" "),t("p",[t("img",{attrs:{src:"http://www.ruanyifeng.com/blogimg/asset/2014/bg2014092007.png",alt:"img"}})]),v._v(" "),t("p",[v._v("第三步和第四步由传递Premaster secret变成了传递DH算法所需的参数，然后双方各自算出Premaster secret。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/a2547555298/imags/raw/master/image-20210224234752296.png",alt:"image-20210224234752296"}})]),v._v(" "),t("p",[v._v("共享明文参数P，G，双方都产生一个随机数A，B私钥。")]),v._v(" "),t("p",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s/G-mw8oJHWgcSOAV8Vp6bPw",target:"_blank",rel:"noopener noreferrer"}},[v._v("深入理解https工作原理"),t("OutboundLink")],1)]),v._v(" "),t("h3",{attrs:{id:"quic"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#quic"}},[v._v("#")]),v._v(" QUIC")]),v._v(" "),t("p",[v._v("QUIC(Quick UDP Internet Connection)是谷歌推出的一套基于 "),t("strong",[v._v("UDP")]),v._v(" 的传输协议，它实现了 TCP + HTTPS + HTTP/2 的功能，目的是**保证可靠性的同时降低网络延迟。**HTTP/3.0 就将基于 QUIC 协议实现，也就是 HTTP over QUIC。")]),v._v(" "),t("h5",{attrs:{id:"为什么选择-udp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么选择-udp"}},[v._v("#")]),v._v(" 为什么选择 UDP")]),v._v(" "),t("p",[v._v("TCP 协议存在如下的问题：")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("网络环境的不适应")]),v._v("：TCP 协议在网络流行的早期推出，因为那时的网络不像如今这样发达，丢包率十分之高，因此非常迫切地需要一款协议来保证数据的可靠传输。但如今的网络环境已经与当年大不相同了，相对来说非常的可靠，对于 TCP 中的一部分通过性能的损耗而保证可靠性的机制，对我们来说不再是必要的，我们更需要网络协议能带来更高的性能。")]),v._v(" "),t("li",[t("strong",[v._v("TCP 的更新成本过高")]),v._v("：TCP 协议中的一些对网络的优化其实并不是最优解，在目前的角度看来实际上仍有优化的空间。但如果要修改 TCP 协议，它的代价非常之大，因为它的实现往往存在于操作系统的内核中，要对它进行修改意味着需要依赖操作系统内核的更新。")])]),v._v(" "),t("h4",{attrs:{id:"连接迁移"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#连接迁移"}},[v._v("#")]),v._v(" "),t("strong",[v._v("连接迁移")])]),v._v(" "),t("h5",{attrs:{id:"tcp-的连接重连之痛"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp-的连接重连之痛"}},[v._v("#")]),v._v(" "),t("strong",[v._v("tcp 的连接重连之痛")])]),v._v(" "),t("p",[v._v("TCP 连接基于四元组（源 IP、源端口、目的 IP、目的端口），切换网络时至少会有一个因素发生变化，导致连接发生变化。当连接发生变化时，如果还使用原来的 TCP 连接，则会导致连接失败，就得等原来的连接超时后重新建立连接。")]),v._v(" "),t("p",[v._v("QUIC 的连接不受四元组的影响，当这四个元素发生变化时，原连接依然维持。因为QUIC 是基于 UDP 协议的， QUIC 连接不以四元组作为标识。而是使用一个 64 位的随机数，这个随机数被称为 Connection ID，即使 IP 或者端口发生变化，只要 Connection ID 没有变化，那么连接依然可以维持，"),t("strong",[v._v("上层业务逻辑感知不到变化，不会中断，也就不需要重连。")]),v._v("。")]),v._v(" "),t("p",[v._v("这个 ID 是客户端随机产生的，并且长度有 64 位，所以冲突概率非常低。")]),v._v(" "),t("h4",{attrs:{id:"低连接延时"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#低连接延时"}},[v._v("#")]),v._v(" "),t("strong",[v._v("低连接延时")])]),v._v(" "),t("h5",{attrs:{id:"tls-的连接时延问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tls-的连接时延问题"}},[v._v("#")]),v._v(" "),t("strong",[v._v("TLS 的连接时延问题")])]),v._v(" "),t("ol",[t("li",[v._v("TCP 握手需要 1 个 RTT；")]),v._v(" "),t("li",[v._v("TLS 握手，以目前应用最广泛的 TLS 1.2 而言，需要 2 个 RTT。对于非首次建连，可以选择启用会话重用，则可缩小握手时间到 1 个 RTT；")]),v._v(" "),t("li",[v._v("HTTP 业务数据交互，假设 abc.com 的数据在一次交互就能取回来。那么业务数据的交互需要 1 个 RTT；经过上面的过程分析可知，要完成一次简短的 HTTPS 业务数据交互，需要经历：新连接 "),t("strong",[v._v("4RTT + DNS")]),v._v("；会话重用 "),t("strong",[v._v("3RTT + DNS")]),v._v("。")])]),v._v(" "),t("p",[v._v("所以，对于数据量小的请求而言，单一次的请求握手就占用了大量的时间，对于用户体验的影响非常大。同时，在用户网络不佳的情况下，RTT 延时会变得较高，极其影响用户体验。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/a2547555298/imags/raw/master/tls%E6%8F%A1%E6%89%8B.png",alt:"图片"}})]),v._v(" "),t("h5",{attrs:{id:"真·0-rtt-的-quic-握手"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#真·0-rtt-的-quic-握手"}},[v._v("#")]),v._v(" "),t("strong",[v._v("真·0-RTT 的 QUIC 握手")])]),v._v(" "),t("p",[v._v("QUIC 由于基于 UDP，无需 TCP 连接，在最好情况下，短连接下 QUIC 可以做到 0RTT 开启数据传输。而基于 TCP 的 HTTPS，即使在最好的 TLS1.3 的 early data 下仍然需要 1RTT 开启数据传输。")]),v._v(" "),t("p",[v._v("QUIC 具体握手过程如下：")]),v._v(" "),t("p",[t("strong",[v._v("Step1")]),v._v("：首次连接时，客户端发送 Inchoate Client Hello 给服务端，用于请求连接；")]),v._v(" "),t("p",[t("strong",[v._v("Step2")]),v._v("：服务端生成 g、p、a，根据 g、p 和 a 算出 A，然后将 g、p、A 放到 Server Config 中再发送 Rejection 消息给客户端；")]),v._v(" "),t("p",[t("strong",[v._v("Step3")]),v._v("：客户端接收到 g、p、A 后，自己再生成 b，根据 g、p、b 算出 B，根据 A、p、b 算出初始密钥 K。B 和 K 算好后，客户端会用 K 加密 HTTP 数据，连同 B 一起发送给服务端；")]),v._v(" "),t("p",[t("strong",[v._v("Step4")]),v._v("：服务端接收到 B 后，根据 a、p、B 生成与客户端同样的密钥，再用这密钥解密收到的 HTTP 数据。为了进一步的安全（前向安全性），服务端会更新自己的随机数 a 和公钥，再生成新的密钥 S，然后把公钥通过 Server Hello 发送给客户端。连同 Server Hello 消息，还有 HTTP 返回数据；")]),v._v(" "),t("p",[t("strong",[v._v("Step5")]),v._v("：客户端收到 Server Hello 后，生成与服务端一致的新密钥 S，后面的传输都使用 S 加密。")]),v._v(" "),t("p",[v._v("这样，"),t("strong",[v._v("QUIC 从请求连接到正式接发 HTTP 数据一共花了 1 RTT")]),v._v("（获取服务端Config后就可以携带数据发送了），这 1 个 RTT 主要是为了获取 Server Config，"),t("strong",[v._v("后面的连接如果客户端缓存了 Server Config，那么就可以直接发送 HTTP 数据")]),v._v("，实现 0 RTT 建立连接。")]),v._v(" "),t("blockquote",[t("p",[v._v("双方更换为使用会话密钥 S通信，初始密钥 K此时已无用，QUIC 握手过程完毕。之后会话密钥 S更新的流程与以上过程类似，只是数据包中的某些字段略有不同。")]),v._v(" "),t("p",[v._v("step4中只是再次通过DH算法协商生成新的密钥S代替老的密钥K。根据文中描述是为了前向安全性：")]),v._v(" "),t("p",[v._v("“前向安全或前向保密（英语：Forward Secrecy，缩写：FS），是密码学中通讯协议的安全属性，指的是长期使用的主密钥泄漏不会导致过去的会话密钥泄漏。 [2] 前向安全能够保护过去进行的通讯不受密码或密钥在未来暴露的威胁。如果系统具有前向安全性，就可以保证在主密钥泄露时历史通讯的安全，即使系统遭到主动攻击也是如此。“")])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/a2547555298/imags/raw/master/quic%E6%8F%A1%E6%89%8B.png",alt:"图片"}})]),v._v(" "),t("p",[t("img",{attrs:{src:"https://pic2.zhimg.com/v2-8e8cb95703a58fe465d753a57e379e49_b.jpg",alt:"img"}})]),v._v(" "),t("p",[v._v("这里使用的是 DH 密钥交换算法，DH 算法的核心就是服务端生成 a、g、p 3 个随机数，a 自己持有，g 和 p 要传输给客户端，而客户端会生成 b 这 1 个随机数，"),t("strong",[v._v("通过 DH 算法客户端和服务端可以算出同样的密钥")]),v._v("。在这过程中 a 和 b 并不参与网络传输，安全性大大提高。因为 p 和 g 是大数，所以即使在网络中传输的 p、g、A、B 都被劫持，那么靠现在的计算机算力也没法破解密钥。")]),v._v(" "),t("h4",{attrs:{id:"可自定义的拥塞控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可自定义的拥塞控制"}},[v._v("#")]),v._v(" "),t("strong",[v._v("可自定义的拥塞控制")])]),v._v(" "),t("p",[v._v("Quic 使用可插拔的拥塞控制，相较于 TCP，它能提供更丰富的拥塞控制信息。比如对于每一个包，不管是原始包还是重传包，都带有一个新的序列号(seq)，这使得 Quic 能够区分 ACK 是重传包还是原始包**，从而避免了 TCP 重传模糊的问题（计算rtt)**。Quic 同时还带有收到数据包与发出 ACK 之间的时延信息。这些信息能够帮助更精确的计算 rtt。此外，Quic 的 ACK Frame 支持 256 个 NACK 区间，相比于 TCP 的 SACK(Selective Acknowledgment)更弹性化，更丰富的信息会让 client 和 server 哪些包已经被对方收到。")]),v._v(" "),t("p",[v._v("QUIC 的传输控制不再依赖内核的拥塞控制算法，而是实现在"),t("strong",[v._v("应用层")]),v._v("上，**这意味着我们根据不同的业务场景，实现和配置不同的拥塞控制算法以及参数。**GOOGLE 提出的 BBR 拥塞控制算法与 CUBIC 是思路完全不一样的算法，在弱网和一定丢包场景，BBR 比 CUBIC 更不敏感，性能也更好。在 QUIC 下我们可以根据业务随意指定拥塞控制算法和参数，甚至同一个业务的不同连接也可以使用不同的拥塞控制算法。")]),v._v(" "),t("h4",{attrs:{id:"无队头阻塞"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#无队头阻塞"}},[v._v("#")]),v._v(" "),t("strong",[v._v("无队头阻塞")])]),v._v(" "),t("h5",{attrs:{id:"tcp-的队头阻塞问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp-的队头阻塞问题"}},[v._v("#")]),v._v(" "),t("strong",[v._v("TCP 的队头阻塞问题")])]),v._v(" "),t("p",[v._v("虽然 HTTP2 实现了多路复用，但是因为其基于面向字节流的 TCP，因此一旦丢包，将会影响多路复用下的所有请求流。QUIC 基于 UDP，在设计上就解决了队头阻塞问题。")]),v._v(" "),t("p",[v._v("TCP 队头阻塞的主要原因是数据包超时确认或丢失阻塞了当前窗口向右滑动，QUIC解决队头阻塞的方案是"),t("strong",[v._v("不让")]),v._v("超时确认或丢失的数据包将当"),t("strong",[v._v("前窗口阻塞在原地。")])]),v._v(" "),t("p",[v._v("TCP 为了保证可靠性，使用了基于字节序号的 Sequence Number 及 Ack 来确认消息的有序到达。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/a2547555298/imags/raw/master/HTTP2%E5%AF%B9%E5%A4%B4%E9%98%BB%E5%A1%9E",alt:"图片"}})]),v._v(" "),t("p",[v._v("如上图，应用层可以顺利读取 stream1 中的内容，但由于 stream2 中的第三个 segment 发生了丢包，**TCP 为了保证数据的可靠性，需要发送端重传第 2个 segment 才能通知应用层读取接下去的数据。**所以即使 stream3 stream4 的内容已顺利抵达，应用层仍然无法读取，只能等待 stream2 中丢失的包进行重传。")]),v._v(" "),t("p",[v._v("在弱网环境下，HTTP2 的队头阻塞问题在用户体验上极为糟糕。")]),v._v(" "),t("h5",{attrs:{id:"quic-的无队头阻塞解决方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#quic-的无队头阻塞解决方案"}},[v._v("#")]),v._v(" "),t("strong",[v._v("QUIC 的无队头阻塞解决方案")])]),v._v(" "),t("p",[v._v("QUIC 同样是一个可靠的协议，它使用 Packet Number 代替了 TCP 的 Sequence Number，并且每个 Packet Number 都严格递增，也就是说就算 Packet N 丢失了，重传的 Packet N 的 Packet Number 已经不是 N，而是一个比 N 大的值，比如 Packet N+M。")]),v._v(" "),t("p",[v._v("QUIC 使用的 Packet Number 单调递增的设计**(疑问：序列化也可以指明位置，为啥要有序确认）"),t("strong",[v._v("，"),t("strong",[v._v("可以让数据包不再像 TCP 那样必须有序确认，QUIC 支持乱序确认")]),v._v("，当数据包 Packet N 丢失后，只要有新的已接收数据包确认，当前窗口就会")]),v._v("继续向右滑动**。待发送端获知数据包 Packet N 丢失后，会将需要重传的数据包放到待发送队列，重新编号比如数据包 Packet N+M 后重新发送给接收端，对重传数据包的处理跟发送新的数据包类似，这样就不会因为丢包重传将当前窗口阻塞在原地，从而解决了队头阻塞问题。那么，既然重传数据包的 Packet N+M 与丢失数据包的 Packet N 编号并不一致，我们怎么确定这两个数据包的内容一样呢？")]),v._v(" "),t("p",[v._v("QUIC 使用 "),t("strong",[v._v("Stream ID")]),v._v(" 来标识当前数据流属于哪个资源请求，这同时也是数据包多路复用传输到接收端后能正常组装的依据。重传的数据包 Packet N+M 和丢失的数据包 Packet N 单靠 Stream ID 的比对一致仍然不能判断两个数据包内容一致，还需要再新增一个字段 "),t("strong",[v._v("Stream Offset")]),v._v("，标识当前数据包在当前 Stream ID 中的字节偏移量。")]),v._v(" "),t("p",[t("strong",[v._v("有了 Stream Offset 字段信息，属于同一个 Stream ID 的数据包也可以乱序传输了")]),v._v("（HTTP/2 中仅靠 Stream ID 标识，要求同属于一个 Stream ID 的数据帧必须有序传输），通过两个数据包的 Stream ID 与 Stream Offset 都一致，就说明这两个数据包的内容一致。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/a2547555298/imags/raw/master/%20QUIC%E6%97%A0%E9%98%9F%E5%A4%B4%E9%98%BB%E5%A1%9E.png",alt:"图片"}})]),v._v(" "),t("p",[v._v("超时发生后客户端发起重传，后来接收到了 ACK 确认消息，但因为原始请求和重传请求接收到的 ACK 消息一样，所以客户端不知道这个 ACK 对应的是原始请求还是重传请求。如果客户端认为是原始请求的 ACK，但实际上是左图的情形，则计算的采样 RTT 偏大；如果客户端认为是重传请求的 ACK，但实际上是右图的情形，又会导致采样 RTT 偏小。图中有几个术语，RTO 是指超时重传时间（Retransmission TimeOut），跟我们熟悉的 RTT（Round Trip Time，往返时间）很长得很像。采样 RTT 会影响 RTO 计算，超时时间的准确把握很重要，长")]),v._v(" "),t("p",[v._v("QUIC 解决了上面的歧义问题。Packet Number严格单调递增，这样发送方接收到确认消息时就能方便地知道 ACK 对应的是原始请求还是重传请求。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/a2547555298/imags/raw/master/v2-f1847d49c3bd83cd4c51e337dd40af7b_b.jpg",alt:"img"}})]),v._v(" "),t("p",[t("strong",[v._v("QUIC 协议组成")])]),v._v(" "),t("p",[v._v("QUIC 的 packet 除了个别报文比如 PUBLIC_RESET 和 CHLO，所有报文头部都是经过认证的，报文 Body 都是经过加密的。这样只要对 QUIC 报文任何修改，接收端都能够及时发现，有效地降低了安全风险。")]),v._v(" "),t("p",[v._v("如图 3-1 所示，红色部分是 Stream Frame 的报文头部，有认证。绿色部分是报文内容，全部经过加密。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/a2547555298/imags/raw/master/QUIC%E7%9A%84%E5%8D%8F%E8%AE%AE%E7%BB%84%E6%88%90.png",alt:"图片"}})]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("Flags")]),v._v(": 用于表示 Connection ID 长度、Packet Number 长度等信息；")]),v._v(" "),t("li",[t("strong",[v._v("Connection ID")]),v._v("：客户端随机选择的最大长度为 64 位的无符号整数。但是，长度可以协商；")]),v._v(" "),t("li",[t("strong",[v._v("QUIC Version")]),v._v("：QUIC 协议的版本号，32 位的可选字段。如果 Public Flag & FLAG_VERSION != 0，这个字段必填。客户端设置 Public Flag 中的 Bit0 为 1，并且填写期望的版本号。如果客户端期望的版本号服务端不支持，服务端设置 Public Flag 中的 Bit0 为 1，并且在该字段中列出服务端支持的协议版本（0 或者多个），并且该字段后不能有任何报文；")]),v._v(" "),t("li",[t("strong",[v._v("Packet Number")]),v._v("：长度取决于 Public Flag 中 Bit4 及 Bit5 两位的值，最大长度 6 字节。发送端在每个普通报文中设置 Packet Number。发送端发送的第一个包的序列号是 1，随后的数据包中的序列号的都大于前一个包中的序列号；")]),v._v(" "),t("li",[t("strong",[v._v("Stream ID")]),v._v("：用于标识当前数据流属于哪个资源请求；")]),v._v(" "),t("li",[t("strong",[v._v("Offset")]),v._v("：标识当前数据包在当前 Stream ID 中的字节偏移量。")])]),v._v(" "),t("p",[v._v("相比 HTTPS：")]),v._v(" "),t("ol",[t("li",[v._v("减少了 TCP 的三次握手以及 TLS 握手的时间，相比 HTTPS 的 3RTT 握手，可以实现 0RTT 握手。")]),v._v(" "),t("li",[v._v("引入 QUIC 连接及 Stream 的概念，对 HTTP/2 对多路复用进行了改进，每条 Stream 对应一个 HTTP 请求，Stream 之间互不影响。")]),v._v(" "),t("li",[v._v("对拥塞控制机制进行了改进，实现了 TCP 的拥塞控制算法并引入了更多如 BBR 等算法，同时由于位于应用层，修改、配置更为方便。")]),v._v(" "),t("li",[v._v("RTT 计算更为精准，PacketNumber 单调递增解决了 TCP 的重传导致的 RTT 计算歧义性，并且 RTT 的计算考虑了 ACK 延迟机制。")]),v._v(" "),t("li",[v._v("通过 Connection Id 唯一标示了一条 QUIC 连接，从而实现两端的 IP 等信息变化仍能维持同一条 QUIC 连接。")]),v._v(" "),t("li",[v._v("通过引入 Stream Offset 字段实现了一条 Stream 上的按序传输的能力。")]),v._v(" "),t("li",[v._v("引入了前向纠错机制，实现了纠错功能。")])]),v._v(" "),t("p",[v._v("HTTP/3 原理实战 - 腾讯技术工程的文章 - 知乎 https://zhuanlan.zhihu.com/p/143464334")]),v._v(" "),t("h3",{attrs:{id:"dns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dns"}},[v._v("#")]),v._v(" DNS")]),v._v(" "),t("p",[v._v("DNS是提供"),t("strong",[v._v("域名到IP地址")]),v._v("间转换的分布式系统，是"),t("strong",[v._v("应用")]),v._v("层协议。通常运行在"),t("strong",[v._v("UPD")]),v._v("协议之上，端口号"),t("strong",[v._v("53")]),v._v("。")]),v._v(" "),t("p",[t("strong",[v._v("域名")])]),v._v(" "),t("p",[v._v("域名是一种分层的结构， "),t("code",[v._v("com")]),v._v("、"),t("code",[v._v("cn")]),v._v("、"),t("code",[v._v("org")]),v._v("、"),t("code",[v._v("net")]),v._v(" 等等就是顶层域名，每一级域名需要由上一级域名进行分配。")]),v._v(" "),t("p",[t("strong",[v._v("DNS服务器")])]),v._v(" "),t("p",[v._v("DNS服务器主要分为根域名服务，顶级域名服务器，权威域名服务器。")]),v._v(" "),t("p",[v._v("还有一种不属于DNS层次结构的本地DNS服务器，仅是用来转发DNS请求，将查询结果缓存在本地。用来提供跟快捷的DNS查询，往往由ISP维护，本地DNS服务器还维护了到每个根域名服务器的IP地址。这个本地 DNS 服务器的地址是由我们用户所配置在操作系统中的。")]),v._v(" "),t("p",[t("strong",[v._v("递归查询和迭代查询")])]),v._v(" "),t("p",[v._v("递归查询：如果该DNS服务器没有缓存的DNS信息，则会"),t("strong",[v._v("自己向其他服务器进行询问")]),v._v("，获得结果后告诉客户端")]),v._v(" "),t("p",[v._v("迭代查询：如果在DNS服务器上没有对应的DNS信息，则会告诉查询方能够查询到该域名的DNS服务器，然后"),t("strong",[v._v("客户端再自己向返回的服务器进行查询。")])]),v._v(" "),t("p",[t("strong",[v._v("解析过程")])]),v._v(" "),t("p",[t("strong",[v._v("递归查询")]),v._v("：基于缓存实现")]),v._v(" "),t("ul",[t("li",[v._v("浏览器缓存")]),v._v(" "),t("li",[t("strong",[v._v("系统缓存")]),v._v("：查看系统的 Hosts 文件的 DNS 缓存查看是否有对应的映射。")]),v._v(" "),t("li",[v._v("路由器缓存")]),v._v(" "),t("li",[v._v("ISP DNS服务器")])]),v._v(" "),t("p",[v._v("当本地DNS服务器也没有缓存时，会将请求发给根服务器开始迭代查询。")]),v._v(" "),t("p",[t("strong",[v._v("迭代查询")])]),v._v(" "),t("ul",[t("li",[v._v("根服务器，根服务器会对区域数据进行查询，若没有则将对应的顶级域名DNS服务器告诉本地DNS服务器")]),v._v(" "),t("li",[v._v("顶级域名服务器")]),v._v(" "),t("li",[v._v("权威域名服务器")]),v._v(" "),t("li",[v._v("下一级域名服务器")]),v._v(" "),t("li",[v._v("依次往下进行迭代"),t("strong",[v._v("直到")]),v._v("查找到映射")])]),v._v(" "),t("p",[t("strong",[v._v("存入缓存")]),v._v("："),t("em",[v._v("本地 DNS 服务器")]),v._v("会将结果保存到缓存，以备下次使用。")]),v._v(" "),t("p",[t("strong",[v._v("DNS实现负载平衡")])]),v._v(" "),t("p",[v._v("一般大型网站使用多个服务器提供服务，因此一个域名可能对于多个IP地址")]),v._v(" "),t("ul",[t("li",[v._v("当用户发起DNS请求时，DNS返回对应服务器IP地址集合")]),v._v(" "),t("li",[v._v("在每个应答中，循环这些IP地址的顺序，因为用户一般选择靠前的IP")]),v._v(" "),t("li",[v._v("以此将用户请求均衡到各个不同服务器上，实现负载均衡")])]),v._v(" "),t("h4",{attrs:{id:"常见问题-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见问题-2"}},[v._v("#")]),v._v(" 常见问题")]),v._v(" "),t("p",[t("strong",[v._v("DNS为什么使用UDP作为传输层协议")])]),v._v(" "),t("ul",[t("li",[v._v("为了得到一个域名的IP地址，往往会向多个域名服务器查询。如果使用TCP，每次请求都存在连接时延，使DNS服务变慢。")]),v._v(" "),t("li",[v._v("DNS追求速度，如果UDP发生丢包重新发一个请求即可")])]),v._v(" "),t("p",[t("strong",[v._v("什么时候用到TCP")])]),v._v(" "),t("ol",[t("li",[v._v("UDP报文不足于承载对应的响应（UDP限制最大为512个字节）")]),v._v(" "),t("li",[v._v("进行DNS区域传输（对DNS数据进行迁移），要保证可靠的数据交互")])]),v._v(" "),t("p",[t("strong",[v._v("为什么域名根服务器只能有13台呢？")])]),v._v(" "),t("p",[v._v("DNS 消息使用 UDP 协议进行传输，这规定了消息最大的长度在 512 字节（不包含 IP 头部、UDP 头部）。")]),v._v(" "),t("p",[v._v("有了最大长度限制之后，一个 UDP 协议传输的 DNS 响应能够返回的资源记录数量就是有限的。")]),v._v(" "),t("p",[t("strong",[v._v("要让所有的根服务器数据能包含在一个 512 字节的 UDP 包中，根服务器只能限制在 13 个。")])]),v._v(" "),t("h3",{attrs:{id:"websocket"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#websocket"}},[v._v("#")]),v._v(" Websocket")]),v._v(" "),t("p",[v._v("####Websocket和HTTP区别")]),v._v(" "),t("p",[v._v("HTTP协议和WebSocket协议都是应用层的协议，两者"),t("strong",[v._v("应用场景不一样。")])]),v._v(" "),t("p",[v._v("HTTP主要用来"),t("strong",[v._v("请求-应答")]),v._v("的方式交付信息，一个request对应一个response；HTTP这种"),t("strong",[v._v("单向请求")]),v._v("的特点，注定了如果"),t("strong",[v._v("服务器有连续的状态变化")]),v._v("，客户端要获知就非常麻烦。")]),v._v(" "),t("p",[t("strong",[v._v("几种与服务端实时通信的方法")])]),v._v(" "),t("blockquote",[t("p",[v._v("不使用WebSocket与服务器实时交互，一般有两种方法。AJAX轮询和Long Polling长轮询。")]),v._v(" "),t("p",[t("strong",[v._v("AJAX短轮询")])]),v._v(" "),t("p",[v._v("AJAX轮询也就是定时发送请求，可以保证服务端一旦有最新消息，就可以被客户端获取。")]),v._v(" "),t("p",[v._v("缺点是：当客户端以固定频率向服务器端发送请求时，服务器端的数据可能并没有更新，"),t("strong",[v._v("带来很多无谓请求")]),v._v("，浪费带宽，效率低下。")]),v._v(" "),t("p",[t("strong",[v._v("Long Polling长轮询")])]),v._v(" "),t("p",[v._v("Long Polling长轮询是客户端和浏览器保持一个长连接。")]),v._v(" "),t("p",[v._v("客户端发起一个Long Polling，服务端如果没有数据要返回的话，\n会阻塞住请求，等到有数据，就会返回给客户端并关闭连接。客户端处理完响应信息后，客户端又会再次发起一次Long Polling，再重复一次上面的过程。")]),v._v(" "),t("p",[t("strong",[v._v("缺点")])]),v._v(" "),t("p",[v._v("虽然长轮询和短轮询比起来，它的优点是**「明显减少了很多不必要的 http 请求次数」**，相比之下节约了资源。但当 server 向 client 发送数据后，必须等待下一次请求才能将新的数据发送出去，这样 client 接收到新数据的间隔最短时间便是 2 * RTT（往返时间），这样便无法应对 server 端数据更新频率较快的情况。")]),v._v(" "),t("p",[t("strong",[v._v("两种都是都是在不断地建立HTTP连接，然后等待服务端处理，可以体现HTTP协议的另外一个特点，"),t("strong",[v._v("被动性")]),v._v("。")])])]),v._v(" "),t("p",[v._v("HTTP2虽然支持服务器推送资源到客户端，但那不是应用程序可以感知的，主要是让浏览器（用户代理）"),t("strong",[v._v("提前缓存静态资源")]),v._v("，所以我们不能指望HTTP2可以像WebSocket建立双向实时通信。")]),v._v(" "),t("p",[v._v("WebSocket让通信双方都可以主动去交换信息。")]),v._v(" "),t("p",[t("strong",[v._v("Websocket 和 HTTP 什么关系？")])]),v._v(" "),t("p",[v._v("HTTP、WebSocket 都是应用层协议，都是基于 TCP 协议来传输数据的。")]),v._v(" "),t("h4",{attrs:{id:"websocket简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#websocket简介"}},[v._v("#")]),v._v(" Websocket简介")]),v._v(" "),t("p",[v._v("它的最大特点就是为了提供 Web 应用程序和服务端"),t("strong",[v._v("全双工通信")]),v._v("而专门制定的，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，"),t("strong",[v._v("是真正的双向平等对话")]),v._v("。")]),v._v(" "),t("p",[v._v("其他特点包括：")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("建立在 TCP 协议之上")]),v._v("，服务器端的实现比较容易（监听socket流）。")]),v._v(" "),t("li",[v._v("与 HTTP 协议有着良好的兼容性。默认端口也是80（ws)和443(wss)，并且"),t("strong",[v._v("握手阶段采用 HTTP 协议")]),v._v("建立连接，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。")]),v._v(" "),t("li",[t("strong",[v._v("数据格式比较轻量")]),v._v("，"),t("strong",[v._v("性能开销小")]),v._v("，节省带宽。客户端与服务端进行数据交换时，服务端到客户端的数据包头   只有2到10字节，客户端到服务端需要加上另外4字节的掩码。")]),v._v(" "),t("li",[v._v("更好的二进制支持，可以发送文本，和二进制数据")]),v._v(" "),t("li",[v._v("协议标识符是"),t("code",[v._v("ws")]),v._v("（如果加密，则为"),t("code",[v._v("wss")]),v._v("），服务器网址就是 URL。")])]),v._v(" "),t("blockquote",[t("div",{staticClass:"language-markup extra-class"},[t("pre",{pre:!0,attrs:{class:"language-markup"}},[t("code",[v._v("ws://example.com:80/some/path\n")])])])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/a2547555298/imags/raw/master/bg2017051503.jpg",alt:"img"}})]),v._v(" "),t("p",[v._v("连接建立后，WebSocket 采用二进制帧的形式传输数据，其中常用的包括用于数据传输的"),t("strong",[v._v("数据帧 MESSAGE")]),v._v(" 以及 "),t("strong",[v._v("3 个控制帧：")])]),v._v(" "),t("ul",[t("li",[v._v("PING：主动保活的 PING 帧")]),v._v(" "),t("li",[v._v("PONG：收到 PING 帧后回复")]),v._v(" "),t("li",[v._v("CLOSE：主动关闭 WebSocket 连接；")])]),v._v(" "),t("p",[v._v("WebSocket 的保活，需要定时发送 PING 帧")]),v._v(" "),t("h4",{attrs:{id:"websocket连接过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#websocket连接过程"}},[v._v("#")]),v._v(" "),t("strong",[v._v("WebSocket连接过程")])]),v._v(" "),t("p",[v._v("为了创建Websocket连接，需要通过浏览器发出请求，之后服务器进行回应，这个过程通常称为“"),t("a",{attrs:{href:"https://baike.baidu.com/item/%E6%8F%A1%E6%89%8B",target:"_blank",rel:"noopener noreferrer"}},[v._v("握手"),t("OutboundLink")],1),v._v("”。")]),v._v(" "),t("p",[v._v("为了兼容性客户端使用"),t("strong",[v._v("HTTP发起握手")]),v._v("，告诉服务端进行WebSocket协议通讯，并告知WebSocket协议版本。服务端确认协议版本，升级为WebSocket协议， 如果服务器或者代理不支持 WebSocket，它们会把这当做一个不认识的 HTTP 请求地拒绝掉。")]),v._v(" "),t("p",[v._v("相比于传统 HTTP 的每次“请求-应答”都要 client 与 server 建立连接的模式，WebSocket 是一种长连接的模式。")]),v._v(" "),t("p",[v._v("经过"),t("strong",[v._v("一次HTTP请求")]),v._v("握手成功后，数据就直接从 TCP 通道传输，与 HTTP 无关了。就可以做到源源不断的信息传送了。之后如果有数据需要推送，会主动推送给客户端。")]),v._v(" "),t("p",[v._v("连接开始时，客户端使用HTTP协议和服务端升级协议，升级完成后，后续数据交换遵循WebSocket协议。"),t("strong",[v._v("Request Headers")])]),v._v(" "),t("div",{staticClass:"language-json extra-class"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[v._v("Accept-Encoding"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),v._v(" gzip"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" deflate"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" br\nAccept-Language"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),v._v(" zh"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v("zh-TW;q="),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("0.9")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v("en-US;q="),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("0.8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v("en;q="),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("0.7")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v("zh-CN;q="),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("0.6")]),v._v("\nCache-Control"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),v._v(" no-cache\nConnection"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),v._v(" Upgrade\nHost"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("127.0")]),v._v("."),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("0.1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("3000")]),v._v("\nOrigin"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),v._v(" http"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),t("span",{pre:!0,attrs:{class:"token comment"}},[v._v("//localhost:3000")]),v._v("\nPragma"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),v._v(" no-cache\nSec-WebSocket-Extensions"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),v._v(" permessage-deflate; client_max_window_bits\nSec-WebSocket-Key"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),v._v(" bwb9SFiJONXhQ/A4pLaXIg==\nSec-WebSocket-Version"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("13")]),v._v("\nUpgrade"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),v._v(" websocket\n")])])]),t("p",[v._v("重点字段是这些：")]),v._v(" "),t("ul",[t("li",[v._v("Connection: Upgrade 表示要升级协议")]),v._v(" "),t("li",[v._v("Upgrade: websocket 要升级协议到websocket协议")]),v._v(" "),t("li",[v._v("Sec-WebSocket-Version 表示websocket的版本。如果服务端不支持该版本，需要返回一个Sec-WebSocket-Versionheader，里面包含服务端支持的版本号。")]),v._v(" "),t("li",[v._v("Sec-WebSocket-Key 对应服务端响应头的Sec-WebSocket-Accept，由于没有同源限制，websocket客户端可任意连接支持websocket的服务。这个就相当于一个钥匙一把锁，避免多余的，无意义的连接。")])]),v._v(" "),t("p",[v._v("再看看看服务端响应的 Response Headers")]),v._v(" "),t("div",{staticClass:"language-json extra-class"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[v._v("HTTP/"),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("1.1")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("101")]),v._v(" Switching Protocols\nConnection"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),v._v(" Upgrade\nSec-WebSocket-Accept"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),v._v(" 2jrbCWSCPlzPtxarlGTp4Y8XD20=\nUpgrade"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),v._v(" websocket\n")])])]),t("p",[v._v("关键是这个字段")]),v._v(" "),t("ul",[t("li",[v._v("Sec-WebSocket-Accept: 用来告知服务器愿意发起一个websocket连接， 值根据客户端请求头的Sec-WebSocket-Key计算出来")])]),v._v(" "),t("p",[t("strong",[v._v("WebSocket如何实现长链接")])]),v._v(" "),t("ul",[t("li",[v._v("TCP是持久连接，建立TCP连接是3次握手，关闭TCP连接是4次挥手。TCP连接是由通信双方来决定什么时候结束通信，那么自然就是一个持久连接。TCP连接可以进行全双工通信，因为双方都知道对方是谁。WebSocket协议本身就是针对于全双工通信设计的，通信双方都可以发起/响应请求")]),v._v(" "),t("li",[v._v("Http协议只能单向通信的原因是：Server端没有保存Http客户端的信息，想要通信的时候找不到客户端。（只有URL信息）")]),v._v(" "),t("li",[v._v("WebSocket如何管理连接的呢？协议定义了Control Frame。WebSocket的控制帧有：Close、Ping、Pong。其中Close发起关闭请求；Ping帧是通信发起方确认链路是否畅通的报文；Pong则是通信接收方回应链路是否畅通的报文。")])]),v._v(" "),t("h4",{attrs:{id:"socket-与-websocket-的关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#socket-与-websocket-的关系"}},[v._v("#")]),v._v(" "),t("strong",[v._v("Socket 与 WebSocket 的关系")])]),v._v(" "),t("p",[v._v("Socket 并不是一个协议，是为了方便大家直接使用更底层协议，在应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。")]),v._v(" "),t("p",[v._v("在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。")]),v._v(" "),t("p",[t("s",[v._v("主机 A 的应用程序要能和主机 B 的应用程序通信，必须通过 Socket 建立连接，而建立 Socket 连接必须需要底层 TCP/IP 协议来建立 TCP 连接。建立 TCP 连接需要底层 IP 协议来寻址网络中的主机。我们知道网络层使用的 IP 协议可以帮助我们根据 IP 地址来找到目标主机，但是一台主机上可能运行着多个应用程序，如何才能与指定的应用程序通信就要通过 TCP 或 UPD 的地址也就是端口号来指定。这样就可以"),t("strong",[v._v("通过一个 Socket 实例唯一代表一个主机上的一个应用程序的通信链路了")])])]),v._v(" "),t("p",[v._v("而 WebSocket 则不同，它是一个完整的"),t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//link.jianshu.com/%3Ft%3Dhttp%3A//datatracker.ietf.org/doc/rfc6455/",target:"_blank",rel:"noopener noreferrer"}},[v._v("应用层协议"),t("OutboundLink")],1),v._v("，包含一套"),t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//link.jianshu.com/%3Ft%3Dhttp%3A//dev.w3.org/html5/websockets/",target:"_blank",rel:"noopener noreferrer"}},[v._v("标准的 API"),t("OutboundLink")],1),v._v("。所以，从使用上来说，WebSocket 更易用，而 Socket 更灵活。")]),v._v(" "),t("h3",{attrs:{id:"tcp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp"}},[v._v("#")]),v._v(" TCP")]),v._v(" "),t("p",[v._v("TCP 在 IP 协议不可靠（尽力而为也就是无服务）之上建立的"),t("strong",[v._v("可靠的全双工字节流数据传输服务")])]),v._v(" "),t("ul",[t("li",[v._v("基于"),t("strong",[v._v("字节流")]),v._v("：以字节为单位对传输数据进行处理")]),v._v(" "),t("li",[t("strong",[v._v("全双工")]),v._v("：一条TCP连接上的两端可以互相发送信息")]),v._v(" "),t("li",[v._v("**可靠的：**通过TCP连接传输的数据不丢失，无差错，不重复，按序到达")]),v._v(" "),t("li",[t("strong",[v._v("面向连接：")]),v._v(" 使用TCP传输数据前必须先建立连接，传输完成后释放连接")])]),v._v(" "),t("h4",{attrs:{id:"报文结构-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#报文结构-2"}},[v._v("#")]),v._v(" "),t("strong",[v._v("报文结构")])]),v._v(" "),t("ul",[t("li",[v._v("报文段= 首部 + 数据")]),v._v(" "),t("li",[v._v("固定首部20字节")])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/a2547555298/imags/raw/master/TCP%E6%8A%A5%E6%96%87%E6%AE%B5.png",alt:""}})]),v._v(" "),t("p",[t("strong",[v._v("一个 TCP 连接（TCP Socket）可以被"),t("code",[v._v("源 IP 地址")]),v._v("、"),t("code",[v._v("源端口号")]),v._v("、"),t("code",[v._v("目的 IP 地址")]),v._v("、"),t("code",[v._v("目的端口号")]),v._v("这样一个四元组所唯一确定")]),v._v("。")]),v._v(" "),t("ul",[t("li",[v._v("序号：这个报文段首字节的字节编号，其中数据流的初始序号是随机选择的")]),v._v(" "),t("li",[v._v("确认号：接收方期望从发送方收到的下一个字节编号")]),v._v(" "),t("li",[v._v("数据偏移：首部长度")]),v._v(" "),t("li",[v._v("URG：存在紧急字段，紧急指针有效")]),v._v(" "),t("li",[v._v("PSH：接收方应立即将数据交给上层")]),v._v(" "),t("li",[v._v("RST：异常的关闭连接")]),v._v(" "),t("li",[v._v("ACK：指示确认号有效")]),v._v(" "),t("li",[v._v("SYN：发起连接请求时SYN=1，ACK=0；对方同意建立连接时，SYN=1，ACK=1")]),v._v(" "),t("li",[v._v("FIN:为1释放连接")]),v._v(" "),t("li",[v._v("窗口：用于流量控制，表示接收方愿意接收的字节数量")]),v._v(" "),t("li",[v._v("校验和：用以校验首部和数据")])]),v._v(" "),t("h4",{attrs:{id:"连接建立"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#连接建立"}},[v._v("#")]),v._v(" "),t("strong",[v._v("连接建立")])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/a2547555298/imags/raw/master/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.jpg",alt:"image-20200222162116971"}})]),v._v(" "),t("ol",[t("li",[v._v("客户端向服务端发送一个SYN字段为1的SYN报文段，并随机选择一个初始序号X，填入序号字段。随机的目的是安全性")]),v._v(" "),t("li",[v._v("服务端收到SYN报文段后，会向客户端发送一个SYNACK报文段。SYNACK 报文段不包含数据，其 SYN 字段、ACK 字段均为 1，且将确认号置为了 X+1（表示下一个想接收这个序号的报文段），并且也会生成一个"),t("strong",[v._v("随机")]),v._v("的初始序号（Y）并填入序号字段。")]),v._v(" "),t("li",[v._v("客户端收到 SYNACK 报文段后会为该连接分配缓存，并向服务端发送一个 "),t("strong",[v._v("ACK 报文段")]),v._v("，其 ACK 字段为 1，并将序号置为了X+1，将确认号置为了 Y+1。当服务端收到该 ACK 报文后，则会为客户端的连接分配缓存。（这个步骤的 ACK 报文是可以携带数据的）")])]),v._v(" "),t("p",[v._v("初始序号 ISN 设置为随机主要是为了安全考虑，因为如果均为一个固定的值，那么恶意者可以通过这个已知的序号来"),t("strong",[v._v("伪装")]),v._v("发送方或接收方的其中一方，并造成一些破坏。")]),v._v(" "),t("p",[t("strong",[v._v("为什么是三次握手，而不是四次或两次")])]),v._v(" "),t("ol",[t("li",[t("strong",[v._v("防止已失效的请求报文到达服务端")]),v._v("，服务端错误建立连接浪费资源")]),v._v(" "),t("li",[v._v("三次握手才能"),t("strong",[v._v("协商好序号")]),v._v("保证有序传输，如果是两次的只能确认发送方的seq")]),v._v(" "),t("li",[v._v("如果进行四次握手，显然第二步的发送 ACK 与发送 SYN 报文段的过程在数据来说没有交叉，并且时间几乎连续，因此是可以合并的，于是便成为了三次握手。")])]),v._v(" "),t("p",[t("strong",[v._v("三次握手中 SYN 丢包如何处理")])]),v._v(" "),t("ul",[t("li",[v._v("客户端会"),t("strong",[v._v("超时重传")]),v._v("，超过设定的次数仍未收到 ACK 则结束")])]),v._v(" "),t("p",[t("strong",[v._v("三次握手中 SYNACK 丢包如何处理")])]),v._v(" "),t("ul",[t("li",[v._v("客户端以为SYN发生丢包，对SYN进行重传")]),v._v(" "),t("li",[v._v("服务端也会触发重传SYNACK包")])]),v._v(" "),t("p",[t("strong",[v._v("三次握手中最后 ACK 丢包如何处理")])]),v._v(" "),t("ul",[t("li",[v._v("服务端收不到 ACK 会进行重传，此时客户端会认为连接已建立，处于 ESTABLISHED，而服务端仍处于 SYN_RCVD，此时如果服务端收到了客户端的数据包，会认为连接已建立，进入 ESTABLISHED。")])]),v._v(" "),t("h4",{attrs:{id:"连接关闭-四次挥手"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#连接关闭-四次挥手"}},[v._v("#")]),v._v(" "),t("strong",[v._v("连接关闭（四次挥手）")])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/a2547555298/imags/raw/master/TCP%E5%85%B3%E9%97%AD%E8%BF%9E%E6%8E%A5",alt:""}})]),v._v(" "),t("ul",[t("li",[v._v("客户端向服务端发送一个 FIN 报文段，表示客户端想要关闭向服务端的数据流向，不再向服务端发送数据。")]),v._v(" "),t("li",[v._v("服务端收到该 FIN 报文段后，会向客户端发送一个 ACK 报文段，对该连接的关闭进行了确认，并回收为其分配的资源。")]),v._v(" "),t("li",[v._v("服务端向客户端发送一个 FIN 报文段，表示服务端想要关闭向客户端的数据流向，不再向客户端发送数据。")]),v._v(" "),t("li",[v._v("客户端收到该 FIN 报文段后，会向服务端发送一个 ACK 报文段，对该连接的关闭进行了确认，并回收为其分配的资源。")]),v._v(" "),t("li",[v._v("客户端等待"),t("strong",[v._v("2MSL")]),v._v("后正式关闭")])]),v._v(" "),t("p",[v._v("在客户端向服务端发送 FIN 并收到 ACK 后，仅仅是客户端向服务端发送数据的这一条数据流向被关闭，"),t("strong",[v._v("服务端仍然能继续向客户端发送数据")]),v._v("。这种连接一端结束发送后还能接收另一端数据的能力叫做"),t("strong",[v._v("半关闭")]),v._v("。")]),v._v(" "),t("p",[t("strong",[v._v("为什么不是三次挥手")])]),v._v(" "),t("p",[v._v("因为TCP是全双工模式，当服务端收到客户端的FIN报文时，"),t("strong",[v._v("仅")]),v._v("代表客户端向服务端停止发送数据。但服务端可能仍有数据没有发送完，还不能关闭服务端到客户端的数据流。"),t("strong",[v._v("因此服务端发送的 ACK 与发送的 FIN 的时机不一定是相同的")]),v._v("，可能会有一段较长的时间间隔，无法将两条数据合并为同一条。")]),v._v(" "),t("p",[v._v("=="),t("u",[v._v("为什么要等待"),t("strong",[v._v("2MSL")]),v._v("？")]),v._v("==")]),v._v(" "),t("p",[v._v("MSL：报文段最大生存时间，报文段被丢弃前在网络内的最长时间。")]),v._v(" "),t("ul",[t("li",[v._v("保证TCP协议的全双工连接能够"),t("strong",[v._v("可靠关闭")])]),v._v(" "),t("li",[v._v("保证上次连接的数据段从"),t("strong",[v._v("网络中消失")])])]),v._v(" "),t("h4",{attrs:{id:"流量控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#流量控制"}},[v._v("#")]),v._v(" 流量控制")]),v._v(" "),t("p",[v._v("如果发送方把数据发送得过快，"),t("strong",[v._v("接收方可能会来不及接收")]),v._v("，这就会造成数据的丢失。"),t("strong",[v._v("流量控制就是让发送方的发送速率不要太快，要让接收方来得及接收。")])]),v._v(" "),t("p",[v._v("TCP 通过大小可变的"),t("strong",[v._v("滑动窗口")]),v._v("来实现流量控制，由于 TCP 是全双工的协议，因此两端都可以作为发送端以及接收端。因此 TCP 连接的两端都具有一个"),t("strong",[v._v("发送窗口")]),v._v("（"),t("code",[v._v("swnd")]),v._v("）和一个"),t("strong",[v._v("接收窗口")]),v._v("（"),t("code",[v._v("rwnd")]),v._v("）。")]),v._v(" "),t("p",[t("strong",[v._v("TCP保证可靠，每一个数据包都要确认。"),t("strong",[v._v("有了滑动窗口，接收方可以等收到许多包后只发送一个ACK包，确认之前收到的多个数据包。发送方在")]),v._v("滑动窗口大小内")]),v._v("，发完一个数据包后不用等待ACK，继续发送其他数据包")]),v._v(" "),t("p",[t("strong",[v._v("TCP为每一个连接设有一个持续计时器")]),v._v("(persistence timer)。当TCP连接中的发送方收到接收方的零窗口通知时，发送方就启动持续计时器。若"),t("strong",[v._v("持续计时器设置的时间")]),v._v(" "),t("strong",[v._v("到期")]),v._v("，发送方就发送一个"),t("strong",[v._v("零窗口控测报文段")]),v._v("（携1字节的数据）给接收方。如果接收方可以接收数据，就重新开始发送数据；如果接收方不能接收数据，就重新设置持续计时器。")]),v._v(" "),t("p",[v._v("####拥塞控制")]),v._v(" "),t("p",[v._v("流量控制是发送方和接收方之间的控制。拥塞控制是一个"),t("strong",[v._v("全局性")]),v._v("的过程，对网络的拥塞情况进行控制。")]),v._v(" "),t("blockquote",[t("p",[v._v("拥塞：对网络中的资源需求 > 该资源所能提供的部分")])]),v._v(" "),t("p",[v._v("TCP 同样是通过大小可变的滑动窗口来实现拥塞控制，TCP 的每一端都具有一个"),t("strong",[v._v("拥塞窗口")]),v._v("（"),t("code",[v._v("cwnd")]),v._v("）。")]),v._v(" "),t("p",[v._v("发送方控制拥塞窗口的原则是：只要网络没有出现拥塞，拥塞窗口就再增大一些， 以便把更多的分组发送出去。但只要网络出现拥塞，拥塞窗口就减小一些，以减少注入到网络中的分组数。")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("慢开始算法")]),v._v(" "),t("ul",[t("li",[v._v("拥塞窗口 cwnd 设置为"),t("strong",[v._v("一个最大报文段MSS（Maximum Segment Size，最大报文长度）的数值。")])]),v._v(" "),t("li",[v._v("每收到一个确认，拥塞窗口大小+1个MSS。")]),v._v(" "),t("li",[v._v("每经过一个传输轮次，拥塞窗口就加倍")]),v._v(" "),t("li",[v._v("慢指的是一开始发送报文段时拥塞窗口"),t("code",[v._v("（cwnd）")]),v._v("设置得较小（为1MSS），目的是试探一下网络的拥塞情况")])])]),v._v(" "),t("li",[t("strong",[v._v("拥塞避免")]),v._v(" "),t("ul",[t("li",[v._v("当 cwnd > 慢开始门限ssthresh 时，停止使用慢开始算法而改用拥塞避免算法。")]),v._v(" "),t("li",[v._v("使得拥塞窗口"),t("code",[v._v("（cwnd）")]),t("strong",[v._v("按线性规律 缓慢增长")]),v._v("：每经过一个往返时间"),t("code",[v._v("RTT")]),v._v("，发送方的拥塞窗口"),t("code",[v._v("（cwnd）")]),v._v("加1")])])])]),v._v(" "),t("p",[v._v("无论在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络"),t("strong",[v._v("出现拥塞")]),v._v("（其根据就是没有收到确认），"),t("strong",[v._v("就要把慢开始门限ssthresh设置为出现拥塞时的发送方窗口值的一半（但不能小于2）")]),v._v("。"),t("strong",[v._v("然后把拥塞窗口cwnd重新设置为1")]),v._v("，重新开始慢开始算法。")]),v._v(" "),t("p",[v._v("目的：")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("迅速减少")]),v._v("主机发送到网络中的分组数")]),v._v(" "),t("li",[v._v("使得发生拥塞的路由器有足够时间把队列中积压的分组处理完毕。")])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/a2547555298/imags/raw/master/944365-588901fb01c9aea2.png",alt:"img"}})]),v._v(" "),t("ul",[t("li",[t("p",[t("strong",[v._v("快重传")])]),v._v(" "),t("ul",[t("li",[v._v("发送方只要一连收到3个重复确认就立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器到期。"),t("strong",[v._v("就不会因为超时，误以为网络堵塞开始慢开始算法")])])])]),v._v(" "),t("li",[t("p",[v._v("快恢复")]),v._v(" "),t("p",[v._v("当发送方连续收到3个重复确认后，就：")]),v._v(" "),t("ul",[t("li",[v._v("把 慢开始门限"),t("code",[v._v("（ssthresh）")]),v._v("设置为 出现拥塞时发送方窗口值的一半 = 拥塞窗口的1半")]),v._v(" "),t("li",[v._v("将拥塞窗口"),t("code",[v._v("（cwnd）")]),v._v("值设置为 慢开始门限"),t("code",[v._v("ssthresh")]),v._v("减半后的数值")]),v._v(" "),t("li",[v._v("执行拥塞避免算法，使拥塞窗口缓慢地线性增大。")])])])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/a2547555298/imags/raw/master/%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6.png",alt:"img"}})]),v._v(" "),t("h4",{attrs:{id:"丢包问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#丢包问题"}},[v._v("#")]),v._v(" 丢包问题")]),v._v(" "),t("p",[v._v("TCP是基于不可靠的网络实现可靠传输，可能会存在丢包问题。")]),v._v(" "),t("p",[v._v("为了满足TCP协议不丢包。TCP协议有如下规定：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("数据分块：发送端对数据进行分块（TCP基于字节流），接受端要对数据进行重组，由TCP"),t("strong",[v._v("根据滑动窗口值和拥塞情况")]),v._v("确定分块的大小并控制分块和重组")])]),v._v(" "),t("li",[t("p",[v._v("到达确认：接收端接收到分片数据时，根据分片数据序号向发送端发送一个确认")])]),v._v(" "),t("li",[t("p",[v._v("超时重发：发送方在发送分片时设置超时定时器，如果在定时器超时之后没有收到相应的确认，重发分片数据")])]),v._v(" "),t("li",[t("p",[v._v("滑动窗口：TCP连接的每一方的接受缓冲空间大小固定，接收端只允许另一端发送接收端缓冲区所能接纳的数据，TCP在滑动窗口的基础上提供流量控制，防止较快主机致使较慢主机的缓冲区溢出")])]),v._v(" "),t("li",[t("p",[v._v("失序处理：作为IP数据报来传输的TCP分片到达时可能会失序，TCP将对收到的数据进行重新排序，将收到的数据以正确的顺序交给应用层;")])]),v._v(" "),t("li",[t("p",[v._v("重复处理：作为IP数据报来传输的TCP分块可能会发生重复，TCP的接收端必须丢弃重复的数据;")])]),v._v(" "),t("li",[t("p",[v._v("数据校验：TCP将保持它首部和数据的检验和，这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到分片的检验或有差错，TCP将丢弃这个分片，并不确认收到此报文段导致对端超时并重发")])])]),v._v(" "),t("h4",{attrs:{id:"合并优化算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#合并优化算法"}},[v._v("#")]),v._v(" 合并优化算法")]),v._v(" "),t("p",[t("strong",[v._v("Nagle 算法")])]),v._v(" "),t("p",[v._v("核心思想就是："),t("strong",[v._v("TCP 连接上只能存在一个未被确认的小分组，其余的分组在该分组 ACK 未到达前不能发送")]),v._v("。这些小分组会被收集起来，在 ACK 到来时合并为一个更大的分组发送出去。")]),v._v(" "),t("p",[t("strong",[v._v("延迟 ACK")])]),v._v(" "),t("p",[v._v("接收方收到对方的报文时，不会立即发送 ACK，而是进行了一段时间的延迟。")]),v._v(" "),t("p",[v._v("在这段延迟的时间中：")]),v._v(" "),t("ul",[t("li",[v._v("如果接收方有"),t("strong",[v._v("数据")]),v._v("要发送给发送方，则将要发送的数据与 ACK 一块发送。")]),v._v(" "),t("li",[v._v("如果接收到了更多对方发来的数据，则只需要将 "),t("strong",[v._v("ACK 一并发送")]),v._v("（确认最后一个），而不需要发送多个 ACK。")])]),v._v(" "),t("p",[t("strong",[v._v("Nagle 遇上延迟 ACK")])]),v._v(" "),t("p",[v._v("如果发送方发送了多个小分组给接收方，接收方第一次接收到分组的时候，会对 ACK 进行延迟，而发送方在这个 ACK 到达之前会收集其他小分组等待其到达，"),t("strong",[v._v("造成了一个较大的时延")]),v._v("。因此 "),t("strong",[v._v("Nagle 算法配合延迟 ACK 的效果不是很理想")]),v._v("。")]),v._v(" "),t("h5",{attrs:{id:"粘包问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#粘包问题"}},[v._v("#")]),v._v(" 粘包问题")]),v._v(" "),t("p",[v._v("首先要明确一个概念："),t("strong",[v._v("粘包问题属于应用层的问题，不是 TCP 协议的问题，TCP 协议的任务仅仅是负责将应用层的数据正确的传输")]),v._v("。这往往是使用 TCP 时应用不当而导致的问题。")]),v._v(" "),t("p",[v._v("粘包核心原因在于由于 TCP 协议是面向字节流的，因此它的"),t("strong",[v._v("数据并没有边界")]),v._v("，这就导致接收方收到的数据很可能是几个数据包『粘』在一起的，从而无法对数据进行处理。")]),v._v(" "),t("p",[v._v("解决方法：")]),v._v(" "),t("ol",[t("li",[v._v("标示数据长度以及数据头，服务端获取消息时解析出消息长度，然后向后读取对应长度内容。")]),v._v(" "),t("li",[v._v("将消息设置为定长，若不足则补上固定分隔符。")]),v._v(" "),t("li",[v._v("加入消息边界，服务端按消息边界对消息内容进行划分。")])]),v._v(" "),t("h4",{attrs:{id:"长连接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#长连接"}},[v._v("#")]),v._v(" 长连接")]),v._v(" "),t("p",[v._v("三次握手建立连接后，它们之间的连接并不会主动关闭，后续的读写操作会继续使用这个连接。")]),v._v(" "),t("p",[v._v("保活功能主要为服务器应用提供，服务器应用希望知道客户主机是否崩溃。如果客户已经消失，使得服务器上保留一个半开放的连接，浪费资源。保活功能就是试图检测到客户端的连接是否正常。")]),v._v(" "),t("p",[v._v("如果一个给定的连接在两小时内没有任何的动作，则服务器就向客户发一个探测报文段，客户主机必须处于以下4个状态之一：")]),v._v(" "),t("ol",[t("li",[v._v("客户主机依然正常运行，并从服务器可达。客户的TCP响应正常，而服务器也知道对方是正常的，服务器将保活定时器复位。")]),v._v(" "),t("li",[v._v("客户主机已经崩溃，并且关闭或者正在重新启动。在任何一种情况下，客户的TCP都没有响应。服务端将不能收到对探测的响应，并在75秒后超时。服务器总共发送10个这样的探测 ，每个间隔75秒。如果服务器没有收到一个响应，它就认为客户主机已经关闭并终止连接。")]),v._v(" "),t("li",[v._v("客户主机崩溃并已经重新启动。服务器将收到一个对其保活探测的响应，这个响应是一个复位，使得服务器终止这个连接。")]),v._v(" "),t("li",[v._v("客户机正常运行，但是服务器不可达，这种情况与2类似，TCP能发现的就是没有收到探查的响应。")])]),v._v(" "),t("h3",{attrs:{id:"udp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#udp"}},[v._v("#")]),v._v(" UDP")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/a2547555298/imags/raw/master/UDP%E6%8A%A5%E6%96%87.png",alt:""}})]),v._v(" "),t("p",[t("strong",[v._v("只需要 "),t("code",[v._v("目的 IP 地址")]),v._v("、"),t("code",[v._v("目的端口号")]),v._v(" 这样一个二元组即可唯一确定一个 UDP Socket")]),v._v("。服务器上对应的进程，不在乎你是从哪个客户端来的，我都放进同一个套接字处理，处理完了再根据源端口号和源 IP 地址，把应答信息发送给客户端。")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("特点")]),v._v("：无连接、面向报文、不可靠、无序、速度快、轻量、实时性高（无队首阻塞）")]),v._v(" "),t("li",[t("strong",[v._v("适用场景")]),v._v("：适用于一对多、即时通讯、视频通话等")])]),v._v(" "),t("p",[t("strong",[v._v("伪首部")])]),v._v(" "),t("p",[v._v("伪首部的数据都是从IP数据报头获取的，其目的是让检查数据是否已"),t("strong",[v._v("经正确到达目的地")])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/a2547555298/imags/raw/master/006tNbRwgy1ga46xxgk9vj30j90b6t9n.jpg",alt:""}})]),v._v(" "),t("p",[t("strong",[v._v("使用场景")])]),v._v(" "),t("h5",{attrs:{id:"tcp-与-udp-的对比"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp-与-udp-的对比"}},[v._v("#")]),v._v(" TCP 与 UDP 的对比")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("TCP 是"),t("strong",[v._v("面向字节流")]),v._v("的，它的数据是没有边界的。而 UDP 是"),t("strong",[v._v("面向报文")]),v._v("的，它的数据是有边界的。")])]),v._v(" "),t("li",[t("p",[v._v("TCP 协议可以"),t("strong",[v._v("保证数据的按序、可靠交付")]),v._v("，UDP 无法保证数据的"),t("strong",[v._v("可靠交付")]),v._v("。")])]),v._v(" "),t("li",[t("p",[v._v("TCP 协议是面向连接的，在发送数据前要通过三次握手建立连接，关闭连接需要四次挥手，而 UDP 不需要。")])]),v._v(" "),t("li",[t("p",[v._v("TCP Socket 需要通过 "),t("code",[v._v("目的、源 IP")]),v._v(" 以及 "),t("code",[v._v("目的、源端口号")]),v._v(" 这个四元组唯一确定，而 UDP Socket 只需要通过 "),t("code",[v._v("目的 IP")]),v._v(" 以及 "),t("code",[v._v("目的端口号")]),v._v(" 这个二元组即可唯一确定。")])]),v._v(" "),t("li",[t("p",[v._v("TCP "),t("strong",[v._v("为了保证可靠交付丧失了一定的传输效率")]),v._v("，而 UDP 的传输效率更高。")])]),v._v(" "),t("li",[t("p",[v._v("TCP 的首部在不包含选项字段的情况下有 20 个字节，而 UDP 的首部仅仅有 8 个字节。")])]),v._v(" "),t("li",[t("p",[v._v("TCP 只支持一对一的数据传输，而 UDP 支持一对一、一对多、多对一的数据传输。")])]),v._v(" "),t("li",[t("p",[v._v("TCP 具有拥塞控制，可以进尽量避免网络中出现拥塞，而 UDP 则没有拥塞控制，并不会因为中间网络的拥塞而减小占用的带宽，有可能造成加剧网络拥堵。")])]),v._v(" "),t("li",[t("p",[v._v("TCP应用场景：")])])]),v._v(" "),t("p",[v._v("效率要求相对低，但对准确性要求相对高的场景。因为传输中需要对数据确认、重发、 排序等操作，相比之下效率没有UDP高。举几个例子：文件传输、接受邮件、远程登 录。")]),v._v(" "),t("p",[v._v("UDP应用场景：")]),v._v(" "),t("p",[v._v("效率要求相对高，对准确性要求相对低的场景。举几个例子：QQ聊天、在线视频、网络语音电话、广播通信（广播、多播）。")]),v._v(" "),t("h3",{attrs:{id:"osi"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#osi"}},[v._v("#")]),v._v(" OSI")]),v._v(" "),t("ul",[t("li",[v._v("应用层：为应用程序提供服务并规定应用程序通信相关细节")]),v._v(" "),t("li",[v._v("表示层：将应用程序的数据转化为适合网络传输格式")]),v._v(" "),t("li",[v._v("会话层：负责建立关闭连接，以及数据的分割")]),v._v(" "),t("li",[v._v("传输层：进程之间的传输")]),v._v(" "),t("li",[v._v("网络层：将数据传输到目的地址，负责寻址和路由选择")]),v._v(" "),t("li",[v._v("数据链路层：物理层面上互连节点之间的通信传输，负责帧的生成和接收")]),v._v(" "),t("li",[v._v("物理层：负责0,1与电压高低，光的闪灭之间的互换")])]),v._v(" "),t("p",[t("strong",[v._v("优点")]),v._v("：")]),v._v(" "),t("ul",[t("li",[v._v("由于使用标准接口，每个通信模块可以"),t("strong",[v._v("独立开发")]),v._v("，增加自由度，提高生产效率")]),v._v(" "),t("li",[t("strong",[v._v("增加代码的重复利用率")]),v._v("，由于通信模块的标准化的外在接口，应用程序可以直接使用现成的通信模块，而无需重新编码，这大大减轻了开发者的负担，间接地提供了生产效率。")])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/a2547555298/imags/raw/master/OSI&TCP.png",alt:"img"}})]),v._v(" "),t("p",[v._v("###cookie  session  token")]),v._v(" "),t("p",[v._v("因为HTTP是无状态的，每个请求都是全新的，与之前请求无关。但随着出现需要登录的网站，就要管理会话，"),t("strong",[v._v("记录登录状态")]),v._v("  !!!"),t("strong",[v._v("重点是登录状态，不是用户信息。")])]),v._v(" "),t("h5",{attrs:{id:"session"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#session"}},[v._v("#")]),v._v(" "),t("strong",[v._v("session")])]),v._v(" "),t("p",[v._v("在服务端"),t("strong",[v._v("生成用户相关的 session 数据")]),v._v("，而发给客户端的 "),t("strong",[v._v("sesssion_id")]),v._v(" 存放到 cookie 中，这样用客户端请求时带上 session_id 就可以验证服务器端是否存在 session 数据，以此完成用户认证。")]),v._v(" "),t("p",[v._v("缺点：")]),v._v(" "),t("ul",[t("li",[v._v("服务器需要保存每个的"),t("strong",[v._v("sesssion_id")]),v._v("开销大")]),v._v(" "),t("li",[v._v("如果服务器做了负载均衡，那么下一个操作请求到了另一台服务器session会丢失")])]),v._v(" "),t("h5",{attrs:{id:"token"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#token"}},[v._v("#")]),v._v(" token")]),v._v(" "),t("p",[v._v("在对seesion缺点的改进，可以不保存seesion信息，验证身份。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/a2547555298/imags/raw/master/token%E5%8A%A0%E5%AF%86.png",alt:"image-20210305010853683"}})]),v._v(" "),t("p",[v._v("通过对数据使用只有自己知道的密钥生成签名信息，把这个签名和数据一起作为token ， 由于密钥别人不知道， 就无法伪造token了。")]),v._v(" "),t("p",[v._v("这个token 不保存，当客户端把这个token 发过来的时候，再用同样的HMAC-SHA256 算法和同样的密钥，对数据再计算一次签名，"),t("strong",[v._v("和token 中的签名做个比较")]),v._v("， 如果相同，我就知道是否"),t("strong",[v._v("登录")]),v._v("过了，并且可以直接取到user id , 如果不相同， 数据部分肯定被人篡改过， 就告诉发送者：对不起，没有认证。")]),v._v(" "),t("p",[v._v("基于服务器验证方式暴露的一些问题")]),v._v(" "),t("ol",[t("li",[v._v("**Seesion：**每次认证用户发起请求时，服务器需要去创建一个记录来存储信息。当越来越多的用户发请求时，内存的开销也会不断增加。")]),v._v(" "),t("li",[v._v("**可扩展性：**在服务端的内存中使用Seesion存储登录信息，伴随而来的是可扩展性问题。")]),v._v(" "),t("li",[v._v("**CORS(跨域资源共享)：**当我们需要让数据跨多台移动设备上使用时，跨域资源的共享会是一个让人头疼的问题。在使用Ajax抓取另一个域的资源，就可以会出现禁止请求的情况。")]),v._v(" "),t("li",[v._v("**CSRF(跨站请求伪造)：**用户在访问银行网站时，他们很容易受到跨站请求伪造的攻击，并且能够被利用其访问其他的网站。")])]),v._v(" "),t("p",[t("strong",[v._v("Token特点：")])]),v._v(" "),t("ol",[t("li",[t("p",[v._v("无状态")]),v._v(" "),t("p",[v._v("基于这种无状态和不存储信息，负载负载均衡器能够将用户信息从一个服务传到其他服务器上。")])]),v._v(" "),t("li",[t("p",[v._v("支持移动设备")])]),v._v(" "),t("li",[t("p",[v._v("跨程序调用")]),v._v(" "),t("p",[v._v("能够与其它程序共享权限的Token。")])]),v._v(" "),t("li",[t("p",[v._v("安全")]),v._v(" "),t("p",[v._v("请求中发送token而不再是发送cookie能够防止CSRF(跨站请求伪造)。即使在客户端使用cookie存储token，cookie也仅仅是一个存储机制而不是用于认证。不将信息存储在Session中，让我们少了对session操作。")])])]),v._v(" "),t("blockquote",[t("p",[v._v("#####CSRF")]),v._v(" "),t("p",[v._v("——"),t("strong",[v._v("CSRF")]),v._v("攻击（比如，用户登陆了网页QQ A，此时用户浏览器端存了一个cookie，网页QQ未下线，然后与此同时登陆了一个钓鱼网站B, 网站B接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点qq 浏览器在接收到这些攻击性代码后，根据网站B的请求，在用户不知情的情况下携带Cookie信息，向网站A发出请求。网站A并不知道该请求其实是由B发起的，所以会根据用户C的Cookie信息以C的权限处理该请求，导致来自网站B的恶意代码被执行。 从而B能达到模拟A的权限。")]),v._v(" "),t("p",[v._v("——CSRF防御")]),v._v(" "),t("ol",[t("li",[t("h5",{attrs:{id:"通过referer、token或者验证码来检测用户提交"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通过referer、token或者验证码来检测用户提交"}},[v._v("#")]),v._v(" 通过referer、token或者验证码来检测用户提交")])]),v._v(" "),t("li",[t("h5",{attrs:{id:"尽量不要在页面的链接中暴露用户隐私信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#尽量不要在页面的链接中暴露用户隐私信息"}},[v._v("#")]),v._v(" 尽量不要在页面的链接中暴露用户隐私信息")])]),v._v(" "),t("li",[t("h5",{attrs:{id:"对于用户增删改查操作都用post请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对于用户增删改查操作都用post请求"}},[v._v("#")]),v._v(" 对于用户增删改查操作都用post请求")])]),v._v(" "),t("li",[t("h5",{attrs:{id:"避免全站通用的cookie-严格设置cookie的域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#避免全站通用的cookie-严格设置cookie的域"}},[v._v("#")]),v._v(" 避免全站通用的cookie，严格设置cookie的域")])])])]),v._v(" "),t("p",[v._v("Token 中的数据是"),t("strong",[v._v("明文保存的")]),v._v("， 还是可以被别人看到的， 所以"),t("strong",[v._v("不能在其中保存像密码")]),v._v("这样的敏感信息。")]),v._v(" "),t("p",[v._v("这样一来， 就不保存session id 了， 只是生成token , 然后验证token ， 用CPU计算时间换取了session 存储空间 ！")]),v._v(" "),t("p",[v._v("基于Token的身份验证的过程如下:")]),v._v(" "),t("ol",[t("li",[v._v("用户通过用户名和密码发送请求。")]),v._v(" "),t("li",[v._v("程序验证。")]),v._v(" "),t("li",[v._v("程序返回一个签名的token 给客户端。")]),v._v(" "),t("li",[v._v("客户端储存token,并且每次用于每次发送请求。")]),v._v(" "),t("li",[v._v("服务端验证token并返回数据。")])]),v._v(" "),t("h5",{attrs:{id:"cookie"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cookie"}},[v._v("#")]),v._v(" cookie")]),v._v(" "),t("p",[v._v("Cookie是保存在客户端中的，按在客户端中的存储位置，可分为内存Cookie和硬盘Cookie。")]),v._v(" "),t("ul",[t("li",[v._v("内存Cookie由浏览器维护，保存在内存中，浏览器关闭后就消失了，其存在时间是短暂的。")]),v._v(" "),t("li",[v._v("硬盘Cookie保存在硬盘里，有一个过期时间，除非用户手工清理或到了过期时间，硬盘Cookie不会被删除，其存在时间是长期的。所以，按存在时间，可分为非持久Cookie和持久Cookie。")])]),v._v(" "),t("p",[t("strong",[v._v("cookie的产生")])]),v._v(" "),t("ul",[t("li",[v._v("浏览器携带用户认证信息向服务器发起请求")]),v._v(" "),t("li",[v._v("服务器认证成功，生成cookie。格式为"),t("code",[v._v("key=value")]),v._v("，放入到"),t("code",[v._v("Set-Cookie")]),v._v("字段里，随着响应报文发给浏览器。")]),v._v(" "),t("li",[v._v("浏览器将"),t("code",[v._v("Set-Cookie")]),v._v("字段保存起来，下次请求时会自动将此"),t("code",[v._v("key=value")]),v._v("值放入到"),t("code",[v._v("Cookie")]),v._v("字段中发给服务端。")]),v._v(" "),t("li",[v._v("服务端收到请求报文后，解析cookie，获取用户的身份然后提供个性化的服务。")])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/a2547555298/imags/raw/master/cookie%E4%BA%A7%E7%94%9F%E8%BF%87%E7%A8%8B.png",alt:"img"}})]),v._v(" "),t("p",[t("strong",[v._v("Cookie中的参数设置")])]),v._v(" "),t("p",[v._v("说到这里，应该知道了"),t("code",[v._v("Cookie")]),v._v("就是服务器委托浏览器存储在客户端里的一些数据，而这些数据通常都会记录用户的关键识别信息。所以"),t("code",[v._v("Cookie")]),v._v("需要用一些其他的手段用来保护，防止外泄或者窃取，这些手段就是"),t("code",[v._v("Cookie")]),v._v("的属性。")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("参数名")]),v._v(" "),t("th",[v._v("作用")]),v._v(" "),t("th",[v._v("后端设置方法")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("Max-Age")]),v._v(" "),t("td",[v._v("设置cookie的过期时间，单位为秒")]),v._v(" "),t("td",[t("code",[v._v("cookie.setMaxAge(10)")])])]),v._v(" "),t("tr",[t("td",[v._v("Domain")]),v._v(" "),t("td",[v._v("指定了Cookie所属的域名")]),v._v(" "),t("td",[t("code",[v._v('cookie.setDomain("")')])])]),v._v(" "),t("tr",[t("td",[v._v("Path")]),v._v(" "),t("td",[v._v("指定了Cookie所属的路径")]),v._v(" "),t("td",[t("code",[v._v('cookie.setPath("");')])])]),v._v(" "),t("tr",[t("td",[v._v("HttpOnly")]),v._v(" "),t("td",[v._v("告诉浏览器此Cookie只能用于Http和Https协议传输,禁止其他方式访问")]),v._v(" "),t("td",[t("code",[v._v("cookie.setHttpOnly(true)")])])]),v._v(" "),t("tr",[t("td",[v._v("Secure")]),v._v(" "),t("td",[v._v("告诉浏览器此Cookie只能在Https安全协议中传输,如果是Http则禁止传输")]),v._v(" "),t("td",[t("code",[v._v("cookie.setSecure(true)")])])])])]),v._v(" "),t("p",[v._v("如果没有指定Domain的值，那么其Domain的值是默认为当前所提交的http的请求所对应的主域名的。比如访问 http://www.example.com，返回一个cookie，没有指名domain值，那么其为值为默认的www.example.com。")]),v._v(" "),t("p",[t("strong",[v._v("cookie在安卓端的保存")])]),v._v(" "),t("p",[v._v("构建单例OkhttpClient的时候，设置cookiejar或者拦截器，然后具体的操作（保存Cookie，取Cookie），Okhttp框架就会帮我们自动管理Cookie。我们可以将cookie存储在内存中;")]),v._v(" "),t("p",[v._v("复杂的系统可以使用文件系统用于保存已接受的cookie的数据库。因此，我们就可以通过Map去简单的管理和使用。")]),v._v(" "),t("p",[t("strong",[v._v("有cookie为什么还要seesion")])]),v._v(" "),t("ol",[t("li",[v._v("用session只需要在客户端保存一个id，实际上大量数据都是保存在服务端。如果全部用cookie，数据量大的时候客户端是没有那么多空间的。")]),v._v(" "),t("li",[v._v("cookie只是实现session的其中一种方案。虽然是最常用的，但并不是唯一的方法。")]),v._v(" "),t("li",[v._v("全部在客户端保存，服务端无法验证，这样伪造和仿冒会更加容易。（伪造一个随机的id很难，但伪造另一个用户名是很容易的）")]),v._v(" "),t("li",[v._v("全部保存在客户端，那么一旦被劫持，全部信息都会泄露")]),v._v(" "),t("li",[v._v("客户端数据量变大，网络传输的数据量也会变大")])]),v._v(" "),t("h4",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),t("p",[v._v("Cookie是存储在客户端的")]),v._v(" "),t("p",[v._v("Session是存储在服务端的，可以理解为一个状态列表。拥有一个唯一会话标识"),t("code",[v._v("SessionId")]),v._v("。可以根据"),t("code",[v._v("SessionId")]),v._v("在服务端查询到存储的信息。")]),v._v(" "),t("p",[v._v("Session会引发一个问题，即后端多台机器时Session共享的问题，解决方案可以使用Spring提供的框架。")]),v._v(" "),t("p",[v._v("Token类似一个令牌，无状态的，服务端所需的信息被Base64编码后放到Token中，服务器可以直接解码出其中的数据。")])])}),[],!1,null,null,null);_.default=s.exports}}]);
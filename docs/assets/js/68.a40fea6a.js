(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{474:function(t,a,s){"use strict";s.r(a);var n=s(30),v=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"java基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java基础"}},[t._v("#")]),t._v(" Java基础")]),t._v(" "),s("h2",{attrs:{id:"概念与常识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概念与常识"}},[t._v("#")]),t._v(" 概念与常识")]),t._v(" "),s("h3",{attrs:{id:"特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),s("ol",[s("li",[t._v("简单易学；")]),t._v(" "),s("li",[t._v("面向对象（封装，继承，多态）；")]),t._v(" "),s("li",[t._v("平台无关性（ Java 虚拟机实现平台无关性）；")]),t._v(" "),s("li",[t._v("可靠性；")]),t._v(" "),s("li",[t._v("安全性；")]),t._v(" "),s("li",[t._v("支持多线程（ C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）；")]),t._v(" "),s("li",[t._v("支持网络编程并且很方便（ Java 语言诞生本身就是为简化网络编程设计的，因此 Java 语言不仅支持网络编程而且很方便）；")]),t._v(" "),s("li",[t._v("编译与解释并存；")])]),t._v(" "),s("h3",{attrs:{id:"jvm、jre、jdk"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm、jre、jdk"}},[t._v("#")]),t._v(" JVM、JRE、JDK")]),t._v(" "),s("h4",{attrs:{id:"jvm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm"}},[t._v("#")]),t._v(" JVM")]),t._v(" "),s("p",[t._v("jvm是运行Java字节码的的虚拟机，针对不同的系统有不同的实现，目的是屏蔽操作系统的区别，相同的Java代码在不同的操作系统上，都能运行，运行结果相同")]),t._v(" "),s("p",[t._v("![Java程序运行过程](https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/Java 程序运行过程.png)")]),t._v(" "),s("p",[t._v(".class->机器码 这一步。在这一步 JVM 类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且，有些方法和代码块是经常需要被调用的(也就是所谓的热点代码)，所以后面引进了 JIT 编译器，而 JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。而我们知道，机器码的运行效率肯定是高于 Java 解释器的。这也解释了我们为什么经常会说 Java 是编译与解释共存的语言。")]),t._v(" "),s("h4",{attrs:{id:"jdk"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jdk"}},[t._v("#")]),t._v(" JDK")]),t._v(" "),s("p",[t._v("JDK 是 Java Development Kit 缩写，它是功能齐全的 Java SDK。它拥有 JRE 所拥有的一切，还有编译器（javac）和工具（如 javadoc 和 jdb）。它能够创建和编译程序。")]),t._v(" "),s("h4",{attrs:{id:"jre"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jre"}},[t._v("#")]),t._v(" JRE")]),t._v(" "),s("p",[t._v("JRE 是 Java 运行时环境。它是运行已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，java 命令和其他的一些基础构件。但是，它不能用于创建新程序。")]),t._v(" "),s("p",[t._v("如果要使用 JSP 部署 Web 应用程序，那么从技术上讲，您只是在应用程序服务器中运行 Java 程序。那你为什么需要 JDK 呢？因为应用程序服务器会将 JSP 转换为 Java servlet，并且需要使用 JDK 来编译 servlet")]),t._v(" "),s("h3",{attrs:{id:"java与c"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java与c"}},[t._v("#")]),t._v(" Java与C++")]),t._v(" "),s("h3",{attrs:{id:"java编译与解释"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java编译与解释"}},[t._v("#")]),t._v(" Java编译与解释")]),t._v(" "),s("h2",{attrs:{id:"语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[t._v("#")]),t._v(" 语法")]),t._v(" "),s("h3",{attrs:{id:"字符常量与字符串常量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符常量与字符串常量"}},[t._v("#")]),t._v(" 字符常量与字符串常量")]),t._v(" "),s("ol",[s("li",[t._v("形式上: 字符常量是单引号引起的一个字符; 字符串常量是双引号引起的 0 个或若干个字符")]),t._v(" "),s("li",[t._v("含义上: 字符常量相当于一个整型值( ASCII 值),可以参加表达式运算; 字符串常量代表一个地址值(该字符串在内存中存放位置)")]),t._v(" "),s("li",[t._v("占内存大小 字符常量只占 2 个字节; 字符串常量占若干个字节 ("),s("strong",[t._v("注意： char 在 Java 中占两个字节")]),t._v("),")])]),t._v(" "),s("h3",{attrs:{id:"注释"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注释"}},[t._v("#")]),t._v(" 注释")]),t._v(" "),s("p",[t._v("Java 中的注释有三种：")]),t._v(" "),s("ol",[s("li",[t._v("单行注释")]),t._v(" "),s("li",[t._v("多行注释")]),t._v(" "),s("li",[t._v("文档注释。")])]),t._v(" "),s("h3",{attrs:{id:"常见的关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见的关键字"}},[t._v("#")]),t._v(" 常见的关键字")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("访问控制")]),t._v(" "),s("th",[t._v("private")]),t._v(" "),s("th",[t._v("protected")]),t._v(" "),s("th",[t._v("public")]),t._v(" "),s("th"),t._v(" "),s("th"),t._v(" "),s("th"),t._v(" "),s("th")])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("类，方法和变量修饰符")]),t._v(" "),s("td",[t._v("abstract")]),t._v(" "),s("td",[t._v("class")]),t._v(" "),s("td",[t._v("extends")]),t._v(" "),s("td",[t._v("final")]),t._v(" "),s("td",[t._v("implements")]),t._v(" "),s("td",[t._v("interface")]),t._v(" "),s("td",[t._v("native")])]),t._v(" "),s("tr",[s("td"),t._v(" "),s("td",[t._v("new")]),t._v(" "),s("td",[t._v("static")]),t._v(" "),s("td",[t._v("strictfp")]),t._v(" "),s("td",[t._v("synchronized")]),t._v(" "),s("td",[t._v("transient")]),t._v(" "),s("td",[t._v("volatile")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("程序控制")]),t._v(" "),s("td",[t._v("break")]),t._v(" "),s("td",[t._v("continue")]),t._v(" "),s("td",[t._v("return")]),t._v(" "),s("td",[t._v("do")]),t._v(" "),s("td",[t._v("while")]),t._v(" "),s("td",[t._v("if")]),t._v(" "),s("td",[t._v("else")])]),t._v(" "),s("tr",[s("td"),t._v(" "),s("td",[t._v("for")]),t._v(" "),s("td",[t._v("instanceof")]),t._v(" "),s("td",[t._v("switch")]),t._v(" "),s("td",[t._v("case")]),t._v(" "),s("td",[t._v("default")]),t._v(" "),s("td"),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("错误处理")]),t._v(" "),s("td",[t._v("try")]),t._v(" "),s("td",[t._v("catch")]),t._v(" "),s("td",[t._v("throw")]),t._v(" "),s("td",[t._v("throws")]),t._v(" "),s("td",[t._v("finally")]),t._v(" "),s("td"),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("包相关")]),t._v(" "),s("td",[t._v("import")]),t._v(" "),s("td",[t._v("package")]),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("基本类型")]),t._v(" "),s("td",[t._v("boolean")]),t._v(" "),s("td",[t._v("byte")]),t._v(" "),s("td",[t._v("char")]),t._v(" "),s("td",[t._v("double")]),t._v(" "),s("td",[t._v("float")]),t._v(" "),s("td",[t._v("int")]),t._v(" "),s("td",[t._v("long")])]),t._v(" "),s("tr",[s("td"),t._v(" "),s("td",[t._v("short")]),t._v(" "),s("td",[t._v("null")]),t._v(" "),s("td",[t._v("true")]),t._v(" "),s("td",[t._v("false")]),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("变量引用")]),t._v(" "),s("td",[t._v("super")]),t._v(" "),s("td",[t._v("this")]),t._v(" "),s("td",[t._v("void")]),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("保留字")]),t._v(" "),s("td",[t._v("goto")]),t._v(" "),s("td",[t._v("const")]),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td")])])]),t._v(" "),s("h3",{attrs:{id:"运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[t._v("#")]),t._v(" 运算符")]),t._v(" "),s("h3",{attrs:{id:"contine、break、return"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#contine、break、return"}},[t._v("#")]),t._v(" contine、break、return")]),t._v(" "),s("p",[t._v("在循环结构中，当循环条件不满足或者循环次数达到要求时，循环会正常结束。但是，有时候可能需要在循环的过程中，当发生了某种条件之后 ，提前终止循环，这就需要用到下面几个关键词：")]),t._v(" "),s("ol",[s("li",[t._v("continue ：指跳出当前的这一次循环，继续下一次循环。")]),t._v(" "),s("li",[t._v("break ：指跳出整个循环体，继续执行循环下面的语句。")])]),t._v(" "),s("p",[t._v("return 用于跳出所在方法，结束该方法的运行。return 一般有两种用法：")]),t._v(" "),s("ol",[s("li",[t._v("return; ：直接使用 return 结束方法执行，用于没有返回值函数的方法")]),t._v(" "),s("li",[t._v("return value; ：return 一个特定值，用于有返回值函数的方法")])]),t._v(" "),s("h3",{attrs:{id:"java泛型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java泛型"}},[t._v("#")]),t._v(" Java泛型")]),t._v(" "),s("p",[t._v("泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。")]),t._v(" "),s("p",[t._v("Java 的泛型是伪泛型，这是因为 Java 在编译期间，所有的泛型信息都会被擦掉，这也就是通常所说类型擦除")]),t._v(" "),s("ul",[s("li",[t._v("？ 表示不确定的 java 类型")]),t._v(" "),s("li",[t._v("T (type) 表示具体的一个 java 类型")]),t._v(" "),s("li",[t._v("K V (key value) 分别代表 java 键值中的 Key Value")]),t._v(" "),s("li",[t._v("E (element) 代表 Element")])]),t._v(" "),s("h3",{attrs:{id:"与equals"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#与equals"}},[t._v("#")]),t._v(" == 与equals")]),t._v(" "),s("p",[s("strong",[s("code",[t._v("==")])]),t._v(" : 它的作用是判断两个对象的地址是不是相等。即判断两个对象是不是同一个对象。("),s("strong",[t._v("基本数据类型==比较的是值，引用数据类型==比较的是内存地址")]),t._v(")")]),t._v(" "),s("p",[s("strong",[s("code",[t._v("equals()")])]),t._v(" : 它的作用也是判断两个对象是否相等，它不能用于比较基本数据类型的变量。"),s("code",[t._v("equals()")]),t._v("方法存在于"),s("code",[t._v("Object")]),t._v("类中，而"),s("code",[t._v("Object")]),t._v("类是所有类的直接或间接父类。")]),t._v(" "),s("p",[s("code",[t._v("Object")]),t._v("类"),s("code",[t._v("equals()")]),t._v("方法：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Copy")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("clipboardErrorCopied")]),t._v("\n")])])]),s("p",[s("code",[t._v("equals()")]),t._v(" 方法存在两种使用情况：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("类没有覆盖 "),s("code",[t._v("equals()")]),t._v("方法")]),t._v(" ：通过"),s("code",[t._v("equals()")]),t._v("比较该类的两个对象时，等价于通过“==”比较这两个对象，使用的默认是 "),s("code",[t._v("Object")]),t._v("类"),s("code",[t._v("equals()")]),t._v("方法。")]),t._v(" "),s("li",[s("strong",[t._v("类覆盖了 "),s("code",[t._v("equals()")]),t._v("方法")]),t._v(" ：一般我们都覆盖 "),s("code",[t._v("equals()")]),t._v("方法来比较两个对象中的属性是否相等；若它们的属性相等，则返回 true(即，认为这两个对象相等)。")])]),t._v(" "),s("h3",{attrs:{id:"hashcode-与equals"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashcode-与equals"}},[t._v("#")]),t._v(" hashCode()与equals()")]),t._v(" "),s("h4",{attrs:{id:"hashcode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashcode"}},[t._v("#")]),t._v(" hashCode()")]),t._v(" "),s("p",[t._v("的作用是获取哈希码，也称为散列码；它实际上是返回一个 int 整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。"),s("code",[t._v("hashCode()")]),t._v("定义在 JDK 的 "),s("code",[t._v("Object")]),t._v(" 类中，这就意味着 Java 中的任何类都包含有 "),s("code",[t._v("hashCode()")]),t._v(" 函数。另外需要注意的是： "),s("code",[t._v("Object")]),t._v(" 的 hashcode 方法是本地方法，也就是用 c 语言或 c++ 实现的，该方法通常用来将对象的 内存地址 转换为整数之后返回。")]),t._v(" "),s("h3",{attrs:{id:"基本数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型"}},[t._v("#")]),t._v(" 基本数据类型")]),t._v(" "),s("p",[t._v("Java"),s("strong",[t._v("中")]),t._v("有 8 种基本数据类型，分别为：")]),t._v(" "),s("ol",[s("li",[t._v("6 种数字类型 ：byte、short、int、long、float、double")]),t._v(" "),s("li",[t._v("1 种字符类型：char")]),t._v(" "),s("li",[t._v("1 种布尔型：boolean。")])]),t._v(" "),s("p",[t._v("这八种基本类型都有对应的包装类分别为：Byte、Short、Integer、Long、Float、Double、Character、Boolean")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("基本类型")]),t._v(" "),s("th",[t._v("位数")]),t._v(" "),s("th",[t._v("字节")]),t._v(" "),s("th",[t._v("默认值")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("int")]),t._v(" "),s("td",[t._v("32")]),t._v(" "),s("td",[t._v("4")]),t._v(" "),s("td",[t._v("0")])]),t._v(" "),s("tr",[s("td",[t._v("short")]),t._v(" "),s("td",[t._v("16")]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("0")])]),t._v(" "),s("tr",[s("td",[t._v("long")]),t._v(" "),s("td",[t._v("64")]),t._v(" "),s("td",[t._v("8")]),t._v(" "),s("td",[t._v("0L")])]),t._v(" "),s("tr",[s("td",[t._v("byte")]),t._v(" "),s("td",[t._v("8")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("0")])]),t._v(" "),s("tr",[s("td",[t._v("char")]),t._v(" "),s("td",[t._v("16")]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("'u0000'")])]),t._v(" "),s("tr",[s("td",[t._v("float")]),t._v(" "),s("td",[t._v("32")]),t._v(" "),s("td",[t._v("4")]),t._v(" "),s("td",[t._v("0f")])]),t._v(" "),s("tr",[s("td",[t._v("double")]),t._v(" "),s("td",[t._v("64")]),t._v(" "),s("td",[t._v("8")]),t._v(" "),s("td",[t._v("0d")])]),t._v(" "),s("tr",[s("td",[t._v("boolean")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("false")])])])]),t._v(" "),s("p",[t._v("对于 boolean，官方文档未明确定义，它依赖于 JVM 厂商的具体实现。逻辑上理解是占用 1 位，但是实际中会考虑计算机高效存储因素。")]),t._v(" "),s("p",[t._v("注意：")]),t._v(" "),s("ol",[s("li",[t._v("Java 里使用 long 类型的数据一定要在数值后面加上 "),s("strong",[t._v("L")]),t._v("，否则将作为整型解析：")]),t._v(" "),s("li",[s("code",[t._v("char a = 'h'")]),t._v("char :单引号，"),s("code",[t._v('String a = "hello"')]),t._v(" :双引号")])]),t._v(" "),s("h4",{attrs:{id:"拆箱与装箱"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#拆箱与装箱"}},[t._v("#")]),t._v(" 拆箱与装箱")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("装箱")]),t._v("：将基本类型用它们对应的引用类型包装起来；")]),t._v(" "),s("li",[s("strong",[t._v("拆箱")]),t._v("：将包装类型转换为基本数据类型；")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("int（4字节）")]),t._v(" "),s("th",[t._v("Integer")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("byte（1字节）")]),t._v(" "),s("td",[t._v("Byte")])]),t._v(" "),s("tr",[s("td",[t._v("short（2字节）")]),t._v(" "),s("td",[t._v("Short")])]),t._v(" "),s("tr",[s("td",[t._v("long（8字节）")]),t._v(" "),s("td",[t._v("Long")])]),t._v(" "),s("tr",[s("td",[t._v("float（4字节）")]),t._v(" "),s("td",[t._v("Float")])]),t._v(" "),s("tr",[s("td",[t._v("double（8字节）")]),t._v(" "),s("td",[t._v("Double")])]),t._v(" "),s("tr",[s("td",[t._v("char（2字节）")]),t._v(" "),s("td",[t._v("Character")])]),t._v(" "),s("tr",[s("td",[t._v("boolean（未定）")]),t._v(" "),s("td",[t._v("Boolean")])])])]),t._v(" "),s("p",[t._v("装箱过程是通过调用包装器的valueOf方法实现的，而拆箱过程是通过调用包装器的 xxxValue方法实现的。（xxx代表对应的基本数据类型）。")]),t._v(" "),s("h4",{attrs:{id:"包装类与常量池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#包装类与常量池"}},[t._v("#")]),t._v(" 包装类与常量池")]),t._v(" "),s("p",[t._v("Java 基本类型的包装类的大部分都实现了常量池技术，即 Byte,Short,Integer,Long,Character,Boolean；前面 4 种包装类默认创建了数值[-128，127] 的相应类型的缓存数据，Character 创建了数值在[0,127]范围的缓存数据，Boolean 直接返回 True Or False。如果超出对应范围仍然会去创建新的对象。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IntegerCache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("high"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IntegerCache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cache"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IntegerCache")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" high"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" cache"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" low "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// high value may be configured by property")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" h "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("127")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integerCacheHighPropValue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Use Long.decode here to avoid invoking methods that")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// require Integer's autoboxing cache to be initialized")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("decode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integerCacheHighPropValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("intValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Math")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("127")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Maximum array size is Integer.MAX_VALUE")]),t._v("\n                h "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Math")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("min")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MAX_VALUE "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("low"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            high "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" h"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            cache "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("high "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" low"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" low"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" k "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" k "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" cache"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" k"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                cache"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IntegerCache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("在通过valueOf方法创建Integer对象的时候，如果数值在[-128,127]之间，便返回指向IntegerCache.cache中已经存在的对象的引用；否则创建一个新的Integer对象。")]),t._v(" "),s("p",[t._v("上面的代码中i1和i2的数值为100，因此会直接从cache中取已经存在的对象，所以i1和i2指向的是同一个对象，而i3和i4则是分别指向不同的对象。")]),t._v(" "),s("h3",{attrs:{id:"函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[t._v("#")]),t._v(" 函数")]),t._v(" "),s("h4",{attrs:{id:"返回值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#返回值"}},[t._v("#")]),t._v(" 返回值")]),t._v(" "),s("p",[t._v("方法的返回值是指我们获取到的某个方法体中的代码执行后产生的结果！（前提是该方法可能产生结果）。返回值的作用是接收出结果，使得它可以用于其他的操作！")]),t._v(" "),s("h4",{attrs:{id:"值的传递"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#值的传递"}},[t._v("#")]),t._v(" 值的传递")]),t._v(" "),s("p",[t._v("按值调用(call by value)表示方法接收的是调用者提供的值，而按引用调用（call by reference)表示方法接收的是调用者提供的变量地址。一个方法可以修改传递引用所对应的变量值，而不能修改传递值调用所对应的变量值。 它用来描述各种程序设计语言（不只是 Java)中方法参数传递方式。")]),t._v(" "),s("p",[t._v("Java 程序设计语言总是采用按值调用。也就是说，方法得到的是所有参数值的一个拷贝，也就是说，方法不能修改传递给它的任何参数变量的内容。")]),t._v(" "),s("p",[t._v("方法得到的是对象引用的拷贝，对象引用及其他的拷贝同时引用同一个对象。")]),t._v(" "),s("h4",{attrs:{id:"重载、重写"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重载、重写"}},[t._v("#")]),t._v(" 重载、重写")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("区别点")]),t._v(" "),s("th",[t._v("重载方法")]),t._v(" "),s("th",[t._v("重写方法")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("发生范围")]),t._v(" "),s("td",[t._v("同一个类")]),t._v(" "),s("td",[t._v("子类")])]),t._v(" "),s("tr",[s("td",[t._v("参数列表")]),t._v(" "),s("td",[t._v("必须修改")]),t._v(" "),s("td",[t._v("一定不能修改")])]),t._v(" "),s("tr",[s("td",[t._v("返回类型")]),t._v(" "),s("td",[t._v("可修改")]),t._v(" "),s("td",[t._v("子类方法返回值类型应比父类方法返回值类型更小或相等")])]),t._v(" "),s("tr",[s("td",[t._v("异常")]),t._v(" "),s("td",[t._v("可修改")]),t._v(" "),s("td",[t._v("子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等；")])]),t._v(" "),s("tr",[s("td",[t._v("访问修饰符")]),t._v(" "),s("td",[t._v("可修改")]),t._v(" "),s("td",[t._v("一定不能做更严格的限制（可以降低限制）")])]),t._v(" "),s("tr",[s("td",[t._v("发生阶段")]),t._v(" "),s("td",[t._v("编译期")]),t._v(" "),s("td",[t._v("运行期")])])])]),t._v(" "),s("h4",{attrs:{id:"深、浅拷贝"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#深、浅拷贝"}},[t._v("#")]),t._v(" 深、浅拷贝")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("浅拷贝")]),t._v("：对基本数据类型进行值传递，对引用数据类型进行引用传递般的拷贝，此为浅拷贝。")]),t._v(" "),s("li",[s("strong",[t._v("深拷贝")]),t._v("：对基本数据类型进行值传递，对引用数据类型，创建一个新的对象，并复制其内容，此为深拷贝。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/gdut_deepcode/ImageServer/raw/master/master/img/20210415234514.jpeg",alt:"deep and shallow copy"}})]),t._v(" "),s("h4",{attrs:{id:"方法类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法类型"}},[t._v("#")]),t._v(" 方法类型")]),t._v(" "),s("p",[t._v("无参数无返回值的方法")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 无参数无返回值的方法(如果方法没有返回值，不能不写，必须写void，表示没有返回值)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"无参数无返回值的方法"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Copy")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("clipboardErrorCopied")]),t._v("\n")])])]),s("p",[t._v("2、有参数无返回值的方法")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n* 有参数无返回值的方法\n* 参数列表由零组到多组“参数类型+形参名”组合而成，多组参数之间以英文逗号（,）隔开，形参类型和形参名之间以英文空格隔开\n*/")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"--\x3e"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"--\x3e"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("3、有返回值无参数的方法")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 有返回值无参数的方法（返回值可以是任意的类型,在函数里面必须有return关键字返回对应的类型）")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"有返回值无参数的方法"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("4、有返回值有参数的方法")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 有返回值有参数的方法")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("5、return 在无返回值方法的特殊使用")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// return在无返回值方法的特殊使用")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//表示结束所在方法 （f5方法）的执行,下方的输出语句不会执行")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象"}},[t._v("#")]),t._v(" 对象")]),t._v(" "),s("h2",{attrs:{id:"核心技术"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#核心技术"}},[t._v("#")]),t._v(" 核心技术")])])}),[],!1,null,null,null);a.default=v.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{462:function(a,t,s){"use strict";s.r(t);var n=s(30),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"《java核心技术》"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#《java核心技术》"}},[a._v("#")]),a._v(" 《Java核心技术》")]),a._v(" "),s("blockquote",[s("p",[a._v("原文链接：https://www.yuque.com/beimingyouyu-9woka/computer/po6psi")])]),a._v(" "),s("h1",{attrs:{id:"_1-java的基本程序设计结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-java的基本程序设计结构"}},[a._v("#")]),a._v(" 1 Java的基本程序设计结构")]),a._v(" "),s("hr"),a._v(" "),s("h2",{attrs:{id:"_1-1-一个简单的java应用程序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-一个简单的java应用程序"}},[a._v("#")]),a._v(" 1.1 一个简单的Java应用程序")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FirstSample")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" \n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hello World!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("ol",[s("li",[s("p",[a._v("Java 区分大小写。")])]),a._v(" "),s("li",[s("p",[a._v("关键字 "),s("code",[a._v("public")]),a._v(" 称为访问修饰符，这些修饰符用于控制程序的其他部分对这段代码的访问级别。")])]),a._v(" "),s("li",[s("p",[a._v("关键字 "),s("code",[a._v("class")]),a._v(" 表明 Java 程序中的全部内容都包含在类中。这里，只需要将类作为一个加载程序逻辑的容器，程序逻辑定义了应用程序的行为。Java 应用程序中的全部内容都必须放置在类中。")])]),a._v(" "),s("li",[s("p",[a._v("关键字 "),s("code",[a._v("class")]),a._v(" 后面紧跟类名。")])])]),a._v(" "),s("p",[a._v("4.1) 类名必须以字母开头，长度基本没有限制，但不能使用 Java 保留字作为类名。")]),a._v(" "),s("p",[a._v("4.2) 标准的命名规范为：类名是以大写字母开头的名词，如果名字由多个单词组成，每个单词的第一个字母都应该大写。")]),a._v(" "),s("p",[a._v("4.3) 源代码的文件名必须与公共类的名字相同。")]),a._v(" "),s("ol",{attrs:{start:"5"}},[s("li",[a._v("每个Java程序都必须有一个 "),s("code",[a._v("main")]),a._v(" 方法。")])]),a._v(" "),s("h2",{attrs:{id:"_1-2-注释"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-注释"}},[a._v("#")]),a._v(" 1.2 注释")]),a._v(" "),s("p",[a._v("3种注释方式：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 第一种，其注释内容从//开始到本行结尾。")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/*\n 第二种，适用于长篇注释。\n */")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n * 第三种，可以用来自动地生成文档。\n */")]),a._v("\n")])])]),s("h2",{attrs:{id:"_1-3-数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-数据类型"}},[a._v("#")]),a._v(" 1.3 数据类型")]),a._v(" "),s("p",[a._v("Java 是一种强类型语言。这就意味着必须为每一个变量声明一种类型。在 Java 中，一共有 8 种基本类型，其中有 4 种整型、2 种浮点类型、1 种用于表示 Unicode 编码的字符单元的字符类型 char 和 1 种用于表示真值的 boolean 类型。")]),a._v(" "),s("h3",{attrs:{id:"_1-3-1-整型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-1-整型"}},[a._v("#")]),a._v(" 1.3.1 整型")]),a._v(" "),s("p",[a._v("整型用于表示没有小数部分的数值，它允许是负数。Java 提供了4种整型，见表。")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("类型")]),a._v(" "),s("th",[a._v("存储需求")]),a._v(" "),s("th",[a._v("取值范围")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("byte")]),a._v(" "),s("td",[a._v("1字节")]),a._v(" "),s("td",[a._v("-128~127")])]),a._v(" "),s("tr",[s("td",[a._v("short")]),a._v(" "),s("td",[a._v("2字节")]),a._v(" "),s("td",[a._v("-32768~32767")])]),a._v(" "),s("tr",[s("td",[a._v("int")]),a._v(" "),s("td",[a._v("4字节")]),a._v(" "),s("td",[a._v("-2147483648~2147483647")])]),a._v(" "),s("tr",[s("td",[a._v("long")]),a._v(" "),s("td",[a._v("8字节")]),a._v(" "),s("td",[a._v("-9223372036854775808~9223372036854775807")])])])]),a._v(" "),s("p",[a._v("十六进制数值有一个前缀 "),s("code",[a._v("0x")]),a._v(" 或 "),s("code",[a._v("0X")]),a._v(" 。")]),a._v(" "),s("p",[a._v("八进制有一个前缀 "),s("code",[a._v("0")]),a._v("。")]),a._v(" "),s("p",[a._v("从 Java7 开始，加上前缀 "),s("code",[a._v("0b")]),a._v(" 或 "),s("code",[a._v("0B")]),a._v(" 就可以写二进制数。")]),a._v(" "),s("h3",{attrs:{id:"_1-3-2-浮点类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-2-浮点类型"}},[a._v("#")]),a._v(" 1.3.2 浮点类型")]),a._v(" "),s("p",[a._v("浮点类型用于表示有小数部分的数值。在 Java 中有两种浮点类型，见表。")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("类型")]),a._v(" "),s("th",[a._v("存储需求")]),a._v(" "),s("th",[a._v("取值范围")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("float")]),a._v(" "),s("td",[a._v("4字节")]),a._v(" "),s("td",[a._v("大约±3.40282347E+38F")])]),a._v(" "),s("tr",[s("td",[a._v("double")]),a._v(" "),s("td",[a._v("8字节")]),a._v(" "),s("td",[a._v("大约±1.79769313486231570E+308")])])])]),a._v(" "),s("h3",{attrs:{id:"_1-3-3-char类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-3-char类型"}},[a._v("#")]),a._v(" 1.3.3 char类型")]),a._v(" "),s("p",[s("code",[a._v("char")]),a._v(" 类型的字面量值要用单引号括起来。")]),a._v(" "),s("h3",{attrs:{id:"_1-3-4-boolean类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-4-boolean类型"}},[a._v("#")]),a._v(" 1.3.4 boolean类型")]),a._v(" "),s("p",[s("code",[a._v("boolean")]),a._v(" 类型有两个值："),s("code",[a._v("true")]),a._v(" 和 "),s("code",[a._v("false")]),a._v("，用来判定逻辑条件。整型值和布尔值之间不能进行相互转换。")]),a._v(" "),s("h2",{attrs:{id:"_1-4-变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-变量"}},[a._v("#")]),a._v(" 1.4 变量")]),a._v(" "),s("p",[a._v("变量名必须是一个以字母开头并由字母或数字构成的序列。需要注意，与大多数程序设计语言相比，Java 中“字母”和“数字”的范围更大。字母包括 "),s("code",[a._v("'A'~'Z'")]),a._v("、"),s("code",[a._v("'a'~'z'")]),a._v("、"),s("code",[a._v("'_'")]),a._v("、"),s("code",[a._v("'$'")]),a._v("或在某种语言中表示字母的任何Unicode字符。变量名大小写敏感，长度基本没有限制。")]),a._v(" "),s("h3",{attrs:{id:"_1-4-1-变量初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-1-变量初始化"}},[a._v("#")]),a._v(" 1.4.1 变量初始化")]),a._v(" "),s("p",[a._v("声明一个变量之后，必须用赋值语句对变量进行显式初始化，千万不要使用未初始化的变量。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" vacationDays"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nvacationDays "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("12")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" vacationDays "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("12")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("h3",{attrs:{id:"_1-4-2-常量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-2-常量"}},[a._v("#")]),a._v(" 1.4.2 常量")]),a._v(" "),s("p",[a._v("在 Java 中，利用关键字 "),s("code",[a._v("final")]),a._v(" 指示常量。关键字 "),s("code",[a._v("final")]),a._v(" 表示这个变量只能被赋值一次，一旦被赋值之后，就不能够再更改了。习惯上，常量名使用全大写。")]),a._v(" "),s("h2",{attrs:{id:"_1-5-运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-运算符"}},[a._v("#")]),a._v(" 1.5 运算符")]),a._v(" "),s("p",[a._v("在 Java 中，使用算术运算符 "),s("code",[a._v("+")]),a._v(" 、 "),s("code",[a._v("-")]),a._v(" 、"),s("code",[a._v("*")]),a._v(" 、 "),s("code",[a._v("/")]),a._v(" 表示加、减、乘、除运算。当参与 "),s("code",[a._v("/")]),a._v(" 运算的两个操作数都是整数时，表示整数除法；否则，表示浮点除法。整数的求余操作用 "),s("code",[a._v("%")]),a._v(" 表示。")]),a._v(" "),s("h3",{attrs:{id:"_1-5-1-数学函数与常量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-1-数学函数与常量"}},[a._v("#")]),a._v(" 1.5.1 数学函数与常量")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("double")]),a._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("double")]),a._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Math")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sqrt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//平方根")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("double")]),a._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Math")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("pow")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//幂运算，x的a次幂")]),a._v("\n")])])]),s("h3",{attrs:{id:"_1-5-2-数值类型之间的转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-2-数值类型之间的转换"}},[a._v("#")]),a._v(" 1.5.2 数值类型之间的转换")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/jpeg/1542472/1591275619367-4448e3be-fcf4-417a-a930-9ccccccf5ff5.jpeg",alt:"img"}})]),a._v(" "),s("p",[a._v("实心箭头表示无信息丢失的转换，虚箭头表示可能有精度损失的转换。")]),a._v(" "),s("p",[a._v("当两个类型不同的数值进行二元操作时，先要将两个操作数转换为同一种类型，然后再进行计算。")]),a._v(" "),s("h3",{attrs:{id:"_1-5-3-结合赋值和运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-3-结合赋值和运算符"}},[a._v("#")]),a._v(" 1.5.3 结合赋值和运算符")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nx "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("h3",{attrs:{id:"_1-5-4-自增与自减运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-4-自增与自减运算符"}},[a._v("#")]),a._v(" 1.5.4 自增与自减运算符")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//使用变量原来的值，再做加一操作")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//先完成加一，再使用变量的值")]),a._v("\n")])])]),s("h3",{attrs:{id:"_1-5-5-关系和boolean运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-5-关系和boolean运算符"}},[a._v("#")]),a._v(" 1.5.5 关系和boolean运算符")]),a._v(" "),s("p",[s("code",[a._v("==")]),a._v("、"),s("code",[a._v("!=")]),a._v("、"),s("code",[a._v("<")]),a._v("、"),s("code",[a._v(">")]),a._v("、"),s("code",[a._v("<=")]),a._v("、"),s("code",[a._v(">=")]),a._v(" 运算符。")]),a._v(" "),s("p",[s("code",[a._v("&&")]),a._v(" 表示逻辑“与”运算符，"),s("code",[a._v("||")]),a._v(" 表示逻辑“或”运算符，"),s("code",[a._v("!")]),a._v(" 逻辑“非”运算符。")]),a._v(" "),s("p",[s("code",[a._v("&&")]),a._v(" 和 "),s("code",[a._v("||")]),a._v(" 运算符是按照“短路”方式来求值的：如果第一个操作数已经能够确定表达式的值，第二个操作数就不必计算了。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("condition ? expression1 : expression2\n")])])]),s("h3",{attrs:{id:"_1-5-6-位运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-6-位运算符"}},[a._v("#")]),a._v(" 1.5.6 位运算符")]),a._v(" "),s("p",[a._v("处理整型类型时，可以直接对组成整型数值的各个位完成操作。这意味着可以使用掩码技术得到整数中的各个位。")]),a._v(" "),s("p",[a._v("位运算符包括："),s("code",[a._v("&（“and”）")]),a._v("、"),s("code",[a._v("|（“or”）")]),a._v("、"),s("code",[a._v("^（“xor”）")]),a._v("、"),s("code",[a._v("~（“not”）")]),a._v("。")]),a._v(" "),s("p",[a._v("另外，还有 "),s("code",[a._v(">>")]),a._v(" 和 "),s("code",[a._v("<<")]),a._v(" 运算符将位模式左移或右移。")]),a._v(" "),s("p",[a._v("最后，"),s("code",[a._v(">>>")]),a._v(" 运算符会用 0 填充高位，不存在 "),s("code",[a._v("<<<")]),a._v(" 运算符。")]),a._v(" "),s("h2",{attrs:{id:"_1-6-字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-字符串"}},[a._v("#")]),a._v(" 1.6 字符串")]),a._v(" "),s("p",[a._v("从概念上讲，Java 字符串就是 Unicode 字符序列。")]),a._v(" "),s("h3",{attrs:{id:"_1-6-1-子串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-1-子串"}},[a._v("#")]),a._v(" 1.6.1 子串")]),a._v(" "),s("p",[s("code",[a._v("String")]),a._v(" 类的 "),s("code",[a._v("substring")]),a._v(" 方法可以从一个较大的字符串提取出一个子串。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" greeting "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" s "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" greeting"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("substring")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//从0开始计数，直到3为止，但不包含3。")]),a._v("\n")])])]),s("h3",{attrs:{id:"_1-6-2-拼接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-2-拼接"}},[a._v("#")]),a._v(" 1.6.2 拼接")]),a._v(" "),s("p",[a._v("与绝大多数的程序设计语言一样，Java 语言允许使用 "),s("code",[a._v("+")]),a._v(" 号连接（拼接）两个字符串。")]),a._v(" "),s("p",[a._v("将一个字符串与非字符串的值进行拼接时，后者被转换成字符串。")]),a._v(" "),s("p",[a._v("如果需要把多个字符串放在一起，用一个定界符分隔，可以使用静态 "),s("code",[a._v("join")]),a._v(" 方法：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" all "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("join")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('" / "')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"S"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"M"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"L"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"XL"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("h3",{attrs:{id:"_1-6-3-不可变字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-3-不可变字符串"}},[a._v("#")]),a._v(" 1.6.3 不可变字符串")]),a._v(" "),s("p",[a._v("由于不能修改 Java 字符串中的字符，所以在 Java 文档中将 "),s("code",[a._v("String")]),a._v(" 类对象称为不可变字符串。")]),a._v(" "),s("p",[a._v("不可变字符串的优点：编译器可以让字符串共享。")]),a._v(" "),s("h3",{attrs:{id:"_1-6-4-检测字符串是否相等"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-4-检测字符串是否相等"}},[a._v("#")]),a._v(" 1.6.4 检测字符串是否相等")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("equals")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//检测两个字符串是否相等")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("equalsIgnoreCase")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//不区分大小写")]),a._v("\n")])])]),s("p",[a._v("不能使用 "),s("code",[a._v("==")]),a._v(" 运算符检测两个字符串是否相等！这个运算符只能确定两个字符串是否放置在同一个位置上。")]),a._v(" "),s("p",[a._v("== 和 equals() 的区别：")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("== 是运算符，equals() 是方法")])]),a._v(" "),s("li",[s("p",[a._v("== 是直接比较的两个对象的堆内存地址，如果相等，则说明这两个引用实际是指向同一个对象地址的；equals 可以重写，比较两个对象的内容")])]),a._v(" "),s("li",[s("p",[a._v('对于基本数据类型来说，他们是作为常量在方法区中的常量池里面以 HashSet 策略存起来的，对于字符串常量 "123"、"Hello" 也是相同的道理，在常量池中，一个常量只会对应一个地址，所有他们的引用都是指向的同一个地址，因此基本数据类型和 String 常量是可以直接通过 == 来判断是否相等')])]),a._v(" "),s("li",[s("p",[a._v("对于基本数据的包装类型，除了 Float 和 Double 外，其他的六种都实现了常量池，因此我们也可以直接通过 == 来判断是否相等")])])]),a._v(" "),s("h3",{attrs:{id:"_1-6-5-空串与null串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-5-空串与null串"}},[a._v("#")]),a._v(" 1.6.5 空串与Null串")]),a._v(" "),s("p",[a._v("空串 "),s("code",[a._v('""')]),a._v(" 是长度为0的字符串。"),s("code",[a._v("Null")]),a._v(" 表示目前没有任何对象与该变量关联。")]),a._v(" "),s("h3",{attrs:{id:"_1-6-6-构建字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-6-构建字符串"}},[a._v("#")]),a._v(" 1.6.6 构建字符串")]),a._v(" "),s("p",[a._v("有些时候，需要由较短的字符串构建字符串，例如，按键或来自文件中的单词。采用字符串连接的方式达到此目的效率比较低。每次连接字符串，都会构建一个新的 "),s("code",[a._v("String")]),a._v(" 对象，既耗时，又浪费空间。使用 "),s("code",[a._v("StringBuilder")]),a._v(" 类就可以避免这个问题的发生。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("StringBuilder")]),a._v(" builder "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("StringBuilder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nbuilder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("append")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("ch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nbuilder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("append")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" completedString "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" builder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("在 JDK5.0 中引入 "),s("code",[a._v("StringBuilder")]),a._v(" 类，这个类的前身是 "),s("code",[a._v("StringBuffer")]),a._v(" ，其效率稍微有些低，但允许采用多线程的方式执行添加或删除字符的操作。如果所有字符串在一个单线程中编辑，则应该用 "),s("code",[a._v("StringBuilder")]),a._v(" 替代它。")]),a._v(" "),s("h2",{attrs:{id:"_1-7-输入输出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-输入输出"}},[a._v("#")]),a._v(" 1.7 输入输出")]),a._v(" "),s("h3",{attrs:{id:"_1-7-1-读取输入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-1-读取输入"}},[a._v("#")]),a._v(" 1.7.1 读取输入")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Scanner")]),a._v(" in "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Scanner")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("in"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" in"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("nextLine")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//读取一行")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" firstName "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" in"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//读取一个单词，以空白符作为分隔符")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" in"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("nextInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//读取一个整数")]),a._v("\n")])])]),s("h3",{attrs:{id:"_1-7-2-格式化输出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-2-格式化输出"}},[a._v("#")]),a._v(" 1.7.2 格式化输出")]),a._v(" "),s("h3",{attrs:{id:"_1-7-3-文件输入与输出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-3-文件输入与输出"}},[a._v("#")]),a._v(" 1.7.3 文件输入与输出")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Scanner")]),a._v(" in "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Scanner")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Paths")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"myfile.txt"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"UTF-8"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//读取文件")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PrintWriter")]),a._v(" out "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PrintWriter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"myfile.txt"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"UTF-8"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//写入文件")]),a._v("\n")])])]),s("h2",{attrs:{id:"_1-8-控制流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-控制流程"}},[a._v("#")]),a._v(" 1.8 控制流程")]),a._v(" "),s("p",[a._v("与任何程序设计语言一样，Java 使用条件语句和循环结构确定控制流程。")]),a._v(" "),s("h3",{attrs:{id:"_1-8-1-块作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-1-块作用域"}},[a._v("#")]),a._v(" 1.8.1 块作用域")]),a._v(" "),s("p",[a._v("块（即复合语句）是指由一对大括号括起来的若干条简单的 Java 语句。块确定了变量的作用域。一个块可以嵌套在另一个块中。但是不能在嵌套的两个块中声明同名的变量。")]),a._v(" "),s("h3",{attrs:{id:"_1-8-2-条件语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-2-条件语句"}},[a._v("#")]),a._v(" 1.8.2 条件语句")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("condition"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    statement"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("condition"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    statement"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    statement"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("condition"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    statement"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    statement"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    statement"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h3",{attrs:{id:"_1-8-3-循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-3-循环"}},[a._v("#")]),a._v(" 1.8.3 循环")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("while")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("condition"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    statement"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    statement"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("while")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("condition"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("h3",{attrs:{id:"_1-8-4-确定循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-4-确定循环"}},[a._v("#")]),a._v(" 1.8.4 确定循环")]),a._v(" "),s("p",[s("code",[a._v("for")]),a._v(" 循环语句是支持迭代的一种通用结构，利用每次迭代之后更新的计数器或类似的变量来控制迭代次数。")]),a._v(" "),s("p",[s("code",[a._v("for")]),a._v(" 语句的第一部分通常用于对计数器初始化；第二部分给出每次新一轮循环执行前要检测的循环条件；第三部分指示如何更新计数器。")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("当 "),s("code",[a._v("for")]),a._v(" 语句的第一部分中声明了一个变量之后，这个变量的作用域就为 "),s("code",[a._v("for")]),a._v(" 循环的整个循环体。")])]),a._v(" "),s("li",[s("p",[a._v("如果在 "),s("code",[a._v("for")]),a._v(" 语句内部定义一个变量，这个变量就不能在循环体之外使用。因此，如果希望在 "),s("code",[a._v("for")]),a._v(" 循环体之外使用循环计数器的最终值，就要确保这个变量在循环语句的前面且在外部声明！")])]),a._v(" "),s("li",[s("p",[a._v("可以在各自独立的不同 "),s("code",[a._v("for")]),a._v(" 循环中定义同名的变量。")])])]),a._v(" "),s("h3",{attrs:{id:"_1-8-5-多重选择-switch-语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-5-多重选择-switch-语句"}},[a._v("#")]),a._v(" 1.8.5 多重选择：switch 语句")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("switch")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("choice"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("case")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("case")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("default")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("        \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[s("code",[a._v("switch")]),a._v(" 语句将从与选项值相匹配的 "),s("code",[a._v("case")]),a._v(" 标签处开始执行直到遇到 "),s("code",[a._v("break")]),a._v(" 语句，或者执行到 "),s("code",[a._v("switch")]),a._v(" 语句的结束处为止。如果没有相匹配的 "),s("code",[a._v("case")]),a._v(" 标签，而有 "),s("code",[a._v("default")]),a._v(" 子句，就执行这个子句。")]),a._v(" "),s("p",[s("code",[a._v("case")]),a._v(" 标签可以是：")]),a._v(" "),s("p",[a._v("类型为 "),s("code",[a._v("char")]),a._v("、"),s("code",[a._v("byte")]),a._v("、"),s("code",[a._v("short")]),a._v(" 或 "),s("code",[a._v("int")]),a._v(" 的常量表达式。")]),a._v(" "),s("ul",[s("li",[a._v("枚举常量。")]),a._v(" "),s("li",[a._v("从 Java SE 7 开始，"),s("code",[a._v("case")]),a._v(" 标签还可以是字符串字面量。")])]),a._v(" "),s("h3",{attrs:{id:"_1-8-6-中断控制流程语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-6-中断控制流程语句"}},[a._v("#")]),a._v(" 1.8.6 中断控制流程语句")]),a._v(" "),s("p",[s("code",[a._v("break")]),a._v(" 退出循环语句。")]),a._v(" "),s("p",[s("code",[a._v("continue")]),a._v(" 将控制转移到最内层循环的首部。")]),a._v(" "),s("h2",{attrs:{id:"_1-9-大数值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-大数值"}},[a._v("#")]),a._v(" 1.9 大数值")]),a._v(" "),s("p",[a._v("如果基本的整数和浮点数精度不能够满足需求，那么可以使用 "),s("code",[a._v("java.math")]),a._v(" 包中的两个很有用的类："),s("code",[a._v("BigInteger")]),a._v(" 和 "),s("code",[a._v("BigDecimal")]),a._v("。这两个类可以处理包含任意长度数字序列的数值。"),s("code",[a._v("BigInteger")]),a._v(" 实现了任意精度的整数运算，"),s("code",[a._v("BigDecimal")]),a._v(" 实现了任意精度的浮点数运算。")]),a._v(" "),s("p",[a._v("使用静态的 "),s("code",[a._v("valueOf")]),a._v(" 方法可以将普通的数值转换为大数值：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("BigInteger")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("BigInteger")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("valueOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("不能使用算术运算符（如："),s("code",[a._v("+")]),a._v(" 和 "),s("code",[a._v("*")]),a._v("）处理大数值。而需要使用大数值类中的 "),s("code",[a._v("add")]),a._v(" 和 "),s("code",[a._v("multiply")]),a._v(" 方法。")]),a._v(" "),s("h2",{attrs:{id:"_1-10-数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-10-数组"}},[a._v("#")]),a._v(" 1.10 数组")]),a._v(" "),s("p",[a._v("数组是一种数据结构，用来存储同一类型值的集合。通过一个整型下标可以访问数组中的每一个值。")]),a._v(" "),s("p",[a._v("在声明数组变量时，需要指出数组类型和数组变量的名字。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//声明数组")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//声明数组并初始化")]),a._v("\n")])])]),s("p",[a._v("创建一个数字数组时，所有元素都初始化为 0。"),s("code",[a._v("boolean")]),a._v(" 数组的元素会初始化为 "),s("code",[a._v("false")]),a._v("。对象数组的元素则初始化为 "),s("code",[a._v("null")]),a._v("。")]),a._v(" "),s("p",[a._v("一旦创建了数组，就不能再改变它的大小。")]),a._v(" "),s("h3",{attrs:{id:"_1-10-1-for-each-循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-10-1-for-each-循环"}},[a._v("#")]),a._v(" 1.10.1 for each 循环")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// collection这一集合表达式必须是一个数组或者是一个实现了Iterable接口的类对象")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("variable "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" collection"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    statement"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("有个更加简单的方式打印数组中的所有值，即利用 "),s("code",[a._v("Arrays")]),a._v(" 类的 "),s("code",[a._v("toString")]),a._v(" 方法。调用 "),s("code",[a._v("Arrays.toString(a)")]),a._v("，返回一个包含数组元素的字符串，这些元素被放置在括号内，并用逗号分隔，例如，"),s("code",[a._v('"[2, 3, 5, 7, 11, 13]"')]),a._v("。")]),a._v(" "),s("h3",{attrs:{id:"_1-10-2-数组初始化以及匿名数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-10-2-数组初始化以及匿名数组"}},[a._v("#")]),a._v(" 1.10.2 数组初始化以及匿名数组")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" smallPrimes "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("11")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("13")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//创建数组并初始化")]),a._v("\nsmallPrimes "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("17")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("19")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("23")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//初始化一个匿名数组")]),a._v("\n")])])]),s("p",[a._v("在 Java 中，允许数组长度为 "),s("code",[a._v("0")]),a._v("。在编写一个结果为数组的方法时，如果碰巧结果为空，此时可以创建一个长度为 "),s("code",[a._v("0")]),a._v(" 的数组：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("new elementType[0]\n")])])]),s("p",[a._v("注意，数组长度为 "),s("code",[a._v("0")]),a._v(" 与 "),s("code",[a._v("null")]),a._v(" 不同。")]),a._v(" "),s("h3",{attrs:{id:"_1-10-3-数组拷贝"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-10-3-数组拷贝"}},[a._v("#")]),a._v(" 1.10.3 数组拷贝")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" luckyNumbers "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" smallPrimes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//两个变量引用同一个数组")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 将一个数组的所有值拷贝到新数组中")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" copiedLuckyNumbers "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("copyOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("luckyNumbers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" luckyNumbers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 增加数组的大小")]),a._v("\nluckyNumbers "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("copyOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("luckyNumbers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" luckyNumbers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("h3",{attrs:{id:"_1-10-4-命令行参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-10-4-命令行参数"}},[a._v("#")]),a._v(" 1.10.4 命令行参数")]),a._v(" "),s("p",[a._v("举例：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('java Message -g cruel world arg[0] : "-g" arg[1] : "cruel" arg[2] : "world"\n')])])]),s("h3",{attrs:{id:"_1-10-5-数组排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-10-5-数组排序"}},[a._v("#")]),a._v(" 1.10.5 数组排序")]),a._v(" "),s("p",[a._v("要想对数值型数组进行排序，可以使用 "),s("code",[a._v("Arrays")]),a._v(" 类中的 "),s("code",[a._v("sort")]),a._v(" 方法：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("这个方法使用了优化的快速排序算法。")]),a._v(" "),s("h3",{attrs:{id:"_1-10-6-多维数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-10-6-多维数组"}},[a._v("#")]),a._v(" 1.10.6 多维数组")]),a._v(" "),s("h3",{attrs:{id:"_1-10-7-不规则数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-10-7-不规则数组"}},[a._v("#")]),a._v(" 1.10.7 不规则数组")]),a._v(" "),s("h1",{attrs:{id:"_2-对象与类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-对象与类"}},[a._v("#")]),a._v(" 2 对象与类")]),a._v(" "),s("hr"),a._v(" "),s("h2",{attrs:{id:"_2-1-面向对象程序设计概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-面向对象程序设计概述"}},[a._v("#")]),a._v(" 2.1 面向对象程序设计概述")]),a._v(" "),s("p",[a._v("面向对象程序设计（简称 OOP ）是当今主流的程序设计范型，面向对象的程序是由对象组成的，每个对象包含对用户公开的特定功能部分和隐藏的实现部分。")]),a._v(" "),s("p",[a._v("面向过程程序设计首先要确定如何操作数据，然后再决定如何组织数据，以便于数据操作。而 OOP 却调换了这个次序，将数据放在第一位，然后再考虑操作数据的算法。")]),a._v(" "),s("h3",{attrs:{id:"_2-1-1-类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-类"}},[a._v("#")]),a._v(" 2.1.1 类")]),a._v(" "),s("p",[a._v("类（class）是构造对象的模板或蓝图。由类构造（construct）对象的过程称为创建类的实例（instance）。")]),a._v(" "),s("p",[a._v("封装（encapsulation，有时称为数据隐藏）是与对象有关的一个重要概念。从形式上看，封装不过是将数据和行为组合在一个包中，并对对象的使用者隐藏了数据的实现方式。对象中的数据称为实例域（instance field），操纵数据的过程称为方法（method）。对于每个特定的类实例（对象）都有一组特定的实例域值。这些值的集合就是这个对象的当前状态（state）。")]),a._v(" "),s("p",[a._v("实现封装的关键在于绝对不能让类中的方法直接地访问其他类的实例域。")]),a._v(" "),s("p",[a._v("OOP的另一个原则就是可以通过扩展一个类来建立另外一个新的类。事实上，在 Java 中，所有的类都源自于一个父类 Object。")]),a._v(" "),s("p",[a._v("在扩展一个已有的类时，这个扩展后的新类具有所扩展的类的全部属性和方法。在新类中，只需提供适用于这个新类的新方法和数据域就可以了。通过扩展一个类来建立另外一个类的过程称为继承（inheritance）。")]),a._v(" "),s("h3",{attrs:{id:"_2-1-2-对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-对象"}},[a._v("#")]),a._v(" 2.1.2 对象")]),a._v(" "),s("p",[a._v("对象的三个主要特性：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("对象的行为")])]),a._v(" "),s("li",[s("p",[a._v("对象的状态")])]),a._v(" "),s("li",[s("p",[a._v("对象标识")])])]),a._v(" "),s("p",[a._v("每个对象都保存着描述当前特征的信息，这就是对象的状态。对象的状态可能会随着时间而发生改变，但这种改变不会是自发的，必须通过调用方法实现（如果不经过方法调用就可以改变对象状态，只能说明封装性遭到了破坏）。")]),a._v(" "),s("h3",{attrs:{id:"_2-1-3-类之间的关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-3-类之间的关系"}},[a._v("#")]),a._v(" 2.1.3 类之间的关系")]),a._v(" "),s("p",[a._v("在类之间，最常见的关系有：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("依赖：一个类的方法操纵另一个类的对象")])]),a._v(" "),s("li",[s("p",[a._v("聚合：一个类的对象包含另一个类的对象")])]),a._v(" "),s("li",[s("p",[a._v("继承：一个类继承另一个类")])])]),a._v(" "),s("h2",{attrs:{id:"_2-2-使用预定义类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-使用预定义类"}},[a._v("#")]),a._v(" 2.2 使用预定义类")]),a._v(" "),s("h3",{attrs:{id:"_2-2-1-对象与对象变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-对象与对象变量"}},[a._v("#")]),a._v(" 2.2.1 对象与对象变量")]),a._v(" "),s("p",[a._v("要想使用对象，就必须首先构造对象，并指定其初始状态。然后，对对象应用方法。")]),a._v(" "),s("p",[a._v("在 Java 中，使用构造器（constructor）构造新实例。构造器是一种特殊的方法，用来构造并初始化对象。")]),a._v(" "),s("p",[a._v("构造器的名字应该与类名相同，要想构造一个对象，需要在构造器前面加上 "),s("code",[a._v("new")]),a._v(" 操作符。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//对象")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" deadline"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//对象变量")]),a._v("\n")])])]),s("p",[a._v("一个对象变量并没有实际包含一个对象，而仅仅引用一个对象。在 Java 中，任何对象变量的值都是对存储在另外一个地方额一个对象的引用，"),s("code",[a._v("new")]),a._v(" 操作符的返回值也是一个引用。")]),a._v(" "),s("p",[a._v("局部变量不会自动地初始化为 "),s("code",[a._v("null")]),a._v("，而必须通过调用 "),s("code",[a._v("new")]),a._v(" 或将它们设置为 "),s("code",[a._v("null")]),a._v(" 进行初始化。")]),a._v(" "),s("h3",{attrs:{id:"_2-2-2-更改器方法与访问器方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-更改器方法与访问器方法"}},[a._v("#")]),a._v(" 2.2.2 更改器方法与访问器方法")]),a._v(" "),s("h2",{attrs:{id:"_2-3-用户自定义类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-用户自定义类"}},[a._v("#")]),a._v(" 2.3 用户自定义类")]),a._v(" "),s("p",[a._v("在一个源文件中，文件名必须与 "),s("code",[a._v("public")]),a._v(" 类的名字相匹配，只能有一个公有类，但可以有任意数目的非公有类。")]),a._v(" "),s("p",[a._v("关键字 "),s("code",[a._v("public")]),a._v(" 意味着任何类的任何方法都可以调用这些方法。关键字 "),s("code",[a._v("private")]),a._v(" 确保只有类自身的方法能够访问这些实例域，而其他的类的方法不能够读写这些域。")]),a._v(" "),s("h3",{attrs:{id:"_2-3-1-构造器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-构造器"}},[a._v("#")]),a._v(" 2.3.1 构造器")]),a._v(" "),s("p",[a._v("构造器总是伴随着 "),s("code",[a._v("new")]),a._v(" 操作符的执行被调用，而不能对一个已经存在的对象调用构造器来达到重新设置实例域的目的。")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("构造器与类同名")])]),a._v(" "),s("li",[s("p",[a._v("每个类可以有一个以上的构造器")])]),a._v(" "),s("li",[s("p",[a._v("构造器可以有 0 个、1 个或多个参数")])]),a._v(" "),s("li",[s("p",[a._v("构造器没有返回值")])]),a._v(" "),s("li",[s("p",[a._v("构造器总是伴随着 "),s("code",[a._v("new")]),a._v(" 操作一起调用")])])]),a._v(" "),s("p",[a._v("注意：不要在构造器中定义与实例域重名的局部变量。")]),a._v(" "),s("h3",{attrs:{id:"_2-3-2-隐式参数与显式参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-隐式参数与显式参数"}},[a._v("#")]),a._v(" 2.3.2 隐式参数与显式参数")]),a._v(" "),s("p",[a._v("方法用于操作对象以及存取它们的实例域。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("raiseSalary")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("double")]),a._v(" byPercent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("double")]),a._v(" raise "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" salary "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" byPercent "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    salary "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+=")]),a._v(" raise"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\nnumber007"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("raiseSalary")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("上述方法的调用将执行下列命令：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("double")]),a._v(" raise "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" number007"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("salary "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nnumber007"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("salary "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+=")]),a._v(" raise"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[s("code",[a._v("raiseSalary")]),a._v(" 方法有两个参数。第一个参数称为隐式参数，是出现在方法名前的对象。第二个参数位于方法名后面括号中的数值，这是一个显式参数。")]),a._v(" "),s("p",[a._v("关键词 "),s("code",[a._v("this")]),a._v(" 表示隐式参数。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("raiseSalary")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("double")]),a._v(" byPercent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("double")]),a._v(" raise "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("salary "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" byPercent "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("salary "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+=")]),a._v(" raise"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h3",{attrs:{id:"_2-3-3-final-实例域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-3-final-实例域"}},[a._v("#")]),a._v(" 2.3.3 final 实例域")]),a._v(" "),s("p",[a._v("可以将实例域定义为 "),s("code",[a._v("final")]),a._v("。构建对象时必须初始化这样的域。也就是说，必须确保在每一个构造器执行之后，这个域的值被设置，并且在后面的操作中，不能够再对它进行修改。")]),a._v(" "),s("h2",{attrs:{id:"_2-4-静态域与静态方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-静态域与静态方法"}},[a._v("#")]),a._v(" 2.4 静态域与静态方法")]),a._v(" "),s("h3",{attrs:{id:"_2-4-1-静态域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-1-静态域"}},[a._v("#")]),a._v(" 2.4.1 静态域")]),a._v(" "),s("p",[a._v("如果将域定义为 "),s("code",[a._v("static")]),a._v("，每个类中只有一个这样的域。而每一个对象对于所有的实例域却都有自己的一份拷贝。")]),a._v(" "),s("p",[a._v("即使没有对象，静态域也存在，它属于类，而不属于任何独立的对象。")]),a._v(" "),s("h3",{attrs:{id:"_2-4-2-静态常量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-2-静态常量"}},[a._v("#")]),a._v(" 2.4.2 静态常量")]),a._v(" "),s("h3",{attrs:{id:"_2-4-3-静态方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-3-静态方法"}},[a._v("#")]),a._v(" 2.4.3 静态方法")]),a._v(" "),s("p",[a._v("静态方法是一种不能向对象实施操作的方法，可以认为，静态方法是没有隐式参数（"),s("code",[a._v("this")]),a._v("）的方法。")]),a._v(" "),s("p",[a._v("在下面两种情况下使用静态方法：")]),a._v(" "),s("ul",[s("li",[a._v("一个方法不需要访问对象状态，其所需参数都是通过显式参数提供")]),a._v(" "),s("li",[a._v("一个方法只需要访问类的静态域")])]),a._v(" "),s("h3",{attrs:{id:"_2-4-4-工厂方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-4-工厂方法"}},[a._v("#")]),a._v(" 2.4.4 工厂方法")]),a._v(" "),s("h3",{attrs:{id:"_2-4-5-main-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-5-main-方法"}},[a._v("#")]),a._v(" 2.4.5 main 方法")]),a._v(" "),s("p",[s("code",[a._v("main")]),a._v(" 方法不对任何对象进行操作。事实上，在启动程序时还没有任何一个对象。静态的 "),s("code",[a._v("main")]),a._v(" 方法将执行并创建程序所需要的对象。")]),a._v(" "),s("h2",{attrs:{id:"_2-5-方法参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-方法参数"}},[a._v("#")]),a._v(" 2.5 方法参数")]),a._v(" "),s("p",[a._v("按值调用（call by value）表示方法接收的是调用者提供的值。而按引用调用（call by reference）表示方法接收的是调用者提供的变量地址。")]),a._v(" "),s("p",[a._v("Java 程序设计语言总是按值调用。也就是说，方法得到的是所有参数值的一个拷贝，特别是，方法不能修改传递给它的任何参数变量的内容。")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("一个方法不能修改一个基本数据类型的参数。")])]),a._v(" "),s("li",[s("p",[a._v("一个方法可以改变一个对象参数的状态。")])]),a._v(" "),s("li",[s("p",[a._v("一个方法不能让对象参数引用一个新的对象。")])])]),a._v(" "),s("h2",{attrs:{id:"_2-6-对象构造"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-对象构造"}},[a._v("#")]),a._v(" 2.6 对象构造")]),a._v(" "),s("h3",{attrs:{id:"_2-6-1-重载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-1-重载"}},[a._v("#")]),a._v(" 2.6.1 重载")]),a._v(" "),s("p",[a._v("如果多个方法有相同的名字、不同的参数，便产生了重载。")]),a._v(" "),s("p",[a._v("重载解析：编译器通过用各个方法给出的参数类型与特定方法调用所使用的值类型进行匹配来挑选出具体执行哪个方法。如果编译器找不到匹配的参数，就会产生编译时错误。")]),a._v(" "),s("p",[a._v("Java 允许重载任何方法，而不只是构造器方法。因此要完整的描述一个方法，需要指出方法名以及参数类型，这叫做方法的签名。返回类型不是方法签名的一部分，也就是说，不能有两个名字相同、参数类型也相同却返回不同类型值的方法。")]),a._v(" "),s("h3",{attrs:{id:"_2-6-2-默认域初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-2-默认域初始化"}},[a._v("#")]),a._v(" 2.6.2 默认域初始化")]),a._v(" "),s("p",[a._v("如果在构造器中没有显式地给域赋予初值，那么就会被自动的赋为默认值：数值为 "),s("code",[a._v("0")]),a._v("、布尔型为 "),s("code",[a._v("false")]),a._v("、对象引用为 "),s("code",[a._v("null")]),a._v("。")]),a._v(" "),s("p",[a._v("这是域与局部变量的主要不同点。必须明确的初始化方法中的局部变量。但是，如果没有初始化类中的域，将会被自动初始化为默认值。")]),a._v(" "),s("h3",{attrs:{id:"_2-6-3-无参数的构造器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-3-无参数的构造器"}},[a._v("#")]),a._v(" 2.6.3 无参数的构造器")]),a._v(" "),s("p",[a._v("如果在编写一个类时没有编写构造器，那么系统就会提供一个无参数构造器。这个构造器将所有的实例域设置为默认值。")]),a._v(" "),s("p",[a._v("如果类中提供了至少一个构造器，但是没有提供无参数的构造器，则在构造对象时如果没有提供参数就会被视为不合法。")]),a._v(" "),s("h3",{attrs:{id:"_2-6-4-显式域初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-4-显式域初始化"}},[a._v("#")]),a._v(" 2.6.4 显式域初始化")]),a._v(" "),s("p",[a._v("在执行构造器之前，先执行赋值操作。")]),a._v(" "),s("h3",{attrs:{id:"_2-6-5-调用另一个构造器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-5-调用另一个构造器"}},[a._v("#")]),a._v(" 2.6.5 调用另一个构造器")]),a._v(" "),s("p",[a._v("如果构造器的第一个语句形如 "),s("code",[a._v("this(...)")]),a._v("，这个构造器将调用同一个类的另一个构造器。")]),a._v(" "),s("h3",{attrs:{id:"_2-6-6-初始化块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-6-初始化块"}},[a._v("#")]),a._v(" 2.6.6 初始化块")]),a._v(" "),s("p",[a._v("初始化数据域的方法：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("在构造器中设置值")])]),a._v(" "),s("li",[s("p",[a._v("在声明中赋值")])]),a._v(" "),s("li",[s("p",[a._v("初始化块")])])]),a._v(" "),s("p",[a._v("调用构造器的具体处理步骤：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("所有数据域被初始化为默认值（"),s("code",[a._v("0")]),a._v("、"),s("code",[a._v("false")]),a._v(" 或 "),s("code",[a._v("null")]),a._v("）")])]),a._v(" "),s("li",[s("p",[a._v("按照在类声明中出现的次序，依次执行所有域初始化语句和初始化块")])]),a._v(" "),s("li",[s("p",[a._v("如果构造器第一行调用了第二个构造器，则执行第二个构造器主体")])]),a._v(" "),s("li",[s("p",[a._v("执行这个构造器的主体")])])]),a._v(" "),s("p",[a._v("初始化块要比构造器先执行。")]),a._v(" "),s("h2",{attrs:{id:"_2-7-包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-包"}},[a._v("#")]),a._v(" 2.7 包")]),a._v(" "),s("p",[a._v("Java 允许使用包（package）将类组织起来，使用包的主要原因是确保类名的唯一性。")]),a._v(" "),s("h3",{attrs:{id:"_2-7-1-类的导入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-1-类的导入"}},[a._v("#")]),a._v(" 2.7.1 类的导入")]),a._v(" "),s("p",[a._v("一个类可以使用所属包中的所有类，以及其他包中的公有类（public class）。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 访问另一个包中的公有类")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 方式一")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),a._v("LocalDate")]),a._v(" today "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),a._v("LocalDate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("now")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 方式二")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("util"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("LocalDate")]),a._v(" today "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("LocalDate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("now")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 方式三")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("LocalDate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 如果两个包中有同名的类，并且在代码中都使用")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("util"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),a._v("Date")]),a._v(" deadline "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("util"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),a._v("Date")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("sql"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),a._v("Date")]),a._v(" today "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("sql"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),a._v("Date")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("h3",{attrs:{id:"_2-7-2-将类放入包中"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-2-将类放入包中"}},[a._v("#")]),a._v(" 2.7.2 将类放入包中")]),a._v(" "),s("p",[a._v("要想将一个类放入包中，就必须将包的名字放在源文件的开头，包中定义类的代码之前。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("package")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("com"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("horstmann"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("corejava")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Employee")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("如果没有在源文件中放置 package 语句，这个源文件中的类就被放置在一个默认包（default package）中。默认包是一个没有名字的包。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("javac com/mycompany/PayrollApp.java\njava com.mycompany.PayrollApp\n")])])]),s("h3",{attrs:{id:"_2-7-3-包作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-3-包作用域"}},[a._v("#")]),a._v(" 2.7.3 包作用域")]),a._v(" "),s("p",[a._v("标记为 "),s("code",[a._v("public")]),a._v(" 的部分可以被任意的类使用")]),a._v(" "),s("p",[a._v("标记为 "),s("code",[a._v("private")]),a._v(" 的部分只能被定义它们的类使用")]),a._v(" "),s("p",[a._v("如果没有指定 "),s("code",[a._v("public")]),a._v(" 或 "),s("code",[a._v("private")]),a._v(" ，这个部分（类、方法或变量）可以被同一个包中的所有方法访问")]),a._v(" "),s("h2",{attrs:{id:"_2-8-类路径"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-类路径"}},[a._v("#")]),a._v(" 2.8 类路径")]),a._v(" "),s("h2",{attrs:{id:"_2-9-文档注释"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-9-文档注释"}},[a._v("#")]),a._v(" 2.9 文档注释")]),a._v(" "),s("h2",{attrs:{id:"_2-10-类设计技巧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-10-类设计技巧"}},[a._v("#")]),a._v(" 2.10 类设计技巧")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("一定要保证数据私有")])]),a._v(" "),s("li",[s("p",[a._v("一定要对数据初始化")])]),a._v(" "),s("li",[s("p",[a._v("不要在类中使用过多的基本类型")])]),a._v(" "),s("li",[s("p",[a._v("不是所有的域都需要独立的域访问器和域更改器")])]),a._v(" "),s("li",[s("p",[a._v("将职责过多的类进行分解")])]),a._v(" "),s("li",[s("p",[a._v("类名和方法名要能够体现它们的职责")])]),a._v(" "),s("li",[s("p",[a._v("优先使用不可变的类")])])]),a._v(" "),s("h1",{attrs:{id:"_3-继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-继承"}},[a._v("#")]),a._v(" 3 继承")]),a._v(" "),s("hr"),a._v(" "),s("h2",{attrs:{id:"_3-1-类、父类和子类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-类、父类和子类"}},[a._v("#")]),a._v(" 3.1 类、父类和子类")]),a._v(" "),s("h3",{attrs:{id:"_3-1-1-定义子类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-1-定义子类"}},[a._v("#")]),a._v(" 3.1.1 定义子类")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Manager")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Employee")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("关键字 "),s("code",[a._v("extends")]),a._v(" 表明正在构造的新类派生于一个已存在的类。已存在的类称为父类（parent class），新类称为子类（subclass）。")]),a._v(" "),s("p",[a._v("子类继承父类后，自动的继承父类的域和方法，在设计类的时候，应该将通用的方法放在父类中，而将具有特殊用途的方法放在子类中。")]),a._v(" "),s("p",[a._v("子类继承父类的私有域和私有方法，但没有访问权限。")]),a._v(" "),s("h3",{attrs:{id:"_3-1-2-重写方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2-重写方法"}},[a._v("#")]),a._v(" 3.1.2 重写方法")]),a._v(" "),s("p",[a._v("父类中的有些方法对子类并不一定适用，为此，需要提供一个新的方法来重写（override）父类的方法。")]),a._v(" "),s("p",[a._v("注意：子类不能直接访问父类的私有域。在子类中可以增加域、增加方法或重写父类的方法，然而绝对不能删除继承的任何域和方法。")]),a._v(" "),s("h3",{attrs:{id:"_3-1-3-子类的构造器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-3-子类的构造器"}},[a._v("#")]),a._v(" 3.1.3 子类的构造器")]),a._v(" "),s("p",[a._v("子类可以通过 "),s("code",[a._v("super")]),a._v(" 实现对父类构造器的调用，使用 "),s("code",[a._v("super")]),a._v(" 调用构造器的语句必须是子类构造器的第一条语句。")]),a._v(" "),s("p",[a._v("如果子类的构造器没有显式地调用父类的构造器，则将自动地调用父类默认（没有参数）的构造器。如果父类没有不带参数的构造器，并且在子类中的构造器中又没有显式地调用父类的其他构造器，则 Java 编译器将报告错误。")]),a._v(" "),s("h3",{attrs:{id:"_3-1-4-多态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-4-多态"}},[a._v("#")]),a._v(" 3.1.4 多态")]),a._v(" "),s("p",[a._v("有一个用来判断是否应该设计为继承关系的简单规则，这就是“is-a”规则，它表明子类的每个对象也是父类的对象。")]),a._v(" "),s("p",[a._v("“is-a”规则的另一种表述法是置换法则。它表明程序中出现父类对象的任何地方都可以用子类对象置换。")]),a._v(" "),s("p",[a._v("一个对象变量可以指示多种实际类型的现象称为多态。在 Java 程序设计语言中，对象变量是多态的。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Employee")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\ne "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Employee")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\ne "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Manager")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Manager")]),a._v(" boss "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Manager")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Employee")]),a._v(" staff "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" boss"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("在这个例子中，变量 "),s("code",[a._v("staff")]),a._v(" 和 "),s("code",[a._v("boss")]),a._v(" 引用同一个对象，但编译器将 "),s("code",[a._v("staff")]),a._v(" 看成 "),s("code",[a._v("Employee")]),a._v(" 对象。这意味着，可以这样调用：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("boss.setBonus(5000);\n")])])]),s("p",[a._v("但不能这样调用：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("staff.setBonus(5000);\n")])])]),s("p",[a._v("这是因为 "),s("code",[a._v("staff")]),a._v("声明的类型是 "),s("code",[a._v("Employee")]),a._v("，而 "),s("code",[a._v("setBonus")]),a._v(" 不是 "),s("code",[a._v("Employee")]),a._v(" 类的方法。")]),a._v(" "),s("h3",{attrs:{id:"_3-1-5-理解方法调用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-5-理解方法调用"}},[a._v("#")]),a._v(" 3.1.5 理解方法调用")]),a._v(" "),s("p",[a._v("假设要调用 "),s("code",[a._v("x.f(args)")]),a._v("，隐式参数 "),s("code",[a._v("x")]),a._v("声明为类 "),s("code",[a._v("C")]),a._v(" 的一个对象。")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("编译器查看对象的声明类型和方法名。假设调用 "),s("code",[a._v("x.f(param)")]),a._v("，且隐式参数 "),s("code",[a._v("x")]),a._v(" 声明为 "),s("code",[a._v("C")]),a._v(" 类的对象。需要注意的是：有可能存在多个名字为 "),s("code",[a._v("f")]),a._v("，但参数类型不一样的方法。编译器将会一一列举所有 "),s("code",[a._v("C")]),a._v(" 类中名为 "),s("code",[a._v("f")]),a._v(" 的方法和其父类中访问属性为 "),s("code",[a._v("public")]),a._v(" 且名为 "),s("code",[a._v("f")]),a._v(" 的方法（父类的私有方法不可访问）。")]),a._v(" "),s("p",[a._v("至此，编译器已获得所有可能被调用的候选方法。")])]),a._v(" "),s("li",[s("p",[a._v("编译器将查看调用方法时提供的参数类型。如果在所有名为 "),s("code",[a._v("f")]),a._v(" 的方法中存在一个与提供的参数类型完全匹配的方法，就选择这个方法。这个过程被称为重载解析（overloading resolution）。如果编译器没有找到与参数类型匹配的方法，或者发现经过类型转换后有多个方法与之匹配，就会报告一个错误。")]),a._v(" "),s("p",[a._v("至此，编译器已获得需要调用的方法名字和参数类型。")])]),a._v(" "),s("li",[s("p",[a._v("如果是 "),s("code",[a._v("private")]),a._v(" 方法、"),s("code",[a._v("static")]),a._v(" 方法、"),s("code",[a._v("final")]),a._v(" 方法或者构造器，那么编译器将可以准确的知道应该调用哪个方法，我们称这种调用方式为静态绑定（static binding）。与此对应的是，调用的方法依赖于隐式参数的实际类型，并且在运行时实现动态绑定。")])]),a._v(" "),s("li",[s("p",[a._v("当程序运行，并且采用动态绑定调用方法时，虚拟机一定调用与 "),s("code",[a._v("x")]),a._v(" 所引用对象的实际类型最合适的那个类的方法。假设 "),s("code",[a._v("x")]),a._v(" 的实际类型是 "),s("code",[a._v("D")]),a._v("，它是 "),s("code",[a._v("C")]),a._v(" 的子类，如果 "),s("code",[a._v("D")]),a._v(" 类定义了方法 "),s("code",[a._v("f(param)")]),a._v("，就直接调用它；否则，将在 "),s("code",[a._v("D")]),a._v(" 类的父类中寻找。")])])]),a._v(" "),s("p",[a._v("每次调用方法都要进行搜索，时间开销相当大。因此，虚拟机预先为每个类创建了一个方法表，其中列出了所有方法的签名和实际调用的方法。")]),a._v(" "),s("p",[a._v("**警告：**在重写一个方法的时候，子类方法不能低于父类方法的可见性。特别是，如果父类方法是 "),s("code",[a._v("public")]),a._v("，子类方法一定要声明为 "),s("code",[a._v("public")]),a._v("。")]),a._v(" "),s("h3",{attrs:{id:"_3-1-6-阻止继承-final-类和方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-6-阻止继承-final-类和方法"}},[a._v("#")]),a._v(" 3.1.6 阻止继承：final 类和方法")]),a._v(" "),s("p",[a._v("不允许扩展的类被称为 "),s("code",[a._v("final")]),a._v(" 类。如果在定义类的时候使用了 "),s("code",[a._v("final")]),a._v(" 修饰符就表明这个类是 "),s("code",[a._v("final")]),a._v(" 类。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Executive")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Manager")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("类中的特定方法也可以被声明为 "),s("code",[a._v("final")]),a._v("。如果这样做，子类就不能重写这个方法（"),s("code",[a._v("final")]),a._v(" 类中的所有方法自动地成为 "),s("code",[a._v("final")]),a._v(" 方法）。")]),a._v(" "),s("p",[a._v("**注意：**如果将一个类声明为 "),s("code",[a._v("final")]),a._v(" ，只有其中的方法自动地成为 "),s("code",[a._v("final")]),a._v("，而不包括域。")]),a._v(" "),s("p",[a._v("在早期的 Java 中，有些程序员为了避免动态绑定带来的系统开销而使用 "),s("code",[a._v("final")]),a._v(" 关键字。如果一个方法没有被重写并且很短，编译器就能够对他进行优化处理，这个过程称为内联（inlining）。例如，内联调用 "),s("code",[a._v("e.getName()")]),a._v(" 将被替换为访问 "),s("code",[a._v("e.name")]),a._v(" 域。")]),a._v(" "),s("h3",{attrs:{id:"_3-1-7-强制类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-7-强制类型转换"}},[a._v("#")]),a._v(" 3.1.7 强制类型转换")]),a._v(" "),s("p",[a._v("将一个值存入变量时，编译器将检查是否允许该操作。将一个子类的引用赋给一个父类的变量，编译器是允许的。但将一个父类的引用赋给一个子类变量，必须进行类型转换，这样才能够通过运行时的检查。")]),a._v(" "),s("ul",[s("li",[a._v("只能在继承层次内进行类型转换")]),a._v(" "),s("li",[a._v("在将父类转换成子类之前，应该使用 "),s("code",[a._v("instanceof")]),a._v(" 进行检查")])]),a._v(" "),s("h3",{attrs:{id:"_3-1-8-抽象类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-8-抽象类"}},[a._v("#")]),a._v(" 3.1.8 抽象类")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("包括一个或多个抽象方法的类本身必须被声明为抽象的")])]),a._v(" "),s("li",[s("p",[a._v("除了抽象方法外，抽象类也可以包含具体数据和具体方法")])]),a._v(" "),s("li",[s("p",[a._v("抽象方法充当着占位的角色，它们的具体实现在子类中")])]),a._v(" "),s("li",[s("p",[a._v("类即使不含抽象方法，也可以将类声明为抽象类")])]),a._v(" "),s("li",[s("p",[a._v("抽象类不能被实例化")])]),a._v(" "),s("li",[s("p",[a._v("可以定义一个抽象类的对象变量，但是它只能引用非抽象子类的对象")])])]),a._v(" "),s("h3",{attrs:{id:"_3-1-9-受保护访问"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-9-受保护访问"}},[a._v("#")]),a._v(" 3.1.9 受保护访问")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("private——仅对本类可见")])]),a._v(" "),s("li",[s("p",[a._v("public——对所有类可见")])]),a._v(" "),s("li",[s("p",[a._v("protected——对本包和所有子类可见")])]),a._v(" "),s("li",[s("p",[a._v("默认——对本包可见")])])]),a._v(" "),s("h2",{attrs:{id:"_3-2-object-所有类的父类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-object-所有类的父类"}},[a._v("#")]),a._v(" 3.2 Object：所有类的父类")]),a._v(" "),s("p",[a._v("Object 类是 Java 中所有类的始祖，在 Java 中每个类都是由它扩展而来的。如果没有明确地指出父类，Object 类就被认为是这个类的父类。")]),a._v(" "),s("p",[a._v("可以使用 Object 类型的变量引用任何类型的对象：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('Object obj = new Employee("Harry Hacker", 35000);\n')])])]),s("p",[a._v("当然，Object 类型的变量只能用于作为各种值的通用持有者，要想对其中的内容进行具体的操作，还需要清楚对象的原始类型，并进行相应的类型转换：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("Employee e = (Employee) obj;\n")])])]),s("h3",{attrs:{id:"_3-2-1-equals-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1-equals-方法"}},[a._v("#")]),a._v(" 3.2.1 equals 方法")]),a._v(" "),s("p",[a._v("Object 类中的 "),s("code",[a._v("equals")]),a._v(" 方法用于检测一个对象是否等于另外一个对象。在 Object 类中这个方法将判断两个对象是否具有相同的引用，如果两个对象具有相同的引用，它们一定是相等的。")]),a._v(" "),s("p",[a._v("在子类中定义 "),s("code",[a._v("equals")]),a._v(" 方法时，首先调用父类的 "),s("code",[a._v("equals")]),a._v("。如果检测失败，对象就不可能相等。如果父类中的域都相等，就需要比较子类中的实例域。")]),a._v(" "),s("p",[a._v("Java 语言规范要求 "),s("code",[a._v("equals")]),a._v(" 方法具有下面的特征：")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("自反性：对于任何非空引用 "),s("code",[a._v("x")]),a._v("，"),s("code",[a._v("x.equals(x)")]),a._v(" 应该返回 "),s("code",[a._v("true")]),a._v("。")])]),a._v(" "),s("li",[s("p",[a._v("对称性：对于任何引用 "),s("code",[a._v("x")]),a._v(" 和 "),s("code",[a._v("y")]),a._v("，当且仅当 "),s("code",[a._v("y.equals(x)")]),a._v(" 返回 "),s("code",[a._v("true")]),a._v("，"),s("code",[a._v("x.equals(y)")]),a._v(" 也应该返回 "),s("code",[a._v("true")]),a._v("。")])]),a._v(" "),s("li",[s("p",[a._v("传递性：对于任何引用 "),s("code",[a._v("x")]),a._v("、"),s("code",[a._v("y")]),a._v(" 和 "),s("code",[a._v("z")]),a._v("，如果 "),s("code",[a._v("x.equals(y)")]),a._v(" 返回 "),s("code",[a._v("true")]),a._v("，"),s("code",[a._v("y.equals(z)")]),a._v(" 返回 "),s("code",[a._v("true")]),a._v("，"),s("code",[a._v("x.equals(z)")]),a._v(" 也应该返回 "),s("code",[a._v("true")]),a._v("。")])]),a._v(" "),s("li",[s("p",[a._v("一致性：如果 "),s("code",[a._v("x")]),a._v(" 和 "),s("code",[a._v("y")]),a._v(" 引用的对象没有发生变化，反复调用 "),s("code",[a._v("x.equals(y)")]),a._v(" 应该返回同样的结果。")])]),a._v(" "),s("li",[s("p",[a._v("对于任意非空引用 "),s("code",[a._v("x")]),a._v("，"),s("code",[a._v("x.equals(null)")]),a._v(" 返回 "),s("code",[a._v("false")]),a._v("。")])])]),a._v(" "),s("h3",{attrs:{id:"_3-2-2-hashcode-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-2-hashcode-方法"}},[a._v("#")]),a._v(" 3.2.2 hashCode 方法")]),a._v(" "),s("p",[a._v("散列码（hash code）是由对象导出的一个整型值。散列码是没有规律的，如果 "),s("code",[a._v("x")]),a._v(" 和 "),s("code",[a._v("y")]),a._v(" 是两个不同的对象，"),s("code",[a._v("x.hashCode()")]),a._v(" 与 "),s("code",[a._v("y.hashCode()")]),a._v(" 基本上不会相同。")]),a._v(" "),s("p",[a._v("由于 "),s("code",[a._v("hashCode")]),a._v(" 方法定义在 Object 类中，因此每个对象都有一个默认的散列码，其值为对象的存储地址。")]),a._v(" "),s("p",[s("code",[a._v("Equals")]),a._v(" 与 "),s("code",[a._v("hashCode")]),a._v(" 的定义必须一致：如果 "),s("code",[a._v("x.eqauls(y)")]),a._v(" 返回 "),s("code",[a._v("true")]),a._v("，那么 "),s("code",[a._v("x.hashCode()")]),a._v(" 就必须与 "),s("code",[a._v("y.hashCode()")]),a._v(" 具有相同的值。")]),a._v(" "),s("h3",{attrs:{id:"_3-2-3-tostring-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-3-tostring-方法"}},[a._v("#")]),a._v(" 3.2.3 toString 方法")]),a._v(" "),s("p",[a._v("Object 类定义了 "),s("code",[a._v("toString")]),a._v(" 方法，用来打印输出对象所属的类名和散列码。")]),a._v(" "),s("h2",{attrs:{id:"_3-3-泛型数组列表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-泛型数组列表"}},[a._v("#")]),a._v(" 3.3 泛型数组列表")]),a._v(" "),s("p",[a._v("在许多程序设计语言中，特别是在 C++ 语言中，必须在编译时就确定整个数组的大小。在 Java 中，情况就好多了，它允许在运行时确定数组的大小。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" actualSize "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Employee")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" staff "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Employee")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("actualSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("但是，一旦确定了数组的大小，改变它就不太容易了。在 Java 中，解决这个问题最简单的方法是使用 Java 中另外一个被称为 "),s("code",[a._v("ArrayList")]),a._v(" 的类。它使用起来有点像数组，但在添加或删除元素时，具有自动调节数组容量的功能。")]),a._v(" "),s("p",[s("code",[a._v("ArrayList")]),a._v(" 是一个采用类型参数的泛型类，为了指定数组列表保存的元素对象类型，需要用一对尖括号将类名括起来加在后面，例如，"),s("code",[a._v("ArrayList<Employee>")]),a._v("。")]),a._v(" "),s("p",[a._v("如果调用 "),s("code",[a._v("add")]),a._v(" 且内部数组已经满了，数组列表就将自动地创建一个更大的数组，并将所有的对象从较小的数组中拷贝到较大的数组中。")]),a._v(" "),s("p",[a._v("一旦能过够确认数组列表的大小不再发生变化，就可以调用 "),s("code",[a._v("trimToSize")]),a._v(" 方法。这个方法将存储区域的大小调整为当前元素数量所需要的存储空间数目。垃圾回收器将回收多余的存储空间。")]),a._v(" "),s("h3",{attrs:{id:"_3-3-1-访问数组列表元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-1-访问数组列表元素"}},[a._v("#")]),a._v(" 3.3.1 访问数组列表元素")]),a._v(" "),s("p",[a._v("数组列表要设置第 i 个元素，可以使用 "),s("code",[a._v("staff.set(i, harry);")]),a._v("。它等价于对数组 "),s("code",[a._v("a")]),a._v(" 的元素赋值 "),s("code",[a._v("a[i] = harry;")]),a._v("。")]),a._v(" "),s("p",[a._v("**警告：**使用 "),s("code",[a._v("add")]),a._v(" 方法为数组添加新元素，而不要使用 "),s("code",[a._v("set")]),a._v(" 方法，它只能替换数组中已经存在的元素内容。")]),a._v(" "),s("p",[a._v("数组列表要获取第 i 个元素，可以使用 "),s("code",[a._v("Employee e = staff.get(i);")]),a._v("。它等价于 "),s("code",[a._v("Employee e = a[i];")]),a._v("。")]),a._v(" "),s("p",[a._v("没有泛型类时，原始的 ArrayList 类提供的 "),s("code",[a._v("get")]),a._v(" 方法别无选择只能返回 "),s("code",[a._v("Object")]),a._v("，因此，"),s("code",[a._v("get")]),a._v(" 方法的调用者必须对返回值进行类型转换。")]),a._v(" "),s("p",[a._v("除了在数组列表的尾部追加元素之外，还可以在数组列表的中间插入元素，使用带索引参数的 "),s("code",[a._v("add")]),a._v(" 方法。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" staff"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nstaff"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("为了插入一个新元素，位于 n 之后的所有元素都要向后移动一个位置。如果插入新元素后，数组列表的大小超过了容量，数组列表就会被重新分配存储空间。")]),a._v(" "),s("p",[a._v("同样的，可以从数组列表中间删除一个元素。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Employee")]),a._v(" e "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" staff"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("remove")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("位于这个位置之后的所有元素都向前移动一个位置，并且数组的大小减1。")]),a._v(" "),s("p",[a._v("对数组实施插入和删除元素的操作其效率比较低。对于小型数组来说，这一点不必担心。但如果数组存储的元素数比较多，又经常需要在中间位置插入、删除元素，就应该考虑使用链表了。")]),a._v(" "),s("h3",{attrs:{id:"_3-3-2-类型化与原始数组列表的兼容性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-2-类型化与原始数组列表的兼容性"}},[a._v("#")]),a._v(" 3.3.2 类型化与原始数组列表的兼容性")]),a._v(" "),s("h2",{attrs:{id:"_3-4-对象包装器与自动装箱"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-对象包装器与自动装箱"}},[a._v("#")]),a._v(" 3.4 对象包装器与自动装箱")]),a._v(" "),s("p",[a._v("所有的基本类型都有一个与之对应的类，通常，这些类称为包装器。对象包装器类是不可变的，即一旦构造了包装器，就不允许更改包装在其中的值。同时，对象包装器类还是 "),s("code",[a._v("final")]),a._v("，因此不能定义它们的子类。")]),a._v(" "),s("p",[a._v("假设想定义一个整型数组列表，而尖括号中的类型参数不允许是基本类型，也就是说，不允许写成 "),s("code",[a._v("ArrayList<int>")]),a._v("。这里就用到了 "),s("code",[a._v("Integer")]),a._v(" 对象包装类。我们可以声明一个 "),s("code",[a._v("Integer")]),a._v(" 对象的数组列表。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ArrayList")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" list "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ArrayList")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 自动装箱")]),a._v("\nlist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nlist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("valueOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 自动拆箱")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("intValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("ul",[s("li",[s("p",[a._v("由于包装器类引用可以为 "),s("code",[a._v("null")]),a._v("，所以自动装箱有可能会抛出一个 "),s("code",[a._v("NullPointerException")]),a._v(" 异常。")])]),a._v(" "),s("li",[s("p",[a._v("如果在一个条件表达式中混合使用 "),s("code",[a._v("Integer")]),a._v(" 和 "),s("code",[a._v("Double")]),a._v(" 类型，"),s("code",[a._v("Integer")]),a._v(" 值就会拆箱，提升为 "),s("code",[a._v("double")]),a._v("，再装箱为 "),s("code",[a._v("Double")]),a._v("。")])]),a._v(" "),s("li",[s("p",[a._v("装箱和拆箱是编译器认可的，而不是虚拟机。编译器在生成类的字节码时，插入必要的方法调用。虚拟机只是执行这些字节码。")])])]),a._v(" "),s("h2",{attrs:{id:"_3-5-枚举类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-枚举类"}},[a._v("#")]),a._v(" 3.5 枚举类")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("enum")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Size")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("SMALL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" MEDIUM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" LARGE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" EXTRA_LARGE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("实际上，这个声明定义的类型是一个类，它刚好有 4 个实例，在此尽量不要构造新对象。")]),a._v(" "),s("p",[a._v("因此，在比较两个枚举类型的值时，永远不需要调用 "),s("code",[a._v("equals")]),a._v("，而直接使用 "),s("code",[a._v("==")]),a._v(" 就可以了。")]),a._v(" "),s("h2",{attrs:{id:"_3-6-反射"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-反射"}},[a._v("#")]),a._v(" 3.6 反射")]),a._v(" "),s("p",[a._v("能够分析类能力的程序称为反射（reflective）。反射机制的功能极其强大，在下面可以看到，反射机制可以用来：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("在运行时分析类的能力")])]),a._v(" "),s("li",[s("p",[a._v("在运行时查看对象")])]),a._v(" "),s("li",[s("p",[a._v("实现通用的数组操作代码")])]),a._v(" "),s("li",[s("p",[a._v("利用 "),s("code",[a._v("Method")]),a._v(" 对象")])])]),a._v(" "),s("h3",{attrs:{id:"_3-6-1-class-类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-1-class-类"}},[a._v("#")]),a._v(" 3.6.1 Class 类")]),a._v(" "),s("p",[a._v("在程序运行期间，Java 运行时系统始终为所有的对象维护一个被称为运行时的类型标识。这个信息跟踪着每个对象所属的类，虚拟机利用运行时类型信息选择相应的方法执行。")]),a._v(" "),s("p",[a._v("然而，可以通过专门的 Java 类访问这些信息，保存这些信息的类被称为 Class，Object 类中的 "),s("code",[a._v("getClass()")]),a._v(" 方法将会返回一个 Class 类型的实例。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Employee")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" className "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"java.util.Random"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("forName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("className"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("虚拟机为每个类型管理一个 Class 对象，因此可以利用 "),s("code",[a._v("==")]),a._v(" 运算符实现两个类对象比较的操作。")]),a._v(" "),s("p",[s("code",[a._v("newInstance()")]),a._v(" 方法可以用来动态的创建一个类的实例。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("newInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("创建了一个与 "),s("code",[a._v("e")]),a._v(" 具有相同类类型的实例，"),s("code",[a._v("newInstance()")]),a._v(" 方法调用默认的构造器（没有参数的构造器）初始化新创建的对象，如果这个类没有默认的构造器，就会抛出一个异常。")]),a._v(" "),s("h3",{attrs:{id:"_3-6-2-捕获异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-2-捕获异常"}},[a._v("#")]),a._v(" 3.6.2 捕获异常")]),a._v(" "),s("p",[a._v("异常有两种类型：未检查异常和已检查异常。")]),a._v(" "),s("p",[a._v("对于已检查异常，编译器将会检查是否提供了“捕获异常”的处理器。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    statement that might "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throw")]),a._v(" exceptions\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Exception")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    handler action\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h3",{attrs:{id:"_3-6-3-利用反射分析类的能力"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-3-利用反射分析类的能力"}},[a._v("#")]),a._v(" 3.6.3 利用反射分析类的能力")]),a._v(" "),s("h3",{attrs:{id:"_3-6-4-在运行时使用反射分析对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-4-在运行时使用反射分析对象"}},[a._v("#")]),a._v(" 3.6.4 在运行时使用反射分析对象")]),a._v(" "),s("h3",{attrs:{id:"_3-6-5-调用任意方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-5-调用任意方法"}},[a._v("#")]),a._v(" 3.6.5 调用任意方法")]),a._v(" "),s("h2",{attrs:{id:"_3-7-继承的设计技巧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-继承的设计技巧"}},[a._v("#")]),a._v(" 3.7 继承的设计技巧")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("将公共操作和域放在父类")])]),a._v(" "),s("li",[s("p",[a._v("不要使用受保护的域")])]),a._v(" "),s("li",[s("p",[a._v("使用继承实现“is-a”关系")])]),a._v(" "),s("li",[s("p",[a._v("除非所有继承的方法都有意义，否则不要使用继承")])]),a._v(" "),s("li",[s("p",[a._v("在覆盖方法时，不要改变预期的行为")])]),a._v(" "),s("li",[s("p",[a._v("使用多态，而非类型信息")])]),a._v(" "),s("li",[s("p",[a._v("不要过多的使用反射")])])]),a._v(" "),s("h1",{attrs:{id:"_4-接口、lambda表达式与内部类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-接口、lambda表达式与内部类"}},[a._v("#")]),a._v(" 4 接口、lambda表达式与内部类")]),a._v(" "),s("hr"),a._v(" "),s("h2",{attrs:{id:"_4-1-接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-接口"}},[a._v("#")]),a._v(" 4.1 接口")]),a._v(" "),s("h3",{attrs:{id:"_4-1-1-接口概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-接口概念"}},[a._v("#")]),a._v(" 4.1.1 接口概念")]),a._v(" "),s("p",[a._v("在 Java 程序设计语言中，接口不是类，而是对类的一组需求描述，这些类要遵从接口描述的统一格式进行定义。")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("接口中的所有方法自动地属于 "),s("code",[a._v("public")]),a._v("。因此，在接口中声明方法时，不必提供关键字 "),s("code",[a._v("public")]),a._v("。")])]),a._v(" "),s("li",[s("p",[a._v("接口中可以定义常量。")])]),a._v(" "),s("li",[s("p",[a._v("接口绝不能含有实例域。")])]),a._v(" "),s("li",[s("p",[a._v("在 Java SE 8 之前，不能在接口中实现方法。")])]),a._v(" "),s("li",[s("p",[a._v("提供实例域和方法实现的任务应该由实现接口的那个类来完成。")])])]),a._v(" "),s("h3",{attrs:{id:"_4-1-2-接口的特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-2-接口的特性"}},[a._v("#")]),a._v(" 4.1.2 接口的特性")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("接口不是类，尤其不能使用 "),s("code",[a._v("new")]),a._v(" 运算符实例化一个接口。")])]),a._v(" "),s("li",[s("p",[a._v("尽管不能构造接口的对象，却能声明接口的变量，接口变量必须引用实现了接口的类对象。")])]),a._v(" "),s("li",[s("p",[a._v("可以使用 "),s("code",[a._v("instanceof")]),a._v(" 检查一个对象是否实现了某个特定的接口。")])]),a._v(" "),s("li",[s("p",[a._v("与可以建立类的继承关系一样，接口也可以被扩展。这里允许存在多条从具有较高通用性的接口到较高专用性的接口的链。")])])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("interface")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Powered")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Moveable")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("ul",[s("li",[a._v("虽然在接口中不能包含实例域或静态方法，但却可以包含常量。")]),a._v(" "),s("li",[a._v("接口中的域将被自动设为 "),s("code",[a._v("public static final")]),a._v("。")])]),a._v(" "),s("h3",{attrs:{id:"_4-1-3-接口与抽象类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-3-接口与抽象类"}},[a._v("#")]),a._v(" 4.1.3 接口与抽象类")]),a._v(" "),s("h3",{attrs:{id:"_4-1-4-静态方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-4-静态方法"}},[a._v("#")]),a._v(" 4.1.4 静态方法")]),a._v(" "),s("p",[a._v("在 Java SE 8 中，允许在接口中增加静态方法。")]),a._v(" "),s("h3",{attrs:{id:"_4-1-5-默认方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-5-默认方法"}},[a._v("#")]),a._v(" 4.1.5 默认方法")]),a._v(" "),s("p",[a._v("可以为接口方法提供一个默认实现，必须用 "),s("code",[a._v("default")]),a._v(" 修饰符标记这样一个方法。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("interface")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Comparable")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("default")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("compareTo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),a._v(" other"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h3",{attrs:{id:"_4-1-6-解决默认方法冲突"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-6-解决默认方法冲突"}},[a._v("#")]),a._v(" 4.1.6 解决默认方法冲突")]),a._v(" "),s("ol",[s("li",[a._v("父类优先。如果父类提供了一个具体方法，同名而且有相同参数类型的默认方法会被忽略。")]),a._v(" "),s("li",[a._v("接口冲突。如果一个父接口提供了一个默认方法，另外一个接口提供了一个同名而且参数类型（不论是否是默认参数）相同的方法，必须重写这个方法来解决冲突。")])]),a._v(" "),s("h2",{attrs:{id:"_4-2-接口示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-接口示例"}},[a._v("#")]),a._v(" 4.2 接口示例")]),a._v(" "),s("h3",{attrs:{id:"_4-2-1-接口与回调"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-1-接口与回调"}},[a._v("#")]),a._v(" 4.2.1 接口与回调")]),a._v(" "),s("p",[a._v("回调（callback）是一种常见的程序设计模式。在这种模式中，可以指出某个特定事件发生时应该采取的动作。")]),a._v(" "),s("h3",{attrs:{id:"_4-2-2-comparator-接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-2-comparator-接口"}},[a._v("#")]),a._v(" 4.2.2 Comparator 接口")]),a._v(" "),s("h3",{attrs:{id:"_4-2-3-对象克隆"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-3-对象克隆"}},[a._v("#")]),a._v(" 4.2.3 对象克隆")]),a._v(" "),s("h2",{attrs:{id:"_4-3-lambda-表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-lambda-表达式"}},[a._v("#")]),a._v(" 4.3 lambda 表达式")]),a._v(" "),s("h3",{attrs:{id:"_4-3-1-为什么引用-lambda-表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-1-为什么引用-lambda-表达式"}},[a._v("#")]),a._v(" 4.3.1 为什么引用 lambda 表达式")]),a._v(" "),s("p",[a._v("lambda 表达式是一个可传递的代码块，可以在以后执行一次或多次。")]),a._v(" "),s("h3",{attrs:{id:"_4-3-2-lambda-表达式的语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-2-lambda-表达式的语法"}},[a._v("#")]),a._v(" 4.3.2 lambda 表达式的语法")]),a._v(" "),s("p",[a._v("参数，箭头以及一个表达式。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" first"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" second"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" first"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("length")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v(" second"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("length")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" first"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" second"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("first"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("length")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" second"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("length")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("first"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("length")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" second"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("length")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("即使 lambda 表达式没有参数，仍然要提供空括号，就像无参数方法一样。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("如果可以推导出一个 lambda 表达式的参数类型，则可以忽略其类型。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Comparator")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" comp "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("first"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" second"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" first"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("length")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v(" second"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("length")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("在这里，编译器可以推导出 first 和 second 必然是字符串，因为这个 lambda 表达式将赋给一个字符串比较器。")]),a._v(" "),s("p",[a._v("如果方法只有一个参数，而且这个参数的类型可以推导得出，那么甚至可以省略小括号。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ActionListener")]),a._v(" listener "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" event "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"The time is "')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("h3",{attrs:{id:"_4-3-3-函数式接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-3-函数式接口"}},[a._v("#")]),a._v(" 4.3.3 函数式接口")]),a._v(" "),s("p",[a._v("对于只有一个抽象方法的接口，需要这种接口的对象时，就可以提供一个 lambda 表达式。这种接口称为函数式接口。")]),a._v(" "),s("h3",{attrs:{id:"_4-3-4-方法引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-4-方法引用"}},[a._v("#")]),a._v(" 4.3.4 方法引用")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Timer")]),a._v(" t "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Timer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" event "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("event"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Timer")]),a._v(" t "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Timer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("表达式 "),s("code",[a._v("System.out::println")]),a._v(" 是一个方法引用，它等价于 lambda 表达式 "),s("code",[a._v("x -> System.out.println(x)")]),a._v("。")]),a._v(" "),s("h3",{attrs:{id:"_4-3-5-构造器引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-5-构造器引用"}},[a._v("#")]),a._v(" 4.3.5 构造器引用")]),a._v(" "),s("p",[a._v("构造器引用与方法引用很类似，只不过方法名为 "),s("code",[a._v("new")]),a._v("。例如，"),s("code",[a._v("Person::new")]),a._v(" 是 Person 构造器的一个引用。")]),a._v(" "),s("h3",{attrs:{id:"_4-3-6-变量作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-6-变量作用域"}},[a._v("#")]),a._v(" 4.3.6 变量作用域")]),a._v(" "),s("p",[a._v("lambda 表达式可以捕获外围作用域中变量的值，并且只能引用值不会改变的变量。")]),a._v(" "),s("h3",{attrs:{id:"_4-3-7-处理-lambda-表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-7-处理-lambda-表达式"}},[a._v("#")]),a._v(" 4.3.7 处理 lambda 表达式")]),a._v(" "),s("h2",{attrs:{id:"_4-4-内部类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-内部类"}},[a._v("#")]),a._v(" 4.4 内部类")]),a._v(" "),s("p",[a._v("内部类是定义在另一个类中的类。")]),a._v(" "),s("p",[a._v("为什么需要使用内部类呢？其主要原因主要有以下三点：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("内部类方法可以访问该类定义所在的作用域中的数据，包括私有的数据。")])]),a._v(" "),s("li",[s("p",[a._v("内部类可以对同一个包中的其他类隐藏起来。")])]),a._v(" "),s("li",[s("p",[a._v("当想要定义一个回调函数且不想编写大量代码时，使用匿名内部类比较便捷。")])])]),a._v(" "),s("h3",{attrs:{id:"_4-4-1-使用内部类访问对象状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-1-使用内部类访问对象状态"}},[a._v("#")]),a._v(" 4.4.1 使用内部类访问对象状态")]),a._v(" "),s("p",[a._v("内部类既可以访问自身的数据域，也可以访问创建它的外部类对象的数据域。")]),a._v(" "),s("p",[a._v("内部类的对象总有一个隐式引用，它指向了创建它的外部类对象。")]),a._v(" "),s("p",[a._v("注：TimePrinter 为 TalkingClock 的内部类。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1542472/1592299001521-66b01d3e-f946-4a6a-b876-5c47cda115c2.png",alt:"img"}})]),a._v(" "),s("p",[a._v("外部类的引用在构造器中设置，编译器修改了所有的内部类的构造器，添加一个外部类引用的参数。")]),a._v(" "),s("p",[a._v("只有内部类可以是私有类，而常规类只可以具有包可见性，或公有可见性。")]),a._v(" "),s("h3",{attrs:{id:"_4-4-2-内部类的特殊语法规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-2-内部类的特殊语法规则"}},[a._v("#")]),a._v(" 4.4.2 内部类的特殊语法规则")]),a._v(" "),s("p",[s("code",[a._v("OuterClass.this")]),a._v(" 表示外部类引用。")]),a._v(" "),s("p",[a._v("如果内部类是 "),s("code",[a._v("public")]),a._v("，在外部类的作用域之外，可以这样引用内部类："),s("code",[a._v("OuterClass.InnerClass")]),a._v("。")]),a._v(" "),s("p",[a._v("内部类中声明的所有静态域都必须是 "),s("code",[a._v("final")]),a._v("。原因很简单，我们希望一个静态域只有一个实例，不过对于每个外部对象，会分别有一个单独的内部类实例。如果这个域不是 "),s("code",[a._v("final")]),a._v("，它可能就不是唯一的。")]),a._v(" "),s("p",[a._v("内部类不能有 "),s("code",[a._v("static")]),a._v(" 方法。")]),a._v(" "),s("h3",{attrs:{id:"_4-4-3-内部类是否有用、必要和安全"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-3-内部类是否有用、必要和安全"}},[a._v("#")]),a._v(" 4.4.3 内部类是否有用、必要和安全")]),a._v(" "),s("p",[a._v("内部类是一种编译器现象，与虚拟机无关。编译器将会把内部类翻译成用 "),s("code",[a._v("$（美元符号）")]),a._v(" 分隔外部类名与内部类名的常规类文件，而虚拟机则对此一无所知。")]),a._v(" "),s("h3",{attrs:{id:"_4-4-4-局部内部类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-4-局部内部类"}},[a._v("#")]),a._v(" 4.4.4 局部内部类")]),a._v(" "),s("p",[a._v("局部类不能用 "),s("code",[a._v("public")]),a._v(" 或 "),s("code",[a._v("private")]),a._v(" 访问修饰符进行声明，它的作用域被限定在声明这个局部类的块中。")]),a._v(" "),s("p",[a._v("局部类有一个优势，即对外部世界可以完全地隐藏起来。即使外部类中的其他代码也不能访问它。")]),a._v(" "),s("h3",{attrs:{id:"_4-4-5-由外部方法访问变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-5-由外部方法访问变量"}},[a._v("#")]),a._v(" 4.4.5 由外部方法访问变量")]),a._v(" "),s("p",[a._v("与其他内部类相比较，局部类还有一个优点，它们不仅能够访问包含它们的外部类，还可以访问局部变量。不过，那些局部变量必须事实上为 "),s("code",[a._v("final")]),a._v("。")]),a._v(" "),s("h3",{attrs:{id:"_4-4-6-匿名内部类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-6-匿名内部类"}},[a._v("#")]),a._v(" 4.4.6 匿名内部类")]),a._v(" "),s("p",[a._v("由于构造器的名字必须与类名相同，而匿名类没有类名，所以，匿名类不能有构造器。取而代之的是，将构造器参数传递给父类构造器。")]),a._v(" "),s("h3",{attrs:{id:"_4-4-7-静态内部类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-7-静态内部类"}},[a._v("#")]),a._v(" 4.4.7 静态内部类")]),a._v(" "),s("p",[a._v("有时候，使用内部类只是为了把一个类隐藏在另外一个类的内部，并不需要内部类引用外部类对象。为此，可以将内部类声明为 "),s("code",[a._v("static")]),a._v("，以便取消产生的引用。")]),a._v(" "),s("p",[a._v("与常规内部类不同，静态内部类可以有静态域和方法。")]),a._v(" "),s("p",[a._v("声明在接口中的内部类自动成为 "),s("code",[a._v("static")]),a._v(" 和 "),s("code",[a._v("public")]),a._v(" 类。")]),a._v(" "),s("h1",{attrs:{id:"_5-异常、断言和日志"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-异常、断言和日志"}},[a._v("#")]),a._v(" 5 异常、断言和日志")]),a._v(" "),s("hr"),a._v(" "),s("h2",{attrs:{id:"_5-1-处理错误"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-处理错误"}},[a._v("#")]),a._v(" 5.1 处理错误")]),a._v(" "),s("p",[a._v("异常处理的任务就是将控制权从错误产生的地方转移给能够处理这种情况的错误处理器。")]),a._v(" "),s("p",[a._v("需要关注的问题：")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("用户输入错误")])]),a._v(" "),s("li",[s("p",[a._v("设备错误")])]),a._v(" "),s("li",[s("p",[a._v("物理限制")])]),a._v(" "),s("li",[s("p",[a._v("代码错误")])])]),a._v(" "),s("p",[a._v("在 Java 中，如果某个方法不能够采用正常的途径完成它的任务，就可以通过另外一个路径退出方法。在这种情况下，方法并不返回任何值，而是抛出一个封装了错误信息的对象。需要注意的是，这个方法将会立刻退出，并不返回任何值。此外，调用这个方法的代码也将无法继续执行，取而代之的是，异常处理机制开始搜索能过够处理这种异常状况的异常处理器。")]),a._v(" "),s("h3",{attrs:{id:"_5-1-1-异常分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-1-异常分类"}},[a._v("#")]),a._v(" 5.1.1 异常分类")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1542472/1592313804558-c4f3e4e2-269f-49b9-b34f-b9618dfbe409.png",alt:"img"}})]),a._v(" "),s("p",[a._v("需要注意的是，所有的异常都是由 Throwable 继承而来，但在下一层立即分解为两个分支：Error 和 Exception。")]),a._v(" "),s("p",[a._v("Error 类层次结构描述了 Java 运行时系统的内部错误和资源耗尽错误。应用程序不应该抛出这种类型的对象，如果出现了这样的内部错误，除了通告给用户，并尽力使程序安全地终止之外，再也无能为力了。这种情况很少出现。")]),a._v(" "),s("p",[a._v("在设计 Java 程序时，需要关注 Exception 层次结构。这个层次结构又分解为两个分支：一个分支派生于 RuntimeException；另一个分支包含其他异常。划分两个分支的规则是：由程序错误导致的异常属于 RuntimeException；而程序本身没有问题，但由于像 I/O 错误这类问题导致的异常属于其他异常。")]),a._v(" "),s("p",[a._v("Java 语言规范将派生于 Error 类或 RuntimeException 类的所有异常称为非检查异常，所有其他的异常称为检查异常。编译器将检查是否为所有的检查异常提供了异常处理器。")]),a._v(" "),s("h3",{attrs:{id:"_5-1-2-声明检查异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-2-声明检查异常"}},[a._v("#")]),a._v(" 5.1.2 声明检查异常")]),a._v(" "),s("p",[a._v("方法应该在其首部声明所有可能抛出的异常。这样可以从首部反映出这个方法可能抛出哪类检查异常。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public FileInputStream(String name) throws FileNotFoundException\n")])])]),s("p",[a._v("这个声明表示这个构造器将根据给定的 String 参数产生一个 "),s("code",[a._v("FileInputStream")]),a._v(" 对象，但也有可能抛出一个 "),s("code",[a._v("FileNotFoundException")]),a._v(" 异常。如果发生了这种糟糕的情况，构造器将不会初始化一个新的 "),s("code",[a._v("FileInputStream")]),a._v(" 对象，而是抛出一个 "),s("code",[a._v("FileNotFoundException")]),a._v(" 类对象。如果这个方法真的抛出了这样一个异常对象，运行时系统就会开始搜索异常处理器，以便知道如何处理 "),s("code",[a._v("FileNotFoundException")]),a._v(" 对象。")]),a._v(" "),s("p",[a._v("一个方法必须声明所有可能抛出的检查异常，而非检查异常要么不可控制，要么就应该避免发生。")]),a._v(" "),s("p",[a._v("**注意：**如果在子类中重写了父类的一个方法，子类方法中声明的检查异常不能比父类方法中声明的异常更通用（也就是说，子类方法中可以抛出更特定的异常，或者根本不抛出任何异常）。特别需要说明的是，如果父类方法没有抛出任何检查异常，子类也不能抛出任何检查异常。")]),a._v(" "),s("h3",{attrs:{id:"_5-1-3-如何抛出异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-3-如何抛出异常"}},[a._v("#")]),a._v(" 5.1.3 如何抛出异常")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throw")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("EOFException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("EOFException")]),a._v(" e "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("EOFException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throw")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("h3",{attrs:{id:"_5-1-4-创建异常类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-4-创建异常类"}},[a._v("#")]),a._v(" 5.1.4 创建异常类")]),a._v(" "),s("p",[a._v("在程序中，可能会遇到任何标准异常类都没有能够充分地描述清楚的问题。在这种情况下，创建自己的异常类就是一件顺理成章的事情了。我们需要做的只是定义一个派生于 Exception 的类，或者派生于 Exception 子类的类。")]),a._v(" "),s("h2",{attrs:{id:"_5-2-捕获异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-捕获异常"}},[a._v("#")]),a._v(" 5.2 捕获异常")]),a._v(" "),s("h3",{attrs:{id:"_5-2-1-捕获异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-1-捕获异常"}},[a._v("#")]),a._v(" 5.2.1 捕获异常")]),a._v(" "),s("p",[a._v("如果某个异常发生的时候没有在任何地方进行捕获，那程序就会终止执行，并在控制台上打印出异常信息，其中包括异常的类型和堆栈信息。")]),a._v(" "),s("p",[a._v("要想捕获一个异常，必须设置 try/catch 语句块。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\tcode\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ExceptionType")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\thandler "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),a._v(" type\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("如果在 try 语句块中的任何代码抛出了一个在 catch 子句中说明的异常类，那么")]),a._v(" "),s("ol",[s("li",[a._v("程序将跳过 try 语句块的其余代码。")]),a._v(" "),s("li",[a._v("程序将执行 catch 子句中的处理器代码。")])]),a._v(" "),s("p",[a._v("如果在 try 语句块中的代码没有抛出任何异常，那么程序将跳过 catch 子句。")]),a._v(" "),s("p",[a._v("如果方法中的任何代码抛出了一个在 catch 子句中没有声明的异常类型，那么这个方法就会立刻退出。")]),a._v(" "),s("h3",{attrs:{id:"_5-2-2-捕获多个异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-2-捕获多个异常"}},[a._v("#")]),a._v(" 5.2.2 捕获多个异常")]),a._v(" "),s("p",[a._v("在一个 try 语句块中可以捕获多个异常类型，并对不同类型的异常做出不同的处理。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\tcode that might "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throw")]),a._v(" exceptions\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FileNotFoundException")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\temergency action "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" missing files\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("UnknownHostException")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\temergency action "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" unknown hosts\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("IOException")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\temergency action "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" all other "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("I")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("O")]),a._v(" problems\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h3",{attrs:{id:"_5-2-3-再次抛出异常与异常链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-3-再次抛出异常与异常链"}},[a._v("#")]),a._v(" 5.2.3 再次抛出异常与异常链")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\taccess the database\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SQLException")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throw")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ServletException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"database error: "')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getMessage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h3",{attrs:{id:"_5-2-4-finally-子句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-4-finally-子句"}},[a._v("#")]),a._v(" 5.2.4 finally 子句")]),a._v(" "),s("p",[a._v("不管是否有异常被捕获，finally 子句中的代码都会被执行。")]),a._v(" "),s("p",[a._v("try 语句可以只有 finally 子句，而没有 catch 子句。")]),a._v(" "),s("p",[a._v("**注意：**当 finally 子句包含 return 语句时，将会出现一种意想不到的结果。假设利用 return 语句从 try 语句块中退出。在方法返回前，finally 子句的内容将被执行。如果 finally 子句中也有一个 return 语句，这个返回值将会覆盖原始的返回值。")]),a._v(" "),s("h3",{attrs:{id:"_5-2-5-分析堆栈轨迹元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-5-分析堆栈轨迹元素"}},[a._v("#")]),a._v(" 5.2.5 分析堆栈轨迹元素")]),a._v(" "),s("p",[a._v("堆栈轨迹（stack trace）是一个方法调用过程的列表，它包含了程序执行过程中方法调用的特定位置。")]),a._v(" "),s("h2",{attrs:{id:"_5-3-使用异常机制的技巧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-使用异常机制的技巧"}},[a._v("#")]),a._v(" 5.3 使用异常机制的技巧")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("异常处理不能代替简单的测试")])]),a._v(" "),s("li",[s("p",[a._v("不要过分的细化异常")])]),a._v(" "),s("li",[s("p",[a._v("利用异常层次结构")])]),a._v(" "),s("li",[s("p",[a._v("不要压制异常")])]),a._v(" "),s("li",[s("p",[a._v("在检测错误时，“苛刻”要比放任更好")])]),a._v(" "),s("li",[s("p",[a._v("不要羞于传递异常")])])]),a._v(" "),s("h2",{attrs:{id:"_5-4-使用断言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-使用断言"}},[a._v("#")]),a._v(" 5.4 使用断言")]),a._v(" "),s("h3",{attrs:{id:"_5-4-1-断言的概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-1-断言的概念"}},[a._v("#")]),a._v(" 5.4.1 断言的概念")]),a._v(" "),s("p",[a._v("断言机制允许在测试期间向代码中插入一些检查语句，当代码发布时，这些插入的检测语句将会被自动地移走。")]),a._v(" "),s("p",[a._v("Java 语言引入了关键字 assert。这个关键字有两种形式：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("assert 条件;\nassert 条件:表达式;\n")])])]),s("p",[a._v("这两种形式都会对条件进行检测，如果结果为 "),s("code",[a._v("false")]),a._v("，则抛出一个 "),s("code",[a._v("AssertionError")]),a._v(" 异常。在第二种形式中，表达式将被传入 "),s("code",[a._v("AssertionError")]),a._v(" 的构造器，并转换成一个消息字符串。")]),a._v(" "),s("p",[s("strong",[a._v("注释：")]),a._v("“表达式”部分的唯一目的是产生一个消息字符串。"),s("code",[a._v("AssertionError")]),a._v(" 对象并不存储表达式的值，因此，不可能在以后得到它。正如 JDK 文档所描述的那样：如果使用表达式的值，就会鼓励程序员试图从断言中恢复程序的运行，这不符合断言机制的初衷。")]),a._v(" "),s("h3",{attrs:{id:"_5-4-2-启用和禁用断言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-2-启用和禁用断言"}},[a._v("#")]),a._v(" 5.4.2 启用和禁用断言")]),a._v(" "),s("p",[a._v("在默认情况下，断言被禁用。可以在运行程序时用 "),s("code",[a._v("-enableassertions")]),a._v(" 或 "),s("code",[a._v("-ea")]),a._v(" 选项启用：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("java -enableassertions MyApp\n")])])]),s("p",[a._v("需要注意的是，在启用或禁用断言时不必重新编译程序。启用或禁用断言是类加载器的功能。当断言被禁用时，类加载器将跳过断言代码，因此，不会降低程序的运行速度。")]),a._v(" "),s("p",[a._v("可以用 "),s("code",[a._v("-disableassertions")]),a._v(" 或 "),s("code",[a._v("-da")]),a._v(" 禁用断言。")]),a._v(" "),s("p",[a._v("然而，启用和禁用所有断言的 "),s("code",[a._v("-ea")]),a._v(" 和 "),s("code",[a._v("-da")]),a._v(" 开关不能应用到那些没有类加载器的“系统类”上。对于这些系统类来说，需要使用 "),s("code",[a._v("-enablesystemassertions/-esa")]),a._v(" 开关启用断言。")]),a._v(" "),s("h2",{attrs:{id:"_5-5-记录日志"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-记录日志"}},[a._v("#")]),a._v(" 5.5 记录日志")]),a._v(" "),s("h1",{attrs:{id:"_6-泛型程序设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-泛型程序设计"}},[a._v("#")]),a._v(" 6 泛型程序设计")]),a._v(" "),s("hr"),a._v(" "),s("h2",{attrs:{id:"_6-1-为什么要使用泛型程序设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-为什么要使用泛型程序设计"}},[a._v("#")]),a._v(" 6.1 为什么要使用泛型程序设计")]),a._v(" "),s("h3",{attrs:{id:"_6-1-1-类型参数的好处"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-1-类型参数的好处"}},[a._v("#")]),a._v(" 6.1.1 类型参数的好处")]),a._v(" "),s("p",[a._v("在 Java 中增加泛型类之前，泛型程序设计是用继承实现的。ArrayList 类只维护一个 Object 引用的数组：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ArrayList")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" elementData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("这种方法有两个问题。")]),a._v(" "),s("ol",[s("li",[a._v("当获取一个值时必须进行强制类型转换。")]),a._v(" "),s("li",[a._v("没有错误检查，可以向数组列表中添加任何类的对象。")])]),a._v(" "),s("p",[a._v("泛型提供了一个更好的解决方案：类型参数。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("ArrayList<String> files = new ArrayList<String>();\n")])])]),s("p",[a._v("这使得代码具有更好的可读性和安全性。")]),a._v(" "),s("h3",{attrs:{id:"_6-1-2-谁想成为泛型程序员"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-2-谁想成为泛型程序员"}},[a._v("#")]),a._v(" 6.1.2 谁想成为泛型程序员")]),a._v(" "),s("h2",{attrs:{id:"_6-2-定义简单泛型类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-定义简单泛型类"}},[a._v("#")]),a._v(" 6.2 定义简单泛型类")]),a._v(" "),s("p",[a._v("一个泛型类就是具有一个或多个类型变量的类。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Pair")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),a._v(" first"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),a._v(" second"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Pair")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("first "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" second "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Pair")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),a._v(" first"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),a._v(" second"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("first "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" first"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("second "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" second"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getFirst")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" first"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getSecond")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" second"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("setFirst")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),a._v(" newValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("first "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" newValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("setSecond")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),a._v(" newValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("second "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" newValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("**注释：**类型变量使用大写形式，且比较短，这是很常见的。在 Java 库中，使用变量 E 表示集合的元素类型，K 和 V 分别表示关键字与值的类型，T （需要时还可以用邻近的字母 U 和 S）表示“任意类型”。")]),a._v(" "),s("h2",{attrs:{id:"_6-3-泛型方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-泛型方法"}},[a._v("#")]),a._v(" 6.3 泛型方法")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ArrayAlg")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getMiddle")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    \t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" middle "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ArrayAlg")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getMiddle")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"John"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Q."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Public"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("类型变量放在修饰符的后面，返回类型的前面。")]),a._v(" "),s("p",[a._v("泛型方法可以定义在普通类中，也可以定义在泛型类中。")]),a._v(" "),s("h2",{attrs:{id:"_6-4-类型变量的限定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-类型变量的限定"}},[a._v("#")]),a._v(" 6.4 类型变量的限定")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Comparable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("min")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n")])])]),s("p",[a._v("在此为什么使用关键字 extends 而不是 implements？毕竟，Comparable 时一个接口。下面的记法 "),s("code",[a._v("<T extends BoundingType>")]),a._v(" 表示 T 应该是绑定类型的子类型。T 和绑定类型可以是类，也可以是接口。")]),a._v(" "),s("p",[a._v("一个类型变量或通配符可以有多个限定，例如：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("T extends Comparable & Serializable\n")])])]),s("p",[a._v("限定类型用“&”分隔，而逗号用来分隔类型变量。")]),a._v(" "),s("p",[a._v("在 Java 的继承中，可以根据需要拥有多个接口超类型，但限定中至多有一个类。如果用一个类作为限定，它必须是限定列表中的第一个。")]),a._v(" "),s("h2",{attrs:{id:"_6-5-泛型代码和虚拟机"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-5-泛型代码和虚拟机"}},[a._v("#")]),a._v(" 6.5 泛型代码和虚拟机")]),a._v(" "),s("h3",{attrs:{id:"_6-5-1-类型擦除"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-5-1-类型擦除"}},[a._v("#")]),a._v(" 6.5.1 类型擦除")]),a._v(" "),s("p",[a._v("无论何时定义一个泛型类型，都自动提供了一个相应的原始类型。原始类型的名字就是删去类型参数后的泛型类型名。擦除类型变量，并替换为限定类型（无限定的变量用 Object ）。")]),a._v(" "),s("p",[a._v("例如，Pair"),s("T",[a._v(" 的原始类型如下所示：")])],1),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Pair")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" first"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" second"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Pair")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("first "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" second "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Pair")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" first"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" second"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("first "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" first"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("second "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" second"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getFirst")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" first"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getSecond")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" second"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("setFirst")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" newValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("first "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" newValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("setSecond")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" newValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("second "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" newValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("因为 T 是一个无限定的变量，所以直接用 Object 替换。")]),a._v(" "),s("h3",{attrs:{id:"_6-5-2-翻译泛型表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-5-2-翻译泛型表达式"}},[a._v("#")]),a._v(" 6.5.2 翻译泛型表达式")]),a._v(" "),s("h3",{attrs:{id:"_6-5-3-翻译泛型方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-5-3-翻译泛型方法"}},[a._v("#")]),a._v(" 6.5.3 翻译泛型方法")]),a._v(" "),s("h3",{attrs:{id:"_6-5-4-调用遗留代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-5-4-调用遗留代码"}},[a._v("#")]),a._v(" 6.5.4 调用遗留代码")]),a._v(" "),s("h2",{attrs:{id:"_6-6-约束与局限性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-6-约束与局限性"}},[a._v("#")]),a._v(" 6.6 约束与局限性")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("不能用基本类型实例化类型参数")])]),a._v(" "),s("li",[s("p",[a._v("运行时类型查询只适用于原始类型")])]),a._v(" "),s("li",[s("p",[a._v("不能创建参数化类型的数组")])]),a._v(" "),s("li",[s("p",[a._v("Varargs 警告")])]),a._v(" "),s("li",[s("p",[a._v("不能实例化类型变量")])]),a._v(" "),s("li",[s("p",[a._v("不能构造泛型数组")])]),a._v(" "),s("li",[s("p",[a._v("泛型类的静态上下文中类型变量无效")])]),a._v(" "),s("li",[s("p",[a._v("不能抛出或捕获泛型类的实例")])]),a._v(" "),s("li",[s("p",[a._v("可以消除对检查异常的检查")])]),a._v(" "),s("li",[s("p",[a._v("注意擦除后的冲突")])])]),a._v(" "),s("h2",{attrs:{id:"_6-7-泛型类型的继承规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-7-泛型类型的继承规则"}},[a._v("#")]),a._v(" 6.7 泛型类型的继承规则")]),a._v(" "),s("h2",{attrs:{id:"_6-8-通配符类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-8-通配符类型"}},[a._v("#")]),a._v(" 6.8 通配符类型")]),a._v(" "),s("h3",{attrs:{id:"_6-8-1-通配符概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-8-1-通配符概念"}},[a._v("#")]),a._v(" 6.8.1 通配符概念")]),a._v(" "),s("p",[a._v("通配符类型中，允许类型参数变化。例如，通配符类型 "),s("code",[a._v("Pair<? extends Employee>")]),a._v("。表示任何泛型 Pair 类型，它的类型参数是 Employee 的子类，如 "),s("code",[a._v("Pair<Manager>")]),a._v("，但不是 "),s("code",[a._v("Pair<String>")]),a._v("。")]),a._v(" "),s("h3",{attrs:{id:"_6-8-2-通配符的超类型限定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-8-2-通配符的超类型限定"}},[a._v("#")]),a._v(" 6.8.2 通配符的超类型限定")]),a._v(" "),s("p",[a._v("通配符限定于类型变量限定十分相似，但是，还有一个附加的能力，即可以指定一个超类型限定，如下所示：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("? super Manager\n")])])]),s("p",[a._v("这个通配符限制为 Manager 的所有超类型。")]),a._v(" "),s("h3",{attrs:{id:"_6-8-3-无限定通配符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-8-3-无限定通配符"}},[a._v("#")]),a._v(" 6.8.3 无限定通配符")]),a._v(" "),s("h3",{attrs:{id:"_6-8-4-通配符捕获"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-8-4-通配符捕获"}},[a._v("#")]),a._v(" 6.8.4 通配符捕获")]),a._v(" "),s("h2",{attrs:{id:"_6-9-反射和泛型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-9-反射和泛型"}},[a._v("#")]),a._v(" 6.9 反射和泛型")]),a._v(" "),s("h3",{attrs:{id:"_6-9-1-泛型-class-类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-9-1-泛型-class-类"}},[a._v("#")]),a._v(" 6.9.1 泛型 Class 类")]),a._v(" "),s("h3",{attrs:{id:"_6-9-2-使用-class-参数进行类型匹配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-9-2-使用-class-参数进行类型匹配"}},[a._v("#")]),a._v(" 6.9.2 使用 Class 参数进行类型匹配")]),a._v(" "),s("h3",{attrs:{id:"_6-9-3-虚拟机中的泛型类型信息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-9-3-虚拟机中的泛型类型信息"}},[a._v("#")]),a._v(" 6.9.3 虚拟机中的泛型类型信息")]),a._v(" "),s("h1",{attrs:{id:"_7-集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-集合"}},[a._v("#")]),a._v(" 7 集合")]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("在实现方法时，选择不同的数据结构会导致其实现风格以及性能存在着很大差异。")]),a._v(" "),s("h2",{attrs:{id:"_7-1-java-集合框架"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-java-集合框架"}},[a._v("#")]),a._v(" 7.1 Java 集合框架")]),a._v(" "),s("h3",{attrs:{id:"_7-1-1-将集合的接口与实现分离"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-1-将集合的接口与实现分离"}},[a._v("#")]),a._v(" 7.1.1 将集合的接口与实现分离")]),a._v(" "),s("p",[a._v("与现代的数据结构类库的常见情况一样，Java 集合类库也将接口与实现分离。")]),a._v(" "),s("p",[a._v("队列接口指出可以在队列的尾部添加元素，在队列的头部删除元素，并且可以查找队列中元素的个数。当需要收集对象，并按照“先进先出”的规则检索对象时就应该使用队列。")]),a._v(" "),s("p",[a._v("队列通常有两种实现方式：一种是使用循环数组；另一种是使用链表。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1542472/1592829098501-130a784f-6887-4bfc-92a4-debb7492b586.png",alt:"img"}})]),a._v(" "),s("h3",{attrs:{id:"_7-1-2-collection-接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-2-collection-接口"}},[a._v("#")]),a._v(" 7.1.2 Collection 接口")]),a._v(" "),s("p",[a._v("在 Java 类库中，集合类的基本接口是 Collection 接口。这个接口有两个基本方法：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("interface")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Collection")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("E")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("boolean")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("E")]),a._v(" element"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//用于向集合中添加元素")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Iterator")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("E")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("iterator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//用于返回一个实现了Iterator接口的对象，可以使用这个迭代器对象依次访问集合中的元素")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h3",{attrs:{id:"_7-1-3-迭代器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-3-迭代器"}},[a._v("#")]),a._v(" 7.1.3 迭代器")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("interface")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Iterator")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("E")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("E")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("boolean")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("hasNext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("remove")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("default")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("forEachRemaining")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Consumer")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("super")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("E")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" action"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("通过反复调用 next 方法，可以逐个访问集合中的每个元素。但是，如果到达了集合的尾部，next 方法将抛出一个 "),s("code",[a._v("NoSuchElementException")]),a._v("。因此，需要在调用 next 之前调用 hasNext 方法。如果迭代器对象还有多个供访问的元素，这个方法就返回 "),s("code",[a._v("true")]),a._v("。如果想要查看集合中的所有元素，就请求一个迭代器，并在 hasNext 返回 "),s("code",[a._v("true")]),a._v(" 时反复地调用 next 方法。例如：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Collection")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Iterator")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" iter "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("iterator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("iter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("hasNext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" element "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" iter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v(" something "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("with")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("element")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("用“for each”循环可以更加简练地表示同样的循环操作：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" element "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v(" something "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("with")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("element")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("编译器简单地将“for each”循环翻译为带有迭代器的循环。")]),a._v(" "),s("p",[a._v("Collection 接口扩展了 Iterable 接口。因此，对于标准类库中的任何集合都可以使用“for each”循环。")]),a._v(" "),s("p",[a._v("Java 集合类库中的迭代器与其他类库中的迭代器在概念上有着重要的区别。迭代器查找操作与位置变更是紧密相连的，查找一个元素的唯一方法是调用 next，而在执行查找操作的同时，迭代器的位置随之向前移动。")]),a._v(" "),s("p",[a._v("因此，应该将 Java 迭代器认为是位于两个元素之间。当调用 next 时，迭代器就越过下一个元素，并返回刚刚越过的那个元素的引用。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1542472/1592830682139-a6f623ba-8936-454f-a20c-f3e44ebfd4ed.png",alt:"img"}})]),a._v(" "),s("h3",{attrs:{id:"_7-1-4-泛型实用方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-4-泛型实用方法"}},[a._v("#")]),a._v(" 7.1.4 泛型实用方法")]),a._v(" "),s("h3",{attrs:{id:"_7-1-5-集合框架中的接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-5-集合框架中的接口"}},[a._v("#")]),a._v(" 7.1.5 集合框架中的接口")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1542472/1593179348865-2e8e33a9-edd4-4dd2-95b0-0a8c36c5fcf5.png",alt:"img"}})]),a._v(" "),s("p",[a._v("集合有两个基本接口：Collection 和 Map。")]),a._v(" "),s("p",[a._v("List 是一个有序集合，元素会增加到容器中的特定位置。可以采用两种方式访问元素：使用迭代器访问，或者使用一个整数索引来访问。后一种方法称为随机访问，因为这样可以按任意顺序访问元素。与之不同，使用迭代器访问时，必须顺序地访问元素。")]),a._v(" "),s("p",[a._v("Set 接口等同于 Collection 接口，不过其方法的行为有更严谨的定义。集（Set）的 add 方法不允许增加重复的元素。要适当地定义集的 equals 方法：只要两个集包含同样的元素就认为是相等的，而不要求这些元素有同样的顺序。hashCode 方法的定义要保证包含相同元素的两个集会得到相同的散列码。")]),a._v(" "),s("h2",{attrs:{id:"_7-2-具体的集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-具体的集合"}},[a._v("#")]),a._v(" 7.2 具体的集合")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("集合类型")]),a._v(" "),s("th",[a._v("描述")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("ArrayList")]),a._v(" "),s("td",[a._v("一种可以动态增长和缩减的索引序列")])]),a._v(" "),s("tr",[s("td",[a._v("LinkedList")]),a._v(" "),s("td",[a._v("一种可以在任何位置进行高效地插入和删除操作的有序序列")])]),a._v(" "),s("tr",[s("td",[a._v("ArrayDeque")]),a._v(" "),s("td",[a._v("一种用循环数组实现的双端队列")])]),a._v(" "),s("tr",[s("td",[a._v("HashSet")]),a._v(" "),s("td",[a._v("一种没有重复元素的无序集合")])]),a._v(" "),s("tr",[s("td",[a._v("TreeSet")]),a._v(" "),s("td",[a._v("一种有序集")])]),a._v(" "),s("tr",[s("td",[a._v("EnumSet")]),a._v(" "),s("td",[a._v("一种包含枚举类型值的集")])]),a._v(" "),s("tr",[s("td",[a._v("LinkedHashSet")]),a._v(" "),s("td",[a._v("一种可以记住元素插入次序的集")])]),a._v(" "),s("tr",[s("td",[a._v("PriorityQueue")]),a._v(" "),s("td",[a._v("一种允许高效删除最小元素的集合")])]),a._v(" "),s("tr",[s("td",[a._v("HashMap")]),a._v(" "),s("td",[a._v("一种存储键/值关联的数据结构")])]),a._v(" "),s("tr",[s("td",[a._v("TreeMap")]),a._v(" "),s("td",[a._v("一种键值有序排列的映射表")])]),a._v(" "),s("tr",[s("td",[a._v("EnumMap")]),a._v(" "),s("td",[a._v("一种键值属于枚举类型的映射表")])]),a._v(" "),s("tr",[s("td",[a._v("LinkedHashMap")]),a._v(" "),s("td",[a._v("一种可以记住键/值项添加次序的映射表")])]),a._v(" "),s("tr",[s("td",[a._v("WeakHashMap")]),a._v(" "),s("td",[a._v("一种其值无用武之地后可以被垃圾回收器回收的映射表")])]),a._v(" "),s("tr",[s("td",[a._v("IdentityHashMap")]),a._v(" "),s("td",[a._v("一种用 == 而不是用 equals 比较键值的映射表")])])])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1542472/1593183741549-d5c63aec-63d6-4f77-b614-afd59993081f.png",alt:"img"}})]),a._v(" "),s("h3",{attrs:{id:"_7-2-1-链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-1-链表"}},[a._v("#")]),a._v(" 7.2.1 链表")]),a._v(" "),s("p",[a._v("数组和数组列表有一个重大的缺陷，这就是从数组的中间位置删除一个元素要付出很大的代价，其原因是数组中处于被删除元素之后的所有元素都要向数组的前端移动。在数组中间的位置上插入一个元素也是如此。")]),a._v(" "),s("p",[a._v("链表解决了这个问题。尽管数组在连续的存储位置上存放对象引用，但链表却将每个对象存放在独立的节点中。每个节点还存放着序列中下一个节点的引用。在 Java 程序设计语言中，所有链表实际上都是双向链接的——即每个节点还存放着指向前驱节点的作用。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1542472/1593226873980-2c94cb4d-0b1e-4c57-bb6d-f30dba2ce7d8.png",alt:"img"}})]),a._v(" "),s("p",[a._v("从链表中间删除一个元素是一个很轻松的操作，即需要更新被删除元素附近的链接。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1542472/1593227035729-aca9352c-4d2b-453a-821a-14dc6b222254.png",alt:"img"}})]),a._v(" "),s("p",[a._v("链表是一个有序集合，每个对象的位置十分重要。"),s("code",[a._v("LinkedList.add")]),a._v(" 方法将对象添加到链表的尾部。但是，常常需要将元素添加到链表的中间。由于迭代器是描述集合中位置的，所以这种依赖于位置的 "),s("code",[a._v("add")]),a._v(" 方法将由迭代器负责。只有对自然有序的集合使用迭代器添加元素才有实际意义。")]),a._v(" "),s("p",[a._v("链表不支持快速地随机访问，如果要查看链表中第 n 个元素，就必须从头开始，越过 n-1 个元素，没有捷径可走。")]),a._v(" "),s("h3",{attrs:{id:"_7-2-2-数组列表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-2-数组列表"}},[a._v("#")]),a._v(" 7.2.2 数组列表")]),a._v(" "),s("h3",{attrs:{id:"_7-2-3-散列集"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-3-散列集"}},[a._v("#")]),a._v(" 7.2.3 散列集")]),a._v(" "),s("p",[a._v("链表和数组可以按照人们的意愿排列元素的次序。但是，如果想要查看某个指定的元素，却又忘记了它的位置，就需要访问所有的元素，直到找到为止。如果集合中包含的元素很多，将会消耗很多时间。")]),a._v(" "),s("p",[a._v("有一种众所周知的数据结构，可以快速地查找所需要的对象，这就是散列表（hash table）。散列表为每个对象计算一个整数，称为散列码（hash code）。散列码是由对象的实例域产生的一个整数。更准确地说，具有不同数据域的对象将产生不同的散列码。")]),a._v(" "),s("p",[a._v("如果自定义类，就要负责实现这个类的 hashCode 方法。注意，自己实现的 hashCode 方法应该与 equals 方法兼容，即如果 "),s("code",[a._v("a.equals(b)")]),a._v(" 为 "),s("code",[a._v("true")]),a._v("，a 与 b 必须具有相同的散列码。")]),a._v(" "),s("p",[a._v("在 Java 中，散列表用链表数组实现。每个列表被称为桶（bucket）。要想查找表中对象的位置，就要先计算它的散列码，然后与桶的总数取余，所得到的结果就是保存这个元素的桶的索引。例如，如果某个对象的散列码为 76268，并且有 128 个桶，对象应该保存在第 108 号桶中（76268 除以 128 余 108）。或许会很幸运，在这个桶中没有其他元素，此时将元素直接插入到桶中就可以了。当然，有时候会遇到桶被占满的情况，这种现象称为散列冲突（hash collision）。这时，需要用新对象与桶中的所有对象进行比较，查看这个对象是否已经存在。如果散列码是合理且随机分布的，桶的数目也足够大，需要比较的次数就会很少。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1542472/1593605516351-076c7da6-f97a-4d28-97a6-23a67ff7e6ee.png",alt:"img"}})]),a._v(" "),s("p",[a._v("**注释：**在 Java 8 中，桶满时会从链表变为平衡二叉树。")]),a._v(" "),s("p",[a._v("如果想更多地控制散列表的运行性能，就要指定一个初始的桶数。")]),a._v(" "),s("p",[a._v("如果大致知道最终会有多少个元素要插入到散列表中，就可以设置桶数。通常，将桶数设置为预计元素个数的 75%~150%。有些研究人员认为：尽管还没有确凿的证据，但最好将桶数设置为一个素数，以防键的聚集。标准类库使用的桶数是 2 的幂，默认值为 16.")]),a._v(" "),s("p",[a._v("当然，并不是总能够知道需要存储多少个元素的，也有可能最初的估计过低。如果散列表太满，就需要再散列。如果要对散列表再散列，就需要创建一个桶数更多的表，并将所有元素插入到这个新表中，然后丢弃原来的表。装填因子决定何时对散列表进行再散列。例如，如果装填因子为 0.75 （默认值），而表中超过 75% 的位置已经填入元素，这个表就会用双倍的桶数自动地进行再散列。")]),a._v(" "),s("p",[a._v("散列表可以用于实现几个重要的数据结构。其中最简单的是 Set 类型。Set 是没有重复元素的元素集合。Set 的 add 方法首先在集中查找要添加的对象，如果不存在，就将这个对象添加进去。")]),a._v(" "),s("h3",{attrs:{id:"_7-2-4-树集"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-4-树集"}},[a._v("#")]),a._v(" 7.2.4 树集")]),a._v(" "),s("p",[a._v("TreeSet 类与散列集十分类似，不过，它比散列集有所改进，树集是一个有序集合。可以以任意顺序将元素插入到集合中，在对集合进行遍历时，每个值将自动地按照排序后的顺序呈现。每次将一个元素添加到树中时，都被放置在正确的排序位置上。因此，迭代器总是以排好序的顺序访问每个元素。")]),a._v(" "),s("p",[a._v("将一个元素添加到树中要比添加到散列表中慢，但是，与检查数组或链表中的重复元素相比还是快很多。")]),a._v(" "),s("p",[a._v("**注释：**要使用树集，必须能够比较元素。这些元素必须实现 Comparable 接口，或者构造集时必须提供一个 Comparator。")]),a._v(" "),s("h3",{attrs:{id:"_7-2-5-队列与双端队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-5-队列与双端队列"}},[a._v("#")]),a._v(" 7.2.5 队列与双端队列")]),a._v(" "),s("p",[a._v("队列可以让人们有效地在尾部添加一个元素，在头部删除一个元素。有两个端头的队列，即双端队列，可以让人们有效地在头部和尾部同时添加或删除元素。不支持在队列中间添加元素。")]),a._v(" "),s("h3",{attrs:{id:"_7-2-6-优先级队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-6-优先级队列"}},[a._v("#")]),a._v(" 7.2.6 优先级队列")]),a._v(" "),s("p",[a._v("优先级队列中的元素可以按照任意的顺序插入，却总是按照排序的顺序进行检索。也就是说，无论何时调用 remove 方法，总会获得当前优先级队列中最小的元素。然而，优先级队列并没有对所有的元素进行排序。优先级队列使用了一个优雅且高效的数据结构，称为堆（heap）。堆是一个可以自我调整的二叉树，对树执行添加（add）和删除（remove）操作，可以让最小的元素移动到根，而不必花费时间对元素进行排序。")]),a._v(" "),s("p",[a._v('使用优先级队列的典型示例是任务调度。每一个任务有一个优先级，任务以随机顺序添加到队列中，每当启动一个新的任务时，都将优先级最高的任务从队列中删除（由于习惯上将 1 设为"最高"优先级，所以会将最小的元素删除）。')]),a._v(" "),s("h2",{attrs:{id:"_7-3-映射"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-映射"}},[a._v("#")]),a._v(" 7.3 映射")]),a._v(" "),s("p",[a._v("集是一个集合，它可以快速地查找现有的元素。但是，要查看一个元素，需要有要查找元素的精确副本。这不是一种非常通用的查找方式。通常，我们知道某些键的信息，并想要查找与之对应的元素。映射（map）数据结构就是为此设计的，映射用来存放键/值对，如果提供了键，就能够查找到值。")]),a._v(" "),s("h3",{attrs:{id:"_7-3-1-基本映射操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-1-基本映射操作"}},[a._v("#")]),a._v(" 7.3.1 基本映射操作")]),a._v(" "),s("p",[a._v("Java 类库为映射提供了两个通用的实现：HashMap 和 TreeMap。这两个类都实现了 Map 接口。")]),a._v(" "),s("p",[a._v("散列映射对键进行散列，树映射用键的整体顺序对元素进行排序，并将其组织成搜索树。散列或比较函数只能作用于键，与键关联的值不能进行散列或比较。")]),a._v(" "),s("p",[a._v("键必须是唯一的，不能对同一个键存放两个值。如果对同一个键两次调用 put 方法，第二个值就会取代第一个值。实际上，put 将返回用这个键参数存储的上一个值。")]),a._v(" "),s("h3",{attrs:{id:"_7-3-2-更新映射项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-2-更新映射项"}},[a._v("#")]),a._v(" 7.3.2 更新映射项")]),a._v(" "),s("h3",{attrs:{id:"_7-3-3-映射视图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-3-映射视图"}},[a._v("#")]),a._v(" 7.3.3 映射视图")]),a._v(" "),s("p",[a._v("集合框架不认为映射本身是一个集合。不过，可以得到映射的视图（view）——这是实现了 Collection 接口或某个子接口的对象。")]),a._v(" "),s("p",[a._v("有 3 种视图：键集、值集合以及键/值对集。下面的方法：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Set")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("keySet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Collection")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("values")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Set")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Entry")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("entrySet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[a._v("会分别返回这 3 个视图。")]),a._v(" "),s("h3",{attrs:{id:"_7-3-4-弱散列映射"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-4-弱散列映射"}},[a._v("#")]),a._v(" 7.3.4 弱散列映射")]),a._v(" "),s("h3",{attrs:{id:"_7-3-5-链接散列集与映射"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-5-链接散列集与映射"}},[a._v("#")]),a._v(" 7.3.5 链接散列集与映射")]),a._v(" "),s("p",[a._v("LinkedHashSet 和 LinkedHashMap 类用来记住插入元素项的顺序，这样就可以避免在散列表中的项从表面上看是随机排列的。当条目插入到表中时，就会并入到双向链表中。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1542472/1593661029937-14af553f-df61-48c4-970b-93b85244facc.png",alt:"img"}})]),a._v(" "),s("p",[a._v("链接散列映射将用访问顺序，而不是插入顺序，对映射条目进行迭代。每次调用 get 或 put，受到影响的条目将从当前的位置删除，并放到条目链表的尾部。")]),a._v(" "),s("h3",{attrs:{id:"_7-3-6-枚举集与映射"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-6-枚举集与映射"}},[a._v("#")]),a._v(" 7.3.6 枚举集与映射")]),a._v(" "),s("h3",{attrs:{id:"_7-3-7-标识散列映射"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-7-标识散列映射"}},[a._v("#")]),a._v(" 7.3.7 标识散列映射")]),a._v(" "),s("h2",{attrs:{id:"_7-4-视图与包装器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-视图与包装器"}},[a._v("#")]),a._v(" 7.4 视图与包装器")]),a._v(" "),s("p",[a._v("通过使用视图可以获得其他的实现了 Collection 接口和 Map 接口的对象。映射类的 keySet 方法就是一个这样的示例。初看起来，好像这个方法创建了一个新集，并将映射中的所有键都填进去，然后返回这个集。但是，情况并非如此。取而代之的是：keySet 方法返回一个实现 Set 接口的类对象，这个类的方法对原映射进行操作，这种集合称为视图。")]),a._v(" "),s("h3",{attrs:{id:"_7-4-1-轻量级集合包装器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-1-轻量级集合包装器"}},[a._v("#")]),a._v(" 7.4.1 轻量级集合包装器")]),a._v(" "),s("p",[a._v("Arrays 类的静态方法 asList 将返回一个包装了普通 Java 数组的 List 包装器。这个方法可以将数组传递给一个期望得到列表或集合参数的方法。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Card")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" cardDeck "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Card")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("52")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Card")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" cardList "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("asList")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("cardDeck"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("返回的对象不是 ArrayList。它是一个视图对象，带有访问底层数组的 get 和 set 方法。")]),a._v(" "),s("h3",{attrs:{id:"_7-4-2-子范围"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-2-子范围"}},[a._v("#")]),a._v(" 7.4.2 子范围")]),a._v(" "),s("p",[a._v("可以为很多集合建立子范围视图。例如，假设有一个列表 staff，想从中取出第 10 个~第 19 个元素。可以使用 subList方法来获得一个列表的子范围视图。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("List")]),a._v(" group2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" staff"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("subList")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("第一个索引包含在内，第二个索引则不包含在内。这与 String 类的 substring 操作中的参数情况相同。")]),a._v(" "),s("h3",{attrs:{id:"_7-4-3-不可修改的视图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-3-不可修改的视图"}},[a._v("#")]),a._v(" 7.4.3 不可修改的视图")]),a._v(" "),s("p",[a._v("Collections 还有几个方法，用于产生集合的不可修改视图。这些视图对现有集合增加了一个运行时的检查。如果发现试图对集合进行修改，就抛出一个异常，同时这个集合将保持未修改的状态。")]),a._v(" "),s("h3",{attrs:{id:"_7-4-4-同步视图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-4-同步视图"}},[a._v("#")]),a._v(" 7.4.4 同步视图")]),a._v(" "),s("h3",{attrs:{id:"_7-4-5-受查视图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-5-受查视图"}},[a._v("#")]),a._v(" 7.4.5 受查视图")]),a._v(" "),s("h2",{attrs:{id:"_7-5-算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-算法"}},[a._v("#")]),a._v(" 7.5 算法")]),a._v(" "),s("h3",{attrs:{id:"_7-5-1-排序与混排"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-1-排序与混排"}},[a._v("#")]),a._v(" 7.5.1 排序与混排")]),a._v(" "),s("p",[a._v("Collections 类中的 sort 方法可以对实现了 List 接口的集合进行排序。这个方法假定列表元素实现了 Comparable 接口。如果想采用其他方式对列表进行排序，可以使用 List 接口的 sort 方法并传入一个 Comparator 对象。")]),a._v(" "),s("p",[a._v("人们可能会对 sort 方法所采用的排序手段感到好奇。通常，在翻阅有关算法书籍中的排序算法时，会发觉介绍的都是有关数组的排序算法，而且使用的是随机访问方式。但是，对列表进行随机访问的效率很低。实际上，可以使用归并排序对列表进行高效的排序。然而，Java 程序设计语言并不是这样实现的。它直接将所有元素转入一个数组，对数组进行排序，然后，再将排序后的序列复制回列表。")]),a._v(" "),s("h3",{attrs:{id:"_7-5-2-二分查找"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-2-二分查找"}},[a._v("#")]),a._v(" 7.5.2 二分查找")]),a._v(" "),s("p",[a._v("要想在数组中查找一个对象，通常要依次访问数组中的每个元素，直到找到匹配的元素为止。然而，如果数组是有序的，就可以直接查看位于数组中间的元素，看一看是否大于要查找的元素。如果是，用同样的方法在数组的前半部分继续查找；否则，用同样的方法在数组的后半部分继续查找。")]),a._v(" "),s("p",[a._v("Collections 类的 binarySearch 方法实现了这个算法。注意，集合必须是排好序的，否则算法将返回错误的答案。")]),a._v(" "),s("h3",{attrs:{id:"_7-5-3-简单算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-3-简单算法"}},[a._v("#")]),a._v(" 7.5.3 简单算法")]),a._v(" "),s("h3",{attrs:{id:"_7-5-4-批操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-4-批操作"}},[a._v("#")]),a._v(" 7.5.4 批操作")]),a._v(" "),s("h3",{attrs:{id:"_7-5-5-集合与数组的转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-5-集合与数组的转换"}},[a._v("#")]),a._v(" 7.5.5 集合与数组的转换")]),a._v(" "),s("h2",{attrs:{id:"_7-6-遗留的集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-6-遗留的集合"}},[a._v("#")]),a._v(" 7.6 遗留的集合")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1542472/1593700115184-7625278c-0e44-4fd7-b6ad-cac630d8ea9a.png",alt:"img"}})]),a._v(" "),s("h1",{attrs:{id:"_8-部署-java-应用程序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-部署-java-应用程序"}},[a._v("#")]),a._v(" 8 部署 Java 应用程序")]),a._v(" "),s("hr"),a._v(" "),s("h2",{attrs:{id:"_8-1-jar-文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-jar-文件"}},[a._v("#")]),a._v(" 8.1 JAR 文件")]),a._v(" "),s("p",[a._v("在将应用程序进行打包时，使用者一定希望仅提供给其一个单独的文件，而不是一个含有大量类文件的目录，Java 归档（JAR）文件就是为此目的而设计的。一个 JAR 文件既可以包含类文件，也可以包含诸如图像和声音这些其他类型的文件。此外，JAR 文件是压缩的，它使用了大家熟悉的 ZIP 压缩格式。")]),a._v(" "),s("h3",{attrs:{id:"_8-1-1-创建-jar-文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-1-创建-jar-文件"}},[a._v("#")]),a._v(" 8.1.1 创建 JAR 文件")]),a._v(" "),s("p",[a._v("可以使用 jar 工具制作 JAR 文件（在默认的 JDK 安装中，位于 jdk/bin 目录下）。创建一个新的 JAR 文件应该使用的常见命令格式为：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("jar cvf JARFileName File1 File2 ...\n")])])]),s("p",[a._v("例如：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("jar cvf CalculatorClasses.jar *.class icon.gif\n")])])]),s("p",[a._v("通常，jar 命令的格式如下：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("jar options File1 File2 ...\n")])])]),s("h3",{attrs:{id:"_8-1-2-清单文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-2-清单文件"}},[a._v("#")]),a._v(" 8.1.2 清单文件")]),a._v(" "),s("p",[a._v("除了类文件、图像和其他资源外，每个 JAR 文件还包含一个用于描述归档特征的清单文件。清单文件被命名为 MANIFEST.MF，它位于 JAR 文件的一个特殊 META-INF 子目录中。")]),a._v(" "),s("h3",{attrs:{id:"_8-1-3-可执行-jar-文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-3-可执行-jar-文件"}},[a._v("#")]),a._v(" 8.1.3 可执行 JAR 文件")]),a._v(" "),s("p",[a._v("可以使用 jar 命令中的 e 选项指定程序的入口点，即通常需要在调用 java 程序加载器时指定的类：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("jar cvfe MyProgram.jar com.mycompany.mypkg.MainAppClass ``*files to add*\n")])])]),s("p",[a._v("或者，可以在清单中指定应用程序的主类，包括以下形式的语句：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("Main-Class: com.mycompany.mypkg.MainAppClass\n")])])]),s("p",[a._v("不要将扩展名 .class 添加到主类名中。")]),a._v(" "),s("p",[a._v("**警告：**清单文件的最后一行必须以换行符结束。否则，清单文件将无法被正确的读取。")]),a._v(" "),s("p",[a._v("不论哪一种方法，用户可以简单地通过下面命令来启动应用程序：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("java -jar MyProgram.jar\n")])])]),s("h3",{attrs:{id:"_8-1-4-资源"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-4-资源"}},[a._v("#")]),a._v(" 8.1.4 资源")]),a._v(" "),s("p",[a._v("在应用程序中使用的类通常需要使用一些相关的数据文件。例如：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("图像和声音文件")])]),a._v(" "),s("li",[s("p",[a._v("带有消息字符串和按钮标签的文本文件")])]),a._v(" "),s("li",[s("p",[a._v("二进制数据文件，例如，描述地图布局的文件")])])]),a._v(" "),s("p",[a._v("在 Java 中，这些关联的文件被称为资源。")]),a._v(" "),s("h3",{attrs:{id:"_8-1-5-密封"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-5-密封"}},[a._v("#")]),a._v(" 8.1.5 密封")]),a._v(" "),s("h2",{attrs:{id:"_8-2-应用首选项的存储"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-应用首选项的存储"}},[a._v("#")]),a._v(" 8.2 应用首选项的存储")]),a._v(" "),s("h3",{attrs:{id:"_8-2-1-属性映射"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-1-属性映射"}},[a._v("#")]),a._v(" 8.2.1 属性映射")]),a._v(" "),s("p",[a._v("属性映射是一种存储键/值对的数据结构。属性映射通常用来存储配置信息，它有 3 个特性：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("键和值是字符串")])]),a._v(" "),s("li",[s("p",[a._v("映射可以很容易的存入文件以及从文件加载")])]),a._v(" "),s("li",[s("p",[a._v("有一个二级表保存默认值")])])]),a._v(" "),s("p",[a._v("实现属性映射的 Java 类名为 Properties。")]),a._v(" "),s("h3",{attrs:{id:"_8-2-2-首选项-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-2-首选项-api"}},[a._v("#")]),a._v(" 8.2.2 首选项 API")]),a._v(" "),s("h2",{attrs:{id:"_8-3-服务加载器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-服务加载器"}},[a._v("#")]),a._v(" 8.3 服务加载器")]),a._v(" "),s("p",[a._v("若有收获，就点个赞吧")])])}),[],!1,null,null,null);t.default=e.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[169],{536:function(a,t,r){"use strict";r.r(t);var e=r(30),s=Object(e.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("p",[a._v("        关于大数据面试中对Spark的知识考查不需本菌多解释什么了吧~本篇博客，博主为大家分享20个"),r("font",{attrs:{color:"DarkOrchid",size:"4"}},[r("strong",[a._v("Spark热门技术点")])]),a._v("，希望今年出去面试，实习的同学，尤其是想去大厂的同学，一定要把下面的20个技术点看完。")],1),a._v(" "),r("hr"),a._v(" "),r("h2",{attrs:{id:"_1、spark有几种部署方式-重点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、spark有几种部署方式-重点"}},[a._v("#")]),a._v(" 1、Spark有几种部署方式?（重点）")]),a._v(" "),r("p",[a._v("        Spark支持3种"),r("strong",[a._v("集群管理器")]),a._v("（Cluster Manager），分别为：")]),a._v(" "),r("p",[a._v("        1. Standalone：独立模式，Spark原生的简单集群管理器，自带完整的服务，可单独部署到一个集群中，无需依赖任何其他资源管理系统，使用Standalone可以很方便地搭建一个集群；")]),a._v(" "),r("p",[a._v("        2. Apache Mesos：一个强大的分布式资源管理框架，它允许多种不同的框架部署在其上，包括yarn；")]),a._v(" "),r("p",[a._v("        3. Hadoop YARN：统一的资源管理机制，在上面可以运行多套计算框架，如map reduce、storm等，根据driver在集群中的位置不同，分为yarn client和yarn cluster")]),a._v(" "),r("p",[a._v("        实际上，除了上述这些通用的集群管理器外，Spark内部也提供了一些方便用户测试和学习的简单集群部署模式。"),r("font",{attrs:{color:"red"}},[a._v("由于在实际工厂环境下使用的绝大多数的集群管理器是Hadoop YARN，因此我们关注的重点是Hadoop YARN模式下的Spark集群部署。")])],1),a._v(" "),r("p",[a._v("        Spark的运行模式取决于传递给SparkContext的==MASTER==环境变量的值，个别模式还需要辅助的程序接口来配合使用，目前支持的Master字符串及URL包括：")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://img-blog.csdnimg.cn/2020052519594381.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDMxODgzMA==,size_16,color_FFFFFF,t_70",alt:""}})]),a._v(" "),r("ul",[r("li",[r("p",[a._v("– master MASTER_URL ：决定了Spark任务提交给哪种集群处理。")])]),a._v(" "),r("li",[r("p",[a._v("– deploy-mode DEPLOY_MODE：决定了Driver的运行方式，可选值为Client 或者 Cluster。")])])]),a._v(" "),r("hr"),a._v(" "),r("h2",{attrs:{id:"_2、spark提交作业参数-重点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、spark提交作业参数-重点"}},[a._v("#")]),a._v(" 2、Spark提交作业参数（重点）")]),a._v(" "),r("blockquote",[r("p",[a._v("此处来源的网址为：https://blog.csdn.net/gamer_gyt/article/details/79135118")])]),a._v(" "),r("p",[a._v("1）在提交任务时的几个重要参数")]),a._v(" "),r("div",{staticClass:"language-javascript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-javascript"}},[r("code",[a._v("executor"),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("cores —— 每个executor使用的内核数，默认为"),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("，官方建议"),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("个，企业是"),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v("个\nnum"),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("executors ——  启动executors的数量，默认为"),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\nexecutor"),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("memory ——  executor内存大小，默认"),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("G\ndriver"),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("cores ——  driver使用内核数，默认为"),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\ndriver"),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("memory ——  driver内存大小，默认"),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("512")]),a._v("M\n")])])]),r("p",[a._v("2）给出一个提交任务的样式")]),a._v(" "),r("div",{staticClass:"language-javascript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-javascript"}},[r("code",[a._v("spark"),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("submit \\\n  "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("master local"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("  \\\n  "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("driver"),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("cores "),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("   \\\n  "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("driver"),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("memory "),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),a._v("g \\\n  "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("executor"),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("cores "),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v(" \\\n  "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("num"),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("executors "),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("7")]),a._v(" \\\n  "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("executor"),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("memory "),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),a._v("g \\\n  "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PackageName"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("ClassName")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token constant"}},[a._v("XXXX")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("jar \\\n  "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("name "),r("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Spark Job Name"')]),a._v(" \\\n  InputPath      \\\n  OutputPath\n")])])]),r("p",[a._v("官网参数配置："),r("a",{attrs:{href:"http://spark.apache.org/docs/latest/configuration.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("http://spark.apache.org/docs/latest/configuration.html"),r("OutboundLink")],1)]),a._v(" "),r("p"),a._v(" "),r("hr"),a._v(" "),r("h2",{attrs:{id:"_3、简述spark-on-yarn的作业提交流程-重点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、简述spark-on-yarn的作业提交流程-重点"}},[a._v("#")]),a._v(" 3、简述Spark on yarn的作业提交流程（重点）")]),a._v(" "),r("p",[r("strong",[a._v("YARN Client模式")])]),a._v(" "),r("p",[r("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200525201010458.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDMxODgzMA==,size_16,color_FFFFFF,t_70",alt:""}})]),a._v(" "),r("p",[a._v("        在YARN Client模式下，Driver在任务提交的本地机器上运行，Driver启动后会和ResourceManager通讯申请启动ApplicationMaster，随后ResourceManager分配container，在合适的NodeManager上启动ApplicationMaster，此时的ApplicationMaster的功能相当于一个ExecutorLaucher，只负责向ResourceManager申请Executor内存。")]),a._v(" "),r("p",[a._v("        ResourceManager接到ApplicationMaster的资源申请后会分配container，然后ApplicationMaster在资源分配指定的NodeManager上启动Executor进程，Executor进程启动后会向Driver反向注册，Executor全部注册完成后Driver开始执行main函数，之后执行到Action算子时，触发一个job，并根据宽依赖开始划分stage，每个stage生成对应的taskSet，之后将task分发到各个Executor上执行。")]),a._v(" "),r("p",[r("strong",[a._v("YARN Cluster模式")])]),a._v(" "),r("p",[r("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200525201158363.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDMxODgzMA==,size_16,color_FFFFFF,t_70",alt:""}})]),a._v(" "),r("p",[a._v("        在YARN Cluster模式下，任务提交后会和ResourceManager通讯申请启动ApplicationMaster，随后ResourceManager分配container，在合适的NodeManager上启动ApplicationMaster，此时的ApplicationMaster就是Driver。")]),a._v(" "),r("p",[a._v("        Driver启动后向ResourceManager申请Executor内存，ResourceManager接到ApplicationMaster的资源申请后会分配container，然后在合适的NodeManager上启动Executor进程，Executor进程启动后会向Driver反向注册，Executor全部注册完成后Driver开始执行main函数，之后执行到Action算子时，触发一个job，并根据宽依赖开始划分stage，每个stage生成对应的taskSet，之后将task分发到各个Executor上执行。\n        ")]),a._v(" "),r("hr"),a._v(" "),r("h2",{attrs:{id:"_4、请列举spark的transformation算子-不少于5个-重点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4、请列举spark的transformation算子-不少于5个-重点"}},[a._v("#")]),a._v(" 4、请列举Spark的transformation算子（不少于5个）（重点）")]),a._v(" "),r("p",[a._v("1）map"),r("br"),a._v("\n2）flatMap\n3）filter\n4）groupByKey\n5）reduceByKey\n6）sortByKey")]),a._v(" "),r("p"),a._v(" "),r("hr"),a._v(" "),r("h2",{attrs:{id:"_5、请列举spark的action算子-不少于5个-重点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5、请列举spark的action算子-不少于5个-重点"}},[a._v("#")]),a._v(" 5、请列举Spark的action算子（不少于5个）（重点）")]),a._v(" "),r("p",[a._v("1）reduce：\n2）collect:\n3）first：\n4）take：\n5）aggregate：\n6）countByKey：\n7）foreach：\n8）saveAsTextFile：\n        ")]),a._v(" "),r("hr"),a._v(" "),r("h2",{attrs:{id:"_6、简述spark的两种核心shuffle-重点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6、简述spark的两种核心shuffle-重点"}},[a._v("#")]),a._v(" 6、简述Spark的两种核心Shuffle（重点）")]),a._v(" "),r("p",[r("strong",[a._v("spark的Shuffle有Hash Shuffle和Sort Shuffle两种。")])]),a._v(" "),r("p",[a._v("        在Spark 1.2以前，默认的shuffle计算引擎是HashShuffleManager。")]),a._v(" "),r("p",[r("font",{attrs:{color:"red"}},[a._v("HashShuffleManager")]),a._v("有着一个非常严重的弊端，就是会"),r("font",{attrs:{color:"red"}},[a._v("产生大量的中间磁盘文件，进而由大量的磁盘IO操作影响了性能")]),a._v("。因此在Spark 1.2以后的版本中，默认的ShuffleManager改成了SortShuffleManager。")],1),a._v(" "),r("p",[r("font",{attrs:{color:"\tRoyalBlue"}},[r("strong",[a._v("SortShuffleManager")])]),a._v("相较于HashShuffleManager来说，有了一定的改进。主要就在于，"),r("font",{attrs:{color:"RoyalBlue"}},[r("strong",[a._v("每个Task在进行shuffle操作时")])]),a._v("，虽然也会产生较多的临时磁盘文件，但是最后会"),r("font",{attrs:{color:"RoyalBlue"}},[r("strong",[a._v("将所有的临时文件合并(merge)成一个磁盘文件")])]),a._v("，因此每个Task就只有一个磁盘文件。在下一个stage的shuffle read task拉取自己的数据时，只要根据索引读取每个磁盘文件中的部分数据即可。")],1),a._v(" "),r("p",[r("strong",[a._v("未经优化的HashShuffle：")])]),a._v(" "),r("p",[r("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200525201611200.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDMxODgzMA==,size_16,color_FFFFFF,t_70",alt:""}})]),a._v(" "),r("p",[a._v("        上游的stage的task对相同的key执行hash算法，从而将相同的key都写入到一个磁盘文件中，而每一个磁盘文件都只属于下游stage的一个task。在将数据写入磁盘之前，会先将数据写入到内存缓冲，当内存缓冲填满之后，才会溢写到磁盘文件中。但是这种策略的不足在于，下游有几个task，上游的每一个task都就都需要创建几个临时文件，每个文件中只存储key取hash之后相同的数据，导致了当下游的task任务过多的时候，上游会堆积大量的小文件。")]),a._v(" "),r("p",[r("strong",[a._v("优化后的HashShuffle：")])]),a._v(" "),r("p",[r("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200525202310701.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDMxODgzMA==,size_16,color_FFFFFF,t_70",alt:""}})]),a._v(" "),r("p",[a._v("        在shuffle write过程中，上游stage的task就不是为下游stage的每个task创建一个磁盘文件了。此时会出现shuffleFileGroup的概念，每个shuffleFileGroup会对应一批磁盘文件，磁盘文件的数量与下游stage的task数量是相同的。一个Executor上有多少个CPU core，就可以并行执行多少个task。而第一批并行执行的每个task都会创建一个shuffleFileGroup，并将数据写入对应的磁盘文件内。当Executor的CPU core执行完一批task，接着执行下一批task时，下一批task就会复用之前已有的shuffleFileGroup，包括其中的磁盘文件。也就是说，此时task会将数据写入已有的磁盘文件中，而不会写入新的磁盘文件中。因此，consolidate机制允许不同的task复用同一批磁盘文件，这样就可以有效将多个task的磁盘文件进行一定程度上的合并，从而大幅度减少磁盘文件的数量，进而提升shuffle write的性能。")]),a._v(" "),r("p",[a._v("        注意：如果想使用优化之后的ShuffleManager，需要将："),r("code",[a._v("spark.shuffle.consolidateFiles")]),a._v("调整为"),r("code",[a._v("true")]),a._v("。（当然，默认是开启的）")]),a._v(" "),r("p",[a._v("        总结：")]),a._v(" "),r("blockquote",[r("p",[r("font",{attrs:{color:"blue"}},[r("strong",[a._v("未经优化")]),a._v(":\n上游的task数量：m   ，\n下游的task数量：n    ，\n上游的executor数量：k (m>=k)   ，\n总共的磁盘文件：m"),r("em",[a._v("n")])]),a._v(" "),r("br"),a._v(" "),r("font",{attrs:{color:"\tBlueViolet"}},[r("strong",[a._v("优化之后：")]),a._v("\n上游的task数量：m    ，\n下游的task数量：n   ，\n上游的executor数量：k (m>=k)   ，\n总共的磁盘文件： k"),a._v("n")])],1)]),a._v(" "),r("p",[r("strong",[a._v("普通的SortShuffle：")])]),a._v(" "),r("p",[r("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200525202851850.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDMxODgzMA==,size_16,color_FFFFFF,t_70",alt:""}})]),a._v(" "),r("p",[a._v("        在普通模式下，数据会先写入一个内存数据结构中，此时根据不同的shuffle算子，可以选用不同的数据结构。如果是由聚合操作的shuffle算子，就是用map的数据结构（边聚合边写入内存），如果是join的算子，就使用array的数据结构（直接写入内存）。接着，每写一条数据进入内存数据结构之后，就会判断是否达到了某个临界值，如果达到了临界值的话，就会尝试的将内存数据结构中的数据溢写到磁盘，然后清空内存数据结构。")]),a._v(" "),r("p",[a._v("        在溢写到磁盘文件之前，会先根据key对内存数据结构中已有的数据进行排序，排序之后，会分批将数据写入磁盘文件。默认的batch数量是10000条，也就是说，排序好的数据，会以每批次1万条数据的形式分批写入磁盘文件，写入磁盘文件是通过Java的BufferedOutputStream实现的。BufferedOutputStream是Java的缓冲输出流，首先会将数据缓冲在内存中，当内存缓冲满溢之后再一次写入磁盘文件中，这样可以减少磁盘IO次数，提升性能。")]),a._v(" "),r("p",[a._v("        此时task将所有数据写入内存数据结构的过程中，会发生多次磁盘溢写，会产生多个临时文件，最后会将之前所有的临时文件都进行合并，最后会合并成为一个大文件。最终只剩下两个文件，一个是合并之后的数据文件，一个是索引文件（标识了下游各个task的数据在文件中的start offset与end offset）。最终再由下游的task根据索引文件读取相应的数据文件。")]),a._v(" "),r("p",[r("strong",[a._v("SortShuffle - bypass运行机制 ：")]),a._v(" "),r("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200525202955910.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDMxODgzMA==,size_16,color_FFFFFF,t_70",alt:""}})]),a._v(" "),r("p",[a._v("        此时上游stage的task会为每个下游stage的task都创建一个临时磁盘文件，并将数据按key进行hash然后根据key的hash值，将key写入对应的磁盘文件之中。当然，写入磁盘文件时也是先写入内存缓冲，缓冲写满之后再溢写到磁盘文件的。最后，同样会将所有临时磁盘文件都合并成一个磁盘文件，并创建一个单独的索引文件。")]),a._v(" "),r("p",[a._v("        自己的理解：bypass的就是不排序，还是用hash去为key分磁盘文件，分完之后再合并，形成一个索引文件和一个合并后的key hash文件。省掉了排序的性能。")]),a._v(" "),r("p",[a._v("        bypass机制与普通SortShuffleManager运行机制的不同在于：")]),a._v(" "),r("p",[a._v("        a、磁盘写机制不同；\n        b、不会进行排序。")]),a._v(" "),r("p",[a._v("        也就是说，启用该机制的最大好处在于，shuffle write过程中，不需要进行数据的排序操作，也就节省掉了这部分的性能开销。")]),a._v(" "),r("blockquote",[r("p",[r("font",{attrs:{color:"\tDarkViolet"}},[r("strong",[a._v("触发bypass机制的条件：")])]),a._v(" "),r("font",{attrs:{color:"black"}},[a._v("shuffle map task的数量小于 spark.shuffle.sort.bypassMergeThreshold 参数的值（默认200）或者不是聚合类的shuffle算子（比如groupByKey）")])],1)]),a._v(" "),r("hr"),a._v(" "),r("h2",{attrs:{id:"_7、简述sparksql中rdd、dataframe、dataset三者的区别与联系-重点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7、简述sparksql中rdd、dataframe、dataset三者的区别与联系-重点"}},[a._v("#")]),a._v(" 7、简述SparkSQL中RDD、DataFrame、DataSet三者的区别与联系?（重点）")]),a._v(" "),r("p",[r("strong",[r("font",{attrs:{color:"\tBlueViolet"}},[a._v("RDD")])],1)]),a._v(" "),r("p",[r("font",{attrs:{color:"\tBlueViolet"}},[r("strong",[a._v("弹性分布式数据集；不可变、可分区、元素可以并行计算的集合。")])])],1),a._v(" "),r("p",[r("strong",[r("em",[a._v("优点")]),a._v("：")])]),a._v(" "),r("ul",[r("li",[a._v("RDD编译时类型安全：编译时能检查出类型错误；")]),a._v(" "),r("li",[a._v("面向对象的编程风格：直接通过类名点的方式操作数据。")])]),a._v(" "),r("p",[r("em",[r("strong",[a._v("缺点：")])])]),a._v(" "),r("ul",[r("li",[a._v("序列化和反序列化的性能开销很大，大量的网络传输；")]),a._v(" "),r("li",[a._v("构建对象占用了大量的heap堆内存，导致频繁的GC（程序进行GC时，所有任务都是暂停）")])]),a._v(" "),r("p",[r("font",{attrs:{color:"\tFuchsia"}},[r("strong",[a._v("DataFrame")])])],1),a._v(" "),r("p",[r("font",{attrs:{color:"\tFuchsia"}},[r("strong",[a._v("RDD为基础的分布式数据集")])])],1),a._v(" "),r("p",[r("em",[r("strong",[a._v("优点：")])])]),a._v(" "),r("ul",[r("li",[a._v("DataFrame带有元数据schema，每一列都带有名称和类型。")]),a._v(" "),r("li",[a._v("DataFrame引入了off-heap，构建对象直接使用操作系统的内存，不会导致频繁GC。")]),a._v(" "),r("li",[a._v("DataFrame可以从很多数据源构建；")]),a._v(" "),r("li",[a._v("DataFrame把内部元素看成Row对象，表示一行行的数据。")]),a._v(" "),r("li",[a._v("==DataFrame=RDD+schema==")])]),a._v(" "),r("p",[r("em",[r("strong",[a._v("缺点：")])])]),a._v(" "),r("ul",[r("li",[a._v("编译时类型不安全；")]),a._v(" "),r("li",[a._v("不具有面向对象编程的风格。")])]),a._v(" "),r("p",[r("strong",[r("font",{attrs:{color:"HotPink"}},[a._v("Dataset")])],1)]),a._v(" "),r("p",[r("strong",[r("font",{attrs:{color:"HotPink"}},[a._v("包含了DataFrame的功能，Spark2.0中两者统一，DataFrame表示为DataSet[Row]，即DataSet的子集。")])],1)]),a._v(" "),r("p",[r("em",[r("strong",[a._v("优点：")])])]),a._v(" "),r("ul",[r("li",[a._v("DataSet可以在编译时检查类型；")]),a._v(" "),r("li",[a._v("并且是面向对象的编程接口")])]),a._v(" "),r("p",[a._v("        DataSet 结合了 RDD 和 DataFrame 的优点，并带来的一个新的概念 Encoder。当序列化数据时，Encoder 产生字节码与 off-heap 进行交互，能够达到按需访问数据的效果，而不用反序列化整个对象。")]),a._v(" "),r("p",[r("font",{attrs:{color:"LightSeaGreen"}},[r("strong",[a._v("三者之间的转换：")])])],1),a._v(" "),r("p",[r("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200528180637352.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDMxODgzMA==,size_16,color_FFFFFF,t_70",alt:""}})]),a._v(" "),r("hr"),a._v(" "),r("p"),a._v(" "),r("h2",{attrs:{id:"_8、repartition和coalesce关系与区别-重点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_8、repartition和coalesce关系与区别-重点"}},[a._v("#")]),a._v(" 8、Repartition和Coalesce关系与区别（重点）")]),a._v(" "),r("p",[a._v("1）关系：")]),a._v(" "),r("p",[a._v("        两者都是用来改变RDD的partition数量的，repartition底层调用的就是coalesce方法：coalesce(numPartitions, shuffle = true)")]),a._v(" "),r("p",[a._v("2）区别：")]),a._v(" "),r("p",[a._v("        repartition一定会发生shuffle，coalesce根据传入的参数来判断是否发生shuffle")]),a._v(" "),r("p",[r("font",{attrs:{color:"\tDarkGoldenrod"}},[a._v("一般情况下增大rdd的partition数量使用repartition，减少partition数量时使用coalesce")])],1),a._v(" "),r("hr"),a._v(" "),r("p"),a._v(" "),r("h2",{attrs:{id:"_9、spark中cache默认缓存级别是什么-重点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_9、spark中cache默认缓存级别是什么-重点"}},[a._v("#")]),a._v(" 9、Spark中cache默认缓存级别是什么？（重点）")]),a._v(" "),r("p",[r("code",[a._v("DataFrame")]),a._v("的"),r("code",[a._v("cache")]),a._v("默认采用 "),r("code",[a._v("MEMORY_AND_DISK")]),a._v(" 这和RDD 的默认方式不一样==RDD== ==cache== 默认采用==MEMORY_ONLY==")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200528180902911.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDMxODgzMA==,size_16,color_FFFFFF,t_70",alt:""}})]),a._v(" "),r("hr"),a._v(" "),r("h2",{attrs:{id:"_10、sparksql中join操作与left-join操作的区别-重点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_10、sparksql中join操作与left-join操作的区别-重点"}},[a._v("#")]),a._v(" 10、SparkSQL中join操作与left join操作的区别？（重点）")]),a._v(" "),r("p",[a._v("        join和sql中的inner join操作很相似，返回结果是前面一个集合和后面一个集合中匹配成功的，过滤掉关联不上的。")]),a._v(" "),r("p",[a._v("        leftJoin类似于SQL中的左外关联left outer join，返回结果以第一个RDD为主，关联不上的记录为空。")]),a._v(" "),r("p",[a._v("        部分场景下可以使用left semi join替代left join：")]),a._v(" "),r("p",[a._v("        因为 left semi join 是 in(keySet) 的关系，遇到右表重复记录，左表会跳过,性能更高，而 left join 则会一直遍历。但是left semi join 中最后 select 的结果中只许出现左表中的列名，因为右表只有 join key 参与关联计算了。")]),a._v(" "),r("hr"),a._v(" "),r("h2",{attrs:{id:"_11、spark常用算子reducebykey与groupbykey的区别-哪一种更具优势-重点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_11、spark常用算子reducebykey与groupbykey的区别-哪一种更具优势-重点"}},[a._v("#")]),a._v(" 11、Spark常用算子reduceByKey与groupByKey的区别，哪一种更具优势？（重点）")]),a._v(" "),r("p",[r("font",{attrs:{color:"\tCoral"}},[a._v("reduceByKey：按照key进行聚合，在shuffle之前有combine（预聚合）操作，返回结果是RDD[k,v]。")])],1),a._v(" "),r("p",[r("font",{attrs:{color:"\t\tIndianRed"}},[a._v("groupByKey：按照key进行分组，直接进行shuffle。")])],1),a._v(" "),r("p",[r("font",{attrs:{color:"\tOliveDrab"}},[a._v("开发指导：reduceByKey比groupByKey，建议使用。但是需要注意是否会影响业务逻辑。")])],1),a._v(" "),r("hr"),a._v(" "),r("h2",{attrs:{id:"_12、spark-shuffle默认并行度是多少-重点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_12、spark-shuffle默认并行度是多少-重点"}},[a._v("#")]),a._v(" 12、Spark Shuffle默认并行度是多少？（重点）")]),a._v(" "),r("p",[a._v("        参数spark.sql.shuffle.partitions 决定 默认并行度200")]),a._v(" "),r("hr"),a._v(" "),r("h2",{attrs:{id:"_13、简述spark中共享变量-广播变量和累加器-。-重点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_13、简述spark中共享变量-广播变量和累加器-。-重点"}},[a._v("#")]),a._v(" 13、简述Spark中共享变量（广播变量和累加器）。（重点）")]),a._v(" "),r("p",[a._v("        Spark为此提供了两种==共享变量==，一种是Broadcast Variable（"),r("font",{attrs:{color:"SlateBlue"}},[r("strong",[a._v("广播变量")])]),a._v("），另一种是Accumulator（"),r("font",{attrs:{color:"\tDarkMagenta"}},[r("strong",[a._v("累加变量")])]),a._v("）。Broadcast Variable会将使用到的变量，仅仅为每个节点拷贝一份，更大的用处是"),r("font",{attrs:{color:"SlateBlue"}},[r("strong",[a._v("优化性能，减少网络传输以及内存消耗")])]),a._v("。Accumulator则可以"),r("font",{attrs:{color:"DarkMagenta"}},[r("strong",[a._v("让多个task共同操作一份变量，主要可以进行累加操作")])]),a._v("。")],1),a._v(" "),r("p",[a._v("        Spark提供的Broadcast Variable，是只读的。并且在每个节点上只会有一份副本，而不会为每个task都拷贝一份副本。因此其最大作用，就是减少变量到各个节点的网络传输消耗，以及在各个节点上的内存消耗。此外，spark自己内部也使用了高效的广播算法来减少网络消耗。 可以通过调用SparkContext的broadcast()方法，来针对某个变量创建广播变量。然后在算子的函数内，使用到广播变量时，每个节点只会拷贝一份副本了。每个节点可以使用广播变量的value()方法获取值。记住，"),r("strong",[a._v("广播变量，是只读的")]),a._v("。")]),a._v(" "),r("hr"),a._v(" "),r("h2",{attrs:{id:"_14、sparkstreaming有哪几种方式消费kafka中的数据-它们之间的区别是什么-重点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_14、sparkstreaming有哪几种方式消费kafka中的数据-它们之间的区别是什么-重点"}},[a._v("#")]),a._v(" 14、SparkStreaming有哪几种方式消费Kafka中的数据，它们之间的区别是什么？ （重点）")]),a._v(" "),r("p",[r("strong",[a._v("一、基于Receiver的方式")])]),a._v(" "),r("p",[a._v("        这种方式使用Receiver来获取数据。Receiver是使用Kafka的高层次Consumer API来实现的。receiver从Kafka中获取的数据都是存储在Spark Executor的内存中的（如果突然数据暴增，大量batch堆积，很容易出现内存溢出的问题），然后Spark Streaming启动的job会去处理那些数据。")]),a._v(" "),r("p",[a._v("        然而，在默认的配置下，这种方式可能会因为底层的失败而丢失数据。如果要启用高可靠机制，让数据零丢失，就必须启用Spark Streaming的预写日志机制（Write Ahead Log，WAL）。该机制会同步地将接收到的Kafka数据写入分布式文件系统（比如HDFS）上的预写日志中。所以，即使底层节点出现了失败，也可以使用预写日志中的数据进行恢复。")]),a._v(" "),r("p",[r("strong",[a._v("二、基于Direct的方式")])]),a._v(" "),r("p",[a._v("        这种新的不基于Receiver的直接方式，是在Spark 1.3中引入的，从而能够确保更加健壮的机制。替代掉使用Receiver来接收数据后，这种方式会周期性地查询Kafka，来获得每个topic+partition的最新的offset，从而定义每个batch的offset的范围。当处理数据的job启动时，就会使用Kafka的简单consumer api来获取Kafka指定offset范围的数据。")]),a._v(" "),r("p",[r("em",[r("strong",[a._v("优点如下：")])])]),a._v(" "),r("p",[r("em",[r("strong",[a._v("简化并行读取：")])]),a._v("  如果要读取多个partition，不需要创建多个输入DStream然后对它们进行union操作。Spark会创建跟Kafka partition一样多的RDD partition，并且会并行从Kafka中读取数据。所以在Kafka partition和RDD partition之间，有一个一对一的映射关系。")]),a._v(" "),r("p",[r("em",[r("strong",[a._v("高性能：")])]),a._v(" 如果要保证零数据丢失，在基于receiver的方式中，需要开启WAL机制。这种方式其实效率低下，因为数据实际上被复制了两份，Kafka自己本身就有高可靠的机制，会对数据复制一份，而这里又会复制一份到WAL中。而基于direct的方式，不依赖Receiver，不需要开启WAL机制，只要Kafka中作了数据的复制，那么就可以通过Kafka的副本进行恢复。")]),a._v(" "),r("p",[r("strong",[a._v("三、对比：")])]),a._v(" "),r("p",[a._v("        基于receiver的方式，是使用Kafka的高阶API来在 ZooKeeper 中保存消费过的offset的。这是消费Kafka数据的传统方式。这种方式配合着WAL机制可以保证数据零丢失的高可靠性，但是却无法保证数据被处理一次且仅一次，可能会处理两次。因为Spark和 ZooKeeper 之间可能是不同步的。")]),a._v(" "),r("p",[a._v("        基于direct的方式，使用 kafka 的简单 api ，Spark Streaming自己就负责追踪消费的offset，并保存在checkpoint中。Spark自己一定是同步的，因此可以保证数据是消费一次且仅消费一次。")]),a._v(" "),r("p",[r("font",{attrs:{color:"red"}},[a._v("在实际生产环境中大都用Direct方式")])],1),a._v(" "),r("hr"),a._v(" "),r("h2",{attrs:{id:"_15、请简述一下sparkstreaming的窗口函数中窗口宽度和滑动距离的关系-重点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_15、请简述一下sparkstreaming的窗口函数中窗口宽度和滑动距离的关系-重点"}},[a._v("#")]),a._v(" 15、请简述一下SparkStreaming的窗口函数中窗口宽度和滑动距离的关系？（重点）")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200528200920803.png",alt:""}})]),a._v(" "),r("hr"),a._v(" "),r("h2",{attrs:{id:"_16、spark通用运行流程概述-重点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_16、spark通用运行流程概述-重点"}},[a._v("#")]),a._v(" 16、Spark通用运行流程概述？（重点）")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://img-blog.csdnimg.cn/2020052820093514.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDMxODgzMA==,size_16,color_FFFFFF,t_70",alt:""}})]),a._v(" "),r("p",[a._v("        不论Spark以何种模式进行部署，任务提交后，都会先启动Driver进程，随后Driver进程向集群管理器注册应用程序，之后集群管理器根据此任务的配置文件分配Executor并启动，当Driver所需的资源全部满足后，Driver开始执行main函数，Spark查询为懒执行，当执行到action算子时开始反向推算，根据宽依赖进行stage的划分，随后每一个stage对应一个taskset，taskset中有多个task，根据本地化原则，task会被分发到指定的Executor去执行，在任务执行的过程中，Executor也会不断与Driver进行通信，报告任务运行情况。")]),a._v(" "),r("hr"),a._v(" "),r("h2",{attrs:{id:"_17、standalone模式运行机制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_17、standalone模式运行机制"}},[a._v("#")]),a._v(" 17、Standalone模式运行机制")]),a._v(" "),r("p",[a._v("        Standalone集群有四个重要组成部分，分别是：")]),a._v(" "),r("p",[a._v("        1)Driver：是一个进程，我们编写的Spark应用程序就运行在Driver上，由Driver进程执行；")]),a._v(" "),r("p",[a._v("        2)Master(RM)：是一个进程，主要负责资源的调度和分配，并进行集群的监控等职责；")]),a._v(" "),r("p",[a._v("        3)Worker(NM)：是一个进程，一个Worker运行在集群中的一台服务器上，主要负责两个职责，一个是用自己的内存存储RDD的某个或某些partition；另一个是启动其他进程和线程（Executor），对RDD上的partition进行并行的处理和计算。")]),a._v(" "),r("p",[a._v("        4)Executor：是一个进程，一个Worker上可以运行多个Executor，Executor通过启动多个线程（task）来执行对RDD的partition进行并行计算，也就是执行我们对RDD定义的例如map、flatMap、reduce等算子操作。")]),a._v(" "),r("p",[a._v("**Standalone Client模式")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200528201122188.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDMxODgzMA==,size_16,color_FFFFFF,t_70",alt:""}})]),a._v(" "),r("p",[a._v("        在Standalone Client模式下，Driver在任务提交的本地机器上运行，Driver启动后向Master注册应用程序，Master根据submit脚本的资源需求找到内部资源至少可以启动一个Executor的所有Worker，然后在这些Worker之间分配Executor，Worker上的Executor启动后会向Driver反向注册，所有的Executor注册完成后，Driver开始执行main函数，之后执行到Action算子时，开始划分stage，每个stage生成对应的taskSet，之后将task分发到各个Executor上执行。")]),a._v(" "),r("p",[r("strong",[a._v("Standalone Cluster模式")])]),a._v(" "),r("p",[r("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200528201156293.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDMxODgzMA==,size_16,color_FFFFFF,t_70",alt:""}})]),a._v(" "),r("p",[a._v("        在Standalone Cluster模式下，任务提交后，Master会找到一个Worker启动Driver进程， Driver启动后向Master注册应用程序，Master根据submit脚本的资源需求找到内部资源至少可以启动一个Executor的所有Worker，然后在这些Worker之间分配Executor，Worker上的Executor启动后会向Driver反向注册，所有的Executor注册完成后，Driver开始执行main函数，之后执行到Action算子时，开始划分stage，每个stage生成对应的taskSet，之后将task分发到各个Executor上执行。")]),a._v(" "),r("p",[a._v("        注意，Standalone的两种模式下（client/Cluster），Master在接到Driver注册Spark应用程序的请求后，会获取其所管理的剩余资源能够启动一个Executor的所有Worker，然后在这些Worker之间分发Executor，此时的分发只考虑Worker上的资源是否足够使用，直到当前应用程序所需的所有Executor都分配完毕，Executor反向注册完毕后，Driver开始执行main程序。")]),a._v(" "),r("hr"),a._v(" "),r("h2",{attrs:{id:"_18、简述一下spark-内存管理-了解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_18、简述一下spark-内存管理-了解"}},[a._v("#")]),a._v(" 18、简述一下Spark 内存管理？(了解)")]),a._v(" "),r("p",[a._v("        在执行Spark 的应用程序时，Spark 集群会启动 Driver 和 Executor 两种 JVM 进程，前者为主控进程，负责创建 Spark 上下文，提交 Spark 作业（Job），并将作业转化为计算任务（Task），在各个 Executor 进程间协调任务的调度，后者负责在工作节点上执行具体的计算任务，并将结果返回给 Driver，同时为需要持久化的 RDD 提供存储功能。由于 Driver 的内存管理相对来说较为简单，本节主要对 Executor 的内存管理进行分析，下文中的 Spark 内存均特指 Executor 的内存。")]),a._v(" "),r("p",[r("em",[r("strong",[a._v("堆内和堆外内存规划")])])]),a._v(" "),r("p",[a._v("        作为一个 JVM 进程，"),r("font",{attrs:{color:"red"}},[a._v("Executor 的内存管理建立在 JVM 的内存管理之上，Spark 对 JVM 的堆内（On-heap）空间进行了更为详细的分配，以充分利用内存。同时，Spark 引入了堆外（Off-heap）内存，使之可以直接在工作节点的系统内存中开辟空间，进一步优化了内存的使用")]),a._v("。")],1),a._v(" "),r("p",[r("font",{attrs:{color:"purple"}},[a._v("堆内内存受到JVM统一管理，堆外内存是直接向操作系统进行内存的申请和释放。")])],1),a._v(" "),r("p",[r("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200528201423849.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDMxODgzMA==,size_16,color_FFFFFF,t_70",alt:""}})]),a._v(" "),r("p",[r("strong",[a._v("1.堆内内存")])]),a._v(" "),r("p",[r("code",[a._v("堆内内存")]),a._v("的大小，由 Spark 应用程序启动时的 "),r("code",[a._v("–executor-memory")]),a._v(" 或 "),r("code",[a._v("spark.executor.memory")]),a._v(" 参数配置。Executor 内运行的并发任务共享 JVM 堆内内存，"),r("font",{attrs:{color:"red"}},[a._v("这些任务在缓存 RDD 数据和广播（Broadcast）数据时占用的内存被规划为"),r("strong",[a._v("存储（Storage）内存")])]),a._v("，而"),r("font",{attrs:{color:"red"}},[a._v("这些任务在执行 Shuffle 时占用的内存被规划为"),r("strong",[a._v("执行（Execution）内存")]),a._v("，剩余的部分不做特殊规划，那些 Spark 内部的对象实例，或者用户定义的 Spark 应用程序中的对象实例，均占用剩余的空间")]),a._v("。不同的管理模式下，这三部分占用的空间大小各不相同。")],1),a._v(" "),r("p",[a._v('        Spark 对堆内内存的管理是一种逻辑上的"'),r("font",{attrs:{color:"red"}},[a._v("规划式")]),a._v('"的管理，因为对象实例占用内存的申请和释放都由 JVM 完成，Spark 只能在申请后和释放前记录这些内存，我们来看其具体流程：')],1),a._v(" "),r("p",[a._v("        申请内存流程如下：")]),a._v(" "),r("p",[a._v("        1.Spark 在代码中 new 一个对象实例；\n        2.JVM 从堆内内存分配空间，创建对象并返回对象引用；\n        3.Spark 保存该对象的引用，记录该对象占用的内存。")]),a._v(" "),r("p",[a._v("        释放内存流程如下：")]),a._v(" "),r("p",[a._v("        1.\tSpark记录该对象释放的内存，删除该对象的引用；\n        2.\t等待JVM的垃圾回收机制释放该对象占用的堆内内存。")]),a._v(" "),r("p",[a._v("        我们知道，JVM 的对象可以以序列化的方式存储，序列化的过程是将对象转换为二进制字节流，本质上可以理解为将非连续空间的链式存储转化为连续空间或块存储，在访问时则需要进行序列化的逆过程——反序列化，将字节流转化为对象，序列化的方式可以节省存储空间，但增加了存储和读取时候的计算开销。")]),a._v(" "),r("p",[r("font",{attrs:{color:"red"}},[a._v("对于 Spark 中序列化的对象，由于是字节流的形式，其占用的内存大小可直接计算，而对于非序列化的对象，其占用的内存是通过周期性地采样近似估算而得，即并不是每次新增的数据项都会计算一次占用的内存大小，这种方法降低了时间开销但是有可能误差较大，导致某一时刻的实际内存有可能远远超出预期")]),a._v("。此外，在被 Spark 标记为释放的对象实例，很有可能在实际上并没有被 JVM 回收，导致实际可用的内存小于 Spark 记录的可用内存。所以 Spark 并不能准确记录实际可用的堆内内存，从而也就无法完全避免内存溢出（OOM, Out of Memory）的异常。")],1),a._v(" "),r("p",[a._v("        虽然不能精准控制堆内内存的申请和释放，但 Spark 通过对存储内存和执行内存各自独立的规划管理，可以决定是否要在存储内存里缓存新的 RDD，以及是否为新的任务分配执行内存，在一定程度上可以提升内存的利用率，减少异常的出现。")]),a._v(" "),r("p",[r("strong",[a._v("2.堆外内存")])]),a._v(" "),r("p",[a._v("        为了进一步优化内存的使用以及提高 Shuffle 时排序的效率，"),r("font",{attrs:{color:"red"}},[a._v("Spark 引入了堆外（Off-heap）内存，使之可以直接在工作节点的系统内存中开辟空间，存储经过序列化的二进制数据")]),a._v("。")],1),a._v(" "),r("p",[r("font",{attrs:{color:"purple"}},[a._v("堆外内存意味着把内存对象分配在Java虚拟机的堆以外的内存，这些内存直接受操作系统管理（而不是虚拟机）。这样做的结果就是能保持一个较小的堆，以减少垃圾收集对应用的影响。")])],1),a._v(" "),r("p",[a._v("        利用 JDK Unsafe API（从 Spark 2.0 开始，在管理堆外的存储内存时不再基于 Tachyon，而是与堆外的执行内存一样，基于 JDK Unsafe API 实现），"),r("font",{attrs:{color:"red"}},[a._v("Spark 可以直接操作系统堆外内存，减少了不必要的内存开销，以及频繁的 GC 扫描和回收，提升了处理性能")]),a._v("。堆外内存可以被精确地申请和释放（堆外内存之所以能够被精确的申请和释放，是由于内存的申请和释放不再通过JVM机制，而是直接向操作系统申请，JVM对于内存的清理是无法准确指定时间点的，因此无法实现精确的释放），"),r("font",{attrs:{color:"red"}},[a._v("而且序列化的数据占用的空间可以被精确计算，所以相比堆内内存来说降低了管理的难度，也降低了误差")]),a._v("。")],1),a._v(" "),r("p",[a._v("        在默认情况下堆外内存并不启用，可通过配置 spark.memory.offHeap.enabled 参数启用，并由 spark.memory.offHeap.size 参数设定堆外空间的大小。"),r("font",{attrs:{color:"red"}},[a._v("除了没有 other 空间，堆外内存与堆内内存的划分方式相同，所有运行中的并发任务共享存储内存和执行内存")]),a._v("。")],1),a._v(" "),r("h2",{attrs:{id:"_19、transformation和action的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_19、transformation和action的区别"}},[a._v("#")]),a._v(" 19、Transformation和action的区别")]),a._v(" "),r("p",[a._v("        1、transformation是得到一个新的RDD，方式很多，比如从数据源生成一个新的RDD，从RDD生成一个新的RDD")]),a._v(" "),r("p",[a._v("        2、action是得到一个值，或者一个结果（直接将RDDcache到内存中）\n"),r("font",{attrs:{color:"DarkOrchid"}},[a._v("所有的transformation都是采用的懒策略，就是如果只是将transformation提交是不会执行计算的，计算只有在action被提交的时候才被触发")]),a._v("。")],1),a._v(" "),r("hr"),a._v(" "),r("h2",{attrs:{id:"_20、map和-flatmap区别-对结果集的影响有什么不同"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_20、map和-flatmap区别-对结果集的影响有什么不同"}},[a._v("#")]),a._v(" 20、Map和 FlatMap区别 对结果集的影响有什么不同")]),a._v(" "),r("p",[a._v("        map的作用很容易理解就是对rdd之中的元素进行逐一进行函数操作映射为另外一个rdd。")]),a._v(" "),r("p",[a._v("        flatMap的操作是将函数应用于rdd之中的每一个元素，将返回的迭代器的所有内容构成新的rdd。通常用来切分单词。")]),a._v(" "),r("p",[a._v("        Spark 中 map函数会对每一条输入进行指定的操作，然后为每一条输入返回一个对象。 而flatMap函数则是两个操作的集合——正是“"),r("strong",[a._v("先映射后扁平化")]),a._v("”")])])}),[],!1,null,null,null);t.default=s.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{456:function(n,i,v){"use strict";v.r(i);var _=v(30),t=Object(_.a)({},(function(){var n=this,i=n.$createElement,v=n._self._c||i;return v("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[v("h2",{attrs:{id:"_01背包问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_01背包问题"}},[n._v("#")]),n._v(" 01背包问题")]),n._v(" "),v("ul",[v("li",[v("p",[n._v("题目：")]),n._v(" "),v("ul",[v("li",[v("p",[n._v("有"),v("code",[n._v("N")]),n._v("件物品和一个容量是"),v("code",[n._v("V")]),n._v("的背包。每件物品只能使用一次。")]),n._v(" "),v("p",[n._v("第"),v("code",[n._v("i")]),n._v("件物品的体积是"),v("code",[n._v("vi")]),n._v("，价值是"),v("code",[n._v("wi")]),n._v("。")]),n._v(" "),v("p",[n._v("求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。")]),n._v(" "),v("p",[n._v("输出最大价值。")])])])]),n._v(" "),v("li",[v("p",[n._v("做法：")]),n._v(" "),v("ul",[v("li",[v("p",[v("strong",[n._v("方法一")]),n._v("：二维数组")]),n._v(" "),v("ul",[v("li",[n._v("这里用数组"),v("code",[n._v("f[i][j]")]),n._v("表示当前的状态，表示在背包的容量为"),v("code",[n._v("j")]),n._v("的时候选择前面"),v("code",[n._v("i")]),n._v("个物品时能够获得的最大价格")])]),n._v(" "),v("p",[n._v("​       如果当前能够选择这个物品，则状态方程为"),v("code",[n._v("f[i][j] = max(f[i - 1][j], f[i - 1][j - a[i]] + b[i]);")])]),n._v(" "),v("p",[n._v("​       即要么就选当前的第"),v("code",[n._v("i")]),n._v("个物品，要么就不选第"),v("code",[n._v("i")]),n._v("个物品")]),n._v(" "),v("p",[n._v("​       否则"),v("code",[n._v("f[i][j] = f[i - 1][j];")])]),n._v(" "),v("ul",[v("li",[v("div",{staticClass:"language-c++ extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[n._v("#include <iostream>\n\nusing namespace std;\n\nconst int N = 1e6 + 10;\n\nint n, m;\nint a[N], b[N], f[N][N];\n\nint main()\n{\n    cin >> n >> m;//n是个数，m是背包容量\n    for (int i = 1; i <= n; i ++ ) cin >> a[i] >> b[i];//a[i]是重量,b是价格\n\n    for (int i = 1; i <= n; i ++ )\n        for (int j = 1; j <= m; j ++ )\n            if (j >= a[i]) f[i][j] = max(f[i - 1][j], f[i - 1][j - a[i]] + b[i]);\n            else f[i][j] = f[i - 1][j];\n    \n    cout << f[n][m] << endl;\n    return 0;\n}\n")])])])])])]),n._v(" "),v("li",[v("p",[v("strong",[n._v("方法二")]),n._v("：一维数组")]),n._v(" "),v("ul",[v("li",[v("p",[n._v("动态规划中的一个常见的优化就是空间和时间的相互交换")]),n._v(" "),v("p",[n._v("从二维数组的情况中可以看到需要用到数组"),v("code",[n._v("f[i][j]")]),n._v("这个二维数组，即空间范围开销非常大")]),n._v(" "),v("p",[n._v("而与此同时也可以观察到，当"),v("code",[n._v("i")]),n._v("在不断增大的时候，每一次状态方程的迭代都只和前面一排数字有关，")]),n._v(" "),v("p",[n._v("比如在算前三个物品的时候，只要看前两个物品的数组状态，前一个物品的数组状态就不再需要了")]),n._v(" "),v("p",[n._v("所以可以将二维数组降维为一维数组来解决问题")]),n._v(" "),v("p",[n._v("不过需要注意的是循环的方向需要改变，具体请看代码")])]),n._v(" "),v("li",[v("div",{staticClass:"language-c++ extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[n._v("#include <iostream>\n\nusing namespace std;\n\nconst int N = 1e6 + 10;\n\nint n, m;\nint a[N], b[N], f[N];\n\nint main()\n{\n    cin >> n >> m;//n是个数，m是背包容量\n    for (int i = 1; i <= n; i ++ ) cin >> a[i] >> b[i];//a[i]是重量,b是价格\n\n    for (int i = 1; i <= n; i ++ )\n        for (int j = m; j >= a[i]; j -- )\n            f[j] = max(f[j], f[j - a[i]] + b[i]);\n    \n    cout << f[m] << endl;\n    return 0;\n}\n")])])])])])])])])]),n._v(" "),v("h2",{attrs:{id:"完全背包问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#完全背包问题"}},[n._v("#")]),n._v(" 完全背包问题")]),n._v(" "),v("ul",[v("li",[v("p",[n._v("问题：")]),n._v(" "),v("ul",[v("li",[v("p",[n._v("有"),v("code",[n._v("N")]),n._v("种物品和一个容量是"),v("code",[n._v("V")]),n._v("的背包，每种物品都有无限件可用。")]),n._v(" "),v("p",[n._v("第"),v("code",[n._v("i")]),n._v("种物品的体积是"),v("code",[n._v("vi")]),n._v("，价值是 wi。")]),n._v(" "),v("p",[n._v("求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。")]),n._v(" "),v("p",[n._v("输出最大价值。")])])])]),n._v(" "),v("li",[v("p",[n._v("做法：")]),n._v(" "),v("ul",[v("li",[v("p",[v("strong",[n._v("方法一")]),n._v("：二维数组")]),n._v(" "),v("ul",[v("li",[v("p",[n._v("可以看到这个和01背包问题的差别就是每一件物品都是可以无限次使用的，")]),n._v(" "),v("p",[n._v("但仔细考察，发现只是在状态方程的地方多了一个表达式罢了")])]),n._v(" "),v("li",[v("p",[n._v("对于每一个物品，我们的选择是拿或者不拿，如果不拿，那么当前的背包容量的状态下能够获得的最大价值就是前"),v("code",[n._v("i-1")]),n._v("个物体所能够拿到的最大价值")]),n._v(" "),v("p",[n._v("如果拿，那么就是当前的物品的价值加上前"),v("code",[n._v("i-1")]),n._v("物体在当前容量减去当前物体的容量下能够获取的最大价值，或者是加上前"),v("code",[n._v("i")]),n._v("物体在当前容量减去当前物体的容量下能够获取的最大价值（这里就是多出来的一个表达式）")])]),n._v(" "),v("li",[v("div",{staticClass:"language-c++ extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[n._v("#include <iostream>\n\nusing namespace std;\n\nconst int N = 1e6 + 10;\n\nint n, m;\nint a[N], b[N], f[N][N];\n\nint main()\n{\n    cin >> n >> m;//n是物品的数量，m是背包的容积\n    for (int i = 1; i <= n; i ++ ) cin >> a[i] >> b[i];//a[i]是重量,b是价格\n\n    for (int i = 1; i <= n; i ++ )\n        for (int j = 0; j <= m; j ++ )\n            if (j >= a[i]) f[i][j] = max(max(f[i][j - a[i]] + b[i], f[i - 1][j - a[i]] + b[i]), f[i - 1][j]);\n            else f[i][j] = f[i - 1][j];\n    \n    cout << f[n][m] << endl;\n    return 0;\n}\n")])])])])])]),n._v(" "),v("li",[v("p",[v("strong",[n._v("方法二")]),n._v("：一维数组")]),n._v(" "),v("ul",[v("li",[v("p",[n._v("优化和01背包问题相似")])]),n._v(" "),v("li",[v("div",{staticClass:"language-c++ extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[n._v("#include <iostream>\n\nusing namespace std;\n\nconst int N = 1e6 + 10;\n\nint n, m;\nint a[N], b[N], f[N];\n\nint main()\n{\n    cin >> n >> m;//n是物品的数量，m是背包的容积\n    for (int i = 1; i <= n; i ++ ) cin >> a[i] >> b[i];//a[i]是重量,b[i]是价格\n\n    for (int i = 1; i <= n; i ++ )           //从一开始的好处，不用预先初始化\n        for (int j = 1; j <= m; j ++ )\n            if (j >= a[i]) f[j] = max(f[j], f[j - a[i]] + b[i]);\n    \n    cout << f[m] << endl;\n    return 0;\n}\n")])])])])])])])])]),n._v(" "),v("h2",{attrs:{id:"多重背包问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#多重背包问题"}},[n._v("#")]),n._v(" 多重背包问题")]),n._v(" "),v("ul",[v("li",[v("p",[n._v("问题：")]),n._v(" "),v("ul",[v("li",[v("p",[n._v("有"),v("code",[n._v("N")]),n._v("种物品和一个容量是"),v("code",[n._v("V")]),n._v("的背包。")]),n._v(" "),v("p",[n._v("第"),v("code",[n._v("i")]),n._v("种物品最多有 "),v("code",[n._v("si")]),n._v(" 件，每件体积是"),v("code",[n._v("vi")]),n._v("，价值是"),v("code",[n._v("wi")]),n._v("。")]),n._v(" "),v("p",[n._v("求解将哪些物品装入背包，可使物品体积总和不超过背包容量，且价值总和最大。")]),n._v(" "),v("p",[n._v("输出最大价值。")])])])]),n._v(" "),v("li",[v("p",[n._v("做法：")]),n._v(" "),v("ul",[v("li",[v("p",[v("strong",[n._v("方法一")]),n._v("：二维数组")]),n._v(" "),v("ul",[v("li",[v("p",[n._v("对于题目可以这样理解：其实问题的本质还是01背包问题，但是有一个特殊的情况就是每一个物体可以有"),v("code",[n._v("si")]),n._v("件（那就在开一个循环就行了）")])]),n._v(" "),v("li",[v("div",{staticClass:"language-c++ extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[n._v("#include <iostream>\n\nusing namespace std;\n\nconst int N = 1e4 + 10;\n\nint n, m;\nint a[N], b[N], num[N], f[N][N];\n\nint main()\n{\n    cin >> n >> m;//n是物品的数量，m是背包的容积\n    for (int i = 1; i <= n; i ++ ) cin >> a[i] >> b[i] >> num[i];\n    //num[i]是数量,a[i]是重量,b是价格\n\n    for (int i = 1; i <= n; i ++ )\n        for (int j = 1; j <= m; j ++ )\n            for (int l = 0; l * a[i] <= j && l <= num[i]; l ++ )\n                f[i][j] = max(f[i][j], f[i - 1][j - l * a[i]] + l * b[i]);\n    \n    cout << f[n][m] << endl;\n    return 0;\n}\n")])])])])])]),n._v(" "),v("li",[v("p",[v("strong",[n._v("方法二")]),n._v("：一维数组")]),n._v(" "),v("ul",[v("li",[v("p",[n._v("同样用01背包问题的优化")])]),n._v(" "),v("li",[v("div",{staticClass:"language-c++ extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[n._v("#include <iostream>\n\nusing namespace std;\n\nconst int N = 1e6 + 10;\n\nint n, m;\nint a[N], b[N], num[N], f[N];\n\nint main()\n{\n    cin >> n >> m;\n    //n是物品的数量，m是背包的容积\n    for (int i = 1; i <= n; i ++ ) cin >> a[i] >> b[i] >> num[i];\n    //num[i]是数量,a[i]是重量,b是价格\n\n    for (int i = 1; i <= n; i ++ )\n        for (int j = m; j >= 0; j ++ )\n            for (int l = 0; l <= num[i]; l += a[i])\n                f[j] = max(f[j], f[j - l * a[i]] + l * b[i]);\n    \n    cout << f[m] << endl;\n    return 0;\n}\n")])])])])])]),n._v(" "),v("li",[v("p",[v("strong",[n._v("方法三")]),n._v("：二进制")]),n._v(" "),v("ul",[v("li",[v("p",[n._v("既然多重背包的本质还是01背包问题，那么可不可以对于当前的"),v("code",[n._v("si")]),n._v("个"),v("code",[n._v("i")]),n._v("物品，将其变成数个不同的物品，但是所有的情况都能用这些个物品来表示呢？")]),n._v(" "),v("p",[n._v("这里就可以引进二进制来优化问题，就是把这"),v("code",[n._v("si")]),n._v("个"),v("code",[n._v("i")]),n._v("物品分解为数个二的次方组成，而所有的情况也都可以用二进制来表示")])]),n._v(" "),v("li",[v("div",{staticClass:"language-c++ extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[n._v("#include <algorithm>\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nconst int N = 1e6 + 10;\n\nint f[N], n, m;\nstruct good\n{\n    int w, v;\n};//这里的w存放新物品的重量，v存放新物品的价格\n\nint main()\n{\n    vector<good> Good;\n\n    cin >> n >> m;\n    //n是物品的数量，m是背包的容积\n    for (int i = 1; i <= n; i ++ )\n    {\n        int v, w, s;\n        cin >> v >> w >> s;\n        //v是价值，w是重量，s是数量\n\n        for (int k = 1; k <= s; k *= 2)\n        {\n            s -= k;\n            Good.push_back({k * w, k * v});\n            //创建的新数组Good用于存放已被二进制转化的背包\n        }\n        if (s > 0) Good.push_back({s * w, s * v});\n    }\n\t\n    //问题变成01背包问题\n    for (auto t : Good)\n        for (int j = m; j >= t.v; j--)\n            f[j] = max(f[j], f[j - t.v] + t.w);\n\n    cout << f[m] << endl;\n    return 0;\n}\n")])])])])])]),n._v(" "),v("li",[v("p",[v("strong",[n._v("方法四")]),n._v("：单调队列优化")]),n._v(" "),v("ul",[v("li",[v("p",[n._v("既然可以用数组的方法来优化，那么也可以用一个单调队列的方法将时间复杂度优化至"),v("code",[n._v("O(nv)")])])]),n._v(" "),v("li",[v("p",[n._v("令 dp[j] 表示容量为j的情况下，获得的最大价值\n那么，针对每一类物品 i ，我们都更新一下 dp[m] --\x3e dp[0] 的值，最后 dp[m] 就是一个全局最优值")]),n._v(" "),v("p",[n._v("dp[m] = max(dp[m], dp[m-v] + w, dp[m-2"),v("em",[n._v("v] + 2")]),n._v("w, dp[m-3"),v("em",[n._v("v] + 3")]),n._v("w, ...)")]),n._v(" "),v("p",[n._v("接下来，我们把 dp[0] --\x3e dp[m] 写成下面这种形式\ndp[0], dp[v],   dp[2"),v("em",[n._v("v],   dp[3")]),n._v("v],   ... , dp[k"),v("em",[n._v("v]\ndp[1], dp[v+1], dp[2")]),n._v("v+1], dp[3"),v("em",[n._v("v+1], ... , dp[k")]),n._v("v+1]\ndp[2], dp[v+2], dp[2"),v("em",[n._v("v+2], dp[3")]),n._v("v+2], ... , dp[k"),v("em",[n._v("v+2]\n...\ndp[j], dp[v+j], dp[2")]),n._v("v+j], dp[3"),v("em",[n._v("v+j], ... , dp[k")]),n._v("v+j]\n显而易见，m 一定等于 k"),v("em",[n._v("v + j，其中  0 <= j < v\n所以，我们可以把 dp 数组分成 j 个类，每一类中的值，都是在同类之间转换得到的\n也就是说，dp[k")]),n._v("v+j] 只依赖于 { dp[j], dp[v+j], dp[2"),v("em",[n._v("v+j], dp[3")]),n._v("v+j], ... , dp[k*v+j] }")]),n._v(" "),v("p",[n._v("因为我们需要的是{ dp[j], dp[v+j], dp[2"),v("em",[n._v("v+j], dp[3")]),n._v("v+j], ... , dp[k*v+j] } 中的最大值，\n可以通过维护一个单调队列来得到结果。这样的话，问题就变成了 j 个单调队列的问题")])]),n._v(" "),v("li",[v("div",{staticClass:"language-c++ extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[n._v("#include <cstring>\n#include <iostream>\n\nusing namespace std;\n\nconst int N = 1e6 + 10;\n\nint dp[N], pre[N], q[N];\nint n, m;\n\nint main()\n{\n    cin >> n >> m;\n    for (int i = 0; i < n; ++i)\n    {\n        memcpy(pre, dp, sizeof(dp));\n        int v, w, s;\n        cin >> v >> w >> s;\n        for (int j = 0; j < v; ++j)\n        {\n            int head = 0, tail = -1;\n            for (int k = j; k <= m; k += v)\n            {\n                if (head <= tail && k - s * v > q[head])\n                    ++head;\n                while (head <= tail && pre[q[tail]] - (q[tail] - j) / v * w <= pre[k] - (k - j) / v * w)\n                    --tail;\n                if (head <= tail) dp[k] = max(dp[k], pre[q[head]] + (k - q[head]) / v * w);\n                q[++tail] = k;\n            }\n        }\n    }\n    cout << dp[m] << endl;\n    return 0;\n}\n")])])])])])])])])]),n._v(" "),v("h2",{attrs:{id:"混合背包问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#混合背包问题"}},[n._v("#")]),n._v(" 混合背包问题")]),n._v(" "),v("ul",[v("li",[v("p",[n._v("问题：")]),n._v(" "),v("ul",[v("li",[v("p",[n._v("有"),v("code",[n._v("N")]),n._v("种物品和一个容量是"),v("code",[n._v("V")]),n._v("的背包。")]),n._v(" "),v("p",[n._v("物品一共有三类：")]),n._v(" "),v("ul",[v("li",[n._v("第一类物品只能用1次（01背包）；")]),n._v(" "),v("li",[n._v("第二类物品可以用无限次（完全背包）；")]),n._v(" "),v("li",[n._v("第三类物品最多只能用"),v("code",[n._v("si")]),n._v("次（多重背包）；")])]),n._v(" "),v("p",[n._v("每种体积是"),v("code",[n._v("vi")]),n._v("，价值是"),v("code",[n._v("wi")]),n._v("。")]),n._v(" "),v("p",[n._v("求解将哪些物品装入背包，可使物品体积总和不超过背包容量，且价值总和最大。\n输出最大价值。")])])])]),n._v(" "),v("li",[v("p",[n._v("做法：")]),n._v(" "),v("ul",[v("li",[v("p",[n._v("本质还是01背包问题，但是要注意完全背包和多重背包问题的转换，同时使用二进制优化")])]),n._v(" "),v("li",[v("div",{staticClass:"language-c++ extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[n._v("#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = 1e6 + 10;\n\nint n, m, v[N], w[N], f[N];\n\nint main()\n{\n    cin >> n >> m;\n    int cnt = 1;\n    for (int i = 1; i <= n; i++)\n    {\n        int a, b, s, k = 1;\n        cin >> a >> b >> s;\n        //a为价值，b为重量，s为数量\n        //这里规定s=-1的时候为01背包，s=0为完全背包，s>0为多重背包\n        if (s < 0) s = 1;\n        //即为01背包问题\n        else if (s == 0) s = m / a;\n        //把完全背包先转化成多重背包，则在最优情况下，只能取总体积/该物品体积向下取整（因为最多只能拿这么多）\n        //接下来就是二进制优化\n        while (k <= s)\n        {\n            v[cnt] = a * k;\n            w[cnt] = b * k;\n            s -= k;\n            k *= 2;\n            cnt++;\n        }\n        //如果是多重背包问题，除了二进制优化，还要注意一种情况，就是该种物品能拿到该种物品的数量上的极限\n        if (s > 0)\n        {\n            v[cnt] = s * a;\n            w[cnt] = s * b;\n            cnt++;\n        }\n    } \n    //将多重背包进行二进制优化，变成01背包\n    for (int i = 1; i <= cnt; i++)\n        for (int j = m; j >= v[i]; j--)\n            f[j] = max(f[j], f[j - v[i]] + w[i]);\n\n    cout << f[m] << endl;\n    return 0;\n}\n")])])])])])])]),n._v(" "),v("h2",{attrs:{id:"二维费用背包问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二维费用背包问题"}},[n._v("#")]),n._v(" 二维费用背包问题")]),n._v(" "),v("ul",[v("li",[v("p",[n._v("问题：")]),n._v(" "),v("ul",[v("li",[v("p",[n._v("有"),v("code",[n._v("N")]),n._v("件物品和一个容量是"),v("code",[n._v("V")]),n._v("的背包，背包能承受的最大重量是"),v("code",[n._v("M")]),n._v("。")]),n._v(" "),v("p",[n._v("每件物品只能用一次。体积是"),v("code",[n._v("vi")]),n._v("，重量是"),v("code",[n._v("mi")]),n._v("，价值是"),v("code",[n._v("wi")]),n._v("。")]),n._v(" "),v("p",[n._v("求解将哪些物品装入背包，可使物品总体积不超过背包容量，总重量不超过背包可承受的最大重量，且价值总和最大。\n输出最大价值。")])])])]),n._v(" "),v("li",[v("p",[n._v("做法：")]),n._v(" "),v("ul",[v("li",[v("p",[v("strong",[n._v("方法一")]),n._v("：二维数组")]),n._v(" "),v("ul",[v("li",[v("p",[n._v("做法和01背包问题相似，即对于前面"),v("code",[n._v("i")]),n._v("件物品，在体积为"),v("code",[n._v("j")]),n._v("和的情况和承受重量为"),v("code",[n._v("k")]),n._v("的情况下，能够拿到的最大价值")])]),n._v(" "),v("li",[v("div",{staticClass:"language-c++ extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[n._v("#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = 1e4 + 5;\n\nint n, V, M;\nint v[N], m[N], w[N], f[N][N];\n\nint main () \n{\n    cin >> n >> V >> M;//数量，体积，最大承受重量\n    for (int i = 1; i <= n; i ++) \n        cin >> v[i] >> m[i] >> w[i]; //体积，重量，价值\n\n    for (int i = 1; i <= n; i ++)\n        for (int j = V; j >= v[i]; j --)\n            for (int k = M; k >= m[i]; k --)\n                f[j][k] = max (f[j - v[i]][k - m[i]] + w[i], f[j][k]);\n\n    cout << f[V][M] << endl;\n    return 0;\n} \n")])])])])])])])])]),n._v(" "),v("h2",{attrs:{id:"分组背包问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#分组背包问题"}},[n._v("#")]),n._v(" 分组背包问题")]),n._v(" "),v("ul",[v("li",[v("p",[n._v("问题：")]),n._v(" "),v("ul",[v("li",[v("p",[n._v("有"),v("code",[n._v("N")]),n._v("组物品和一个容量是"),v("code",[n._v("V")]),n._v("的背包。")]),n._v(" "),v("p",[n._v("每组物品有若干个，同一组内的物品最多只能选一个。\n每件物品的体积是"),v("code",[n._v("vij")]),n._v("，价值是"),v("code",[n._v("wij")]),n._v("，其中"),v("code",[n._v("i")]),n._v("是组号，"),v("code",[n._v("j")]),n._v("是组内编号。")]),n._v(" "),v("p",[n._v("求解将哪些物品装入背包，可使物品总体积不超过背包容量，且总价值最大。")]),n._v(" "),v("p",[n._v("输出最大价值。")])])])]),n._v(" "),v("li",[v("p",[n._v("做法：")]),n._v(" "),v("ul",[v("li",[v("p",[v("strong",[n._v("方法一")]),n._v("：二维数组")]),n._v(" "),v("ul",[v("li",[v("p",[n._v("还是把问题看成01背包问题，但是要注意的是这里是把每个组都看成一个物品")]),n._v(" "),v("p",[n._v("然后解决。不过需要注意的是既然虽然看成一个物品，但是每次还是要循环组内的物品进行比较容量的大小")]),n._v(" "),v("p",[n._v("即状态方程为当前能拿物品的时候"),v("code",[n._v("f[i][j] = max(f[i][j], f[i - 1][j - v[i][k]] + w[i][k]);")])]),n._v(" "),v("p",[n._v("不能拿物品的时候"),v("code",[n._v("f[i][j] = f[i - 1][j];")])])]),n._v(" "),v("li",[v("div",{staticClass:"language-c++ extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[n._v("#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 1e3 + 10;\nint f[N][N], v[N][N], w[N][N], s[N];\nint n, m, k;\n\nint main()\n{\n    cin >> n >> m;\n    //n是物品的组数，m是背包的容量\n    for (int i = 1; i <= n; i ++ )\n    {\n        cin >> s[i];\n        //s[i]表示该组有多少个物品\n        for (int j = 0; j < s[i]; j ++ )\n            cin >> v[i][j] >> w[i][j]; \n    }\n\n    for (int i = 1; i <= n; i ++ )\n        //循环每一个组\n        for (int j = 0; j <= m; j ++ )\n            //循环每一个容量\n        {\n            f[i][j] = f[i - 1][j];\n            //假设当前不拿，则最优的情况就是前i-1个组的情况在容量为j的情况\n            for (int k = 0; k < s[i]; k ++ )\n                //循环组内的每一个物品，先看是否能拿，再看是否价值是否比原来的大\n                if (j >= v[i][k])\n                    f[i][j] = max(f[i][j], f[i - 1][j - v[i][k]] + w[i][k]);\n        }\n\n    cout << f[n][m] << endl;\n    return 0;\n}\n")])])])])])]),n._v(" "),v("li",[v("p",[v("strong",[n._v("方法二")]),n._v("：一维数组")]),n._v(" "),v("ul",[v("li",[v("p",[n._v("优化方法同理，一维滚动数组")])]),n._v(" "),v("li",[v("div",{staticClass:"language-c++ extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[n._v("#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = 1e4 + 10;\n\nint v[N][N], w[N][N], s[N], f[N];\nint n, m, k;\n\nint main()\n{\n    cin >> n >> m;\n    for (int i = 0; i < n; i ++ )\n    {\n        cin >> s[i];\n        for (int j = 0; j < s[i]; j ++ )\n        {\n            cin >> v[i][j] >> w[i][j];\n        }\n    }\n\n    for (int i = 0; i < n; i ++ )\n        for (int j = m; j >= 0; j -- )\n            for (int k = 0; k < s[i]; k ++ )\n                if (j >= v[i][k])\n                    f[j] = max(f[j], f[j - v[i][k]] + w[i][k]);\n\n    cout << f[m] << endl;\n    return 0;\n}\n")])])])])])])])])]),n._v(" "),v("h2",{attrs:{id:"背包问题求方法数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#背包问题求方法数"}},[n._v("#")]),n._v(" 背包问题求方法数")]),n._v(" "),v("ul",[v("li",[v("p",[n._v("问题：")]),n._v(" "),v("ul",[v("li",[v("p",[n._v("有"),v("code",[n._v("N")]),n._v("件物品和一个容量是"),v("code",[n._v("V")]),n._v("的背包。每件物品只能使用一次。")]),n._v(" "),v("p",[n._v("第"),v("code",[n._v("i")]),n._v("件物品的体积是"),v("code",[n._v("vi")]),n._v("，价值是"),v("code",[n._v("wi")]),n._v("。")]),n._v(" "),v("p",[n._v("求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。")]),n._v(" "),v("p",[n._v("输出 "),v("strong",[n._v("最优选法的方案数")]),n._v("。注意答案可能很大，请输出答案模"),v("code",[n._v("1e9+7")]),n._v(" 的结果。")])])])]),n._v(" "),v("li",[v("p",[n._v("做法：")]),n._v(" "),v("ul",[v("li",[n._v("同样是01背包问题，但是问的是背包方案的数量，这里可以先用一维数组优化，然后再开一个数组记录再当前的重量下能够达到的最大价值的方案数，最后再输出")])])])]),n._v(" "),v("div",{staticClass:"language-c++ extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[n._v("#include <iostream>\n#include <cstring>\n\nusing namespace std;\n\nconst int N = 1e6 + 10;\n\nint n, m, maxn = 0;\nint a[N], b[N], f[N], q[N];\n//q[]数组记录数量，\n\nint main()\n{\n    cin >> n >> m;//n是个数，m是背包容量\n    for (int i = 1; i <= n; i ++ ) cin >> a[i] >> b[i];//a[i]是体积,b[i]是价值\n    memset(q, 1, N - 1);//这里什么也不装也是一种方案\n\n    for (int i = 1; i <= n; i ++ )\n        for (int j = m; j >= a[i]; j -- )\n            if (f[j - a[i]] + b[i] > f[j])\n                //当前如果能够拿到比之间大的价值的话就拿，同时更新数量\n            {\n                f[j] = f[j - a[i]] + b[i];\n                q[j] = q[j - a[i]];\n            }\n    //但如果价值相同的话，那么就只更新数量\n            else if (f[j - a[i]] + b[i] == f[j]) q[j] += q[j - a[i]];\n\n    cout << q[m] << endl;\n    return 0;\n}\n")])])])])}),[],!1,null,null,null);i.default=t.exports}}]);